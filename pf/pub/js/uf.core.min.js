(function(factory) {
	if(typeof define === 'function' && define.amd) {
		// AMD. Register module depending on jQuery using requirejs define.
		define(['jquery'], factory);
	} else {
		// No AMD.
		factory(jQuery);
	}
}(function($) {
	$.fn.addBack = $.fn.addBack || $.fn.andSelf;
	$.fn.extend({
		actual: function(method, options) {
			// check if the jQuery method exist
			if(!this[method]) {
				throw '$.actual => The jQuery method "' + method + '" you called does not exist';
			}

			var defaults = {
				absolute: false,
				clone: false,
				includeMargin: false,
				display: 'block'
			};

			var configs = $.extend(defaults, options);

			var $target = this.eq(0);
			var fix, restore;

			if(configs.clone === true) {
				fix = function() {
					var style = 'position: absolute !important; top: -1000 !important; ';

					// this is useful with css3pie
					$target = $target.
					clone().
					attr('style', style).
					appendTo('body');
				};

				restore = function() {
					// remove DOM element after getting the width
					$target.remove();
				};
			} else {
				var tmp = [];
				var style = '';
				var $hidden;

				fix = function() {
					// get all hidden parents
					$hidden = $target.parents().addBack().filter(':hidden');
					style += 'visibility: hidden !important; display: ' + configs.display + ' !important; ';

					if(configs.absolute === true) style += 'position: absolute !important; ';

					// save the origin style props
					// set the hidden el css to be got the actual value later
					$hidden.each(function() {
						// Save original style. If no style was set, attr() returns undefined
						var $this = $(this);
						var thisStyle = $this.attr('style');

						tmp.push(thisStyle);
						// Retain as much of the original style as possible, if there is one
						$this.attr('style', thisStyle ? thisStyle + ';' + style : style);
					});
				};

				restore = function() {
					// restore origin style values
					$hidden.each(function(i) {
						var $this = $(this);
						var _tmp = tmp[i];

						if(_tmp === undefined) {
							$this.removeAttr('style');
						} else {
							$this.attr('style', _tmp);
						}
					});
				};
			}

			fix();
			// get the actual value with user specific methed
			// it can be 'width', 'height', 'outerWidth', 'innerWidth'... etc
			// configs.includeMargin only works for 'outerWidth' and 'outerHeight'
			var actual = /(outer)/.test(method) ?
				$target[method](configs.includeMargin) :
				$target[method]();

			restore();
			// IMPORTANT, this plugin only return the value of the first element
			return actual;
		},
		ufselectInput: function(option) {
			var data = option.data;
			var _this = $(this);
			//_this.html('')
			//_this.html('<textarea id= "description" class="form-control"></textarea><ul class="uf-inputSelect"></ul>')
			//常用摘要--CWYXM-4270--zsj
			/*可参考如下代码加入自己需要的常用摘要中
			 * <div id="summaryReq" class="form-group" style="width: 300px;height: 30.5px;">
						<label class="control-label" style="width: 100px;vertical-align: top;">摘要：</label>
						<div id="summary" class="control-element" style="width:190px;">
							<!--常用摘要--CWYXM-4270--zsj-->
							<textarea id= "description" class="form-control"></textarea><ul class="uf-inputSelect"></ul>
						</div> 
					</div>
			 */
			var $inp = _this.find('.form-control')
			var $selct = _this.find('.uf-inputSelect')
			var $selectli = ''
			for(var i = 0; i < data.length; i++) {
				$selectli += '<li class="PopListBoxItem">' + data[i][option.text] + '</li>'
			}
			$selct.html($selectli)
			$inp.click(function() {
				var sctop = $(this).offset().top - $(window).scrollTop() + 30
				var scleft = $(this).offset().left - $(window).scrollLeft()
				$selct.show().css({
					'position': 'fixed',
					'top': sctop,
					'left': scleft
				});
				//$(this).focus().trigger('input');
			})
			$inp.blur(function() {
				setTimeout(function() {
					$selct.hide(100)
				}, 200)
			})
			$(document).on("input propertychange", $inp, function() {
				if($inp.val() == "") {
					$selct.find("li").addClass("PopListBoxItem").show();
				} else {
					for(var i = 0; i < $selct.find("li").length; i++) {
						var tempStr = $selct.find("li").eq(i).text();
						var bool = tempStr.indexOf($(this).val());
						if(bool >= 0) {
							$selct.find("li").removeClass("PopListBoxItem")
							$selct.find("li").eq(i).addClass("PopListBoxItem")
							return false
						}
					}
				}
			})
			$(document).on("click", ".uf-inputSelect li", function(e) {
				$(this).parents('.uf-inputSelect').prev('.form-control').val($(this).text());
				$selct.hide();
			})
			$(document).on("input propertychange", $inp, function() {
				if($inp.val() == "") {
					$selct.find("li").addClass("PopListBoxItem").show();
				} else {
					for(var i = 0; i < $selct.find("li").length; i++) {
						var tempStr = $selct.find("li").eq(i).text();
						var bool = tempStr.indexOf($(this).val());
						if(bool >= 0) {
							$selct.find("li").removeClass("PopListBoxItem")
							$selct.find("li").eq(i).addClass("PopListBoxItem")
							return false
						}
					}
				}
			})
			$('body').scroll(function() {
				var sctop = $inp.offset().top - $(window).scrollTop() + 50
				var scleft = $inp.offset().left - $(window).scrollLeft()
				$selct.css({
					'position': 'fixed',
					'top': sctop,
					'left': scleft
				});
			})

		}
	});
}));

$.extend({
	wxcache: {},
	writeCache: function(key, obj) {
		this.wxcache[key] = obj;
	},
	readCache: function(key) {
		return this.wxcache[key] || {};
	},

	getGuid: function(s) {
		function S4() {
			return(((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
		}
		return(S4() + S4() + S4() + S4());
	},
	json2guid: function(json) {
		var guid = '';
		$.each(json, function(k, v) {
			guid = guid == '' ? v : guid + '-' + v;
		});
		return guid;
	},
	isNull: function(target) {
		if(typeof(target) == 'undefined' || null == target || '' === target || 'null' == target || 'undefined' === target) {
			return true;
		} else {
			return false;
		}
	},
	bof: function(str, dev) {
		if($.isNull(str)) return '';
		var strA = str.split(dev);
		return strA[0];
	},
	eof: function(str, dev) {
		if($.isNull(str)) return '';
		var strA = str.split(dev);
		return strA[1];
	},
	formatMoney: function(s, n) {
		if(!$.isNumeric(s)) return '0.00';
		var firstChar = String(s).charAt(0);
		s = String(s).replace(/[^\d\.]/g, '');

		n = n > 0 && n <= 20 ? n : 2;
		s = parseFloat((s + "").replace(/[^\d\.-]/g, "")).toFixed(n) + "";
		var l = s.split(".")[0].split("").reverse(),
			r = s.split(".")[1];
		t = "";
		for(i = 0; i < l.length; i++) {
			t += l[i] + ((i + 1) % 3 == 0 && (i + 1) != l.length ? "," : "");
		}
		s = t.split("").reverse().join("") + "." + r;
		if(firstChar == '-') {
			s = '-' + s;
		}
		return s;
	},
	//修改bug79759--zsj--金额输入框未输入数据blur后变为空，不再为0.00
	formatMoneyNull: function(s, n) {
		if(!$.isNumeric(s)) return '';
		var firstChar = String(s).charAt(0);
		s = String(s).replace(/[^\d\.]/g, '');

		n = n > 0 && n <= 20 ? n : 2;
		s = parseFloat((s + "").replace(/[^\d\.-]/g, "")).toFixed(n) + "";
		var l = s.split(".")[0].split("").reverse(),
			r = s.split(".")[1];
		t = "";
		for(i = 0; i < l.length; i++) {
			t += l[i] + ((i + 1) % 3 == 0 && (i + 1) != l.length ? "," : "");
		}
		s = t.split("").reverse().join("") + "." + r;
		if(firstChar == '-') {
			s = '-' + s;
		}
		return s;
	},
	parseFloat: function(str) {
		str = (str + '').replaceAll(',', '');
		var flt = parseFloat(str).toFixed(2);
		if(!isNaN(flt)) return flt;
		return 0.00;
	},
	timeOutRun: function(obj, Event, callBack, time) {
		var timeOutId = "",
			reStart = true;
		if($.isNull(obj) || $.isNull(Event)) {
			clearTimeout(timeOutId);
			timeOutRun(time);
		} else {
			obj.on(Event, function() {
				clearTimeout(timeOutId);
				if(reStart) {
					timeOutRun(time);
				}
			});
		}

		function timeOutRun(time) {
			reStart = false;
			var timeOutId = setTimeout(function() {
				reStart = true;
				callBack();
			}, time);
		}
	},
	ufajax: function(url, type, argu, callback) {
		var menuid = $.getUrlParam('menuid');
		if($.isNull(url)) return false;
		if(type != 'get') {
			argu = JSON.stringify(argu);
		}
		$.ajax({
			url: url,
			type: type, //GET
			async: true, //或false,是否异步
			data: argu,
			timeout: 60000, //超时时间
			dataType: 'json', //返回的数据格式：json/xml/html/script/jsonp/text
			contentType: 'application/json; charset=utf-8',
			beforeSend: function(xhr) {
				//修改跨账簿业务处理85平台拿不到单位 guohx 20200828
				xhr.setRequestHeader("x-function-id",menuid);
			},
			success: function(result) {
				if(result.flag == 'success') {
					callback(result);
				} else {
					var msg = '成功！\r\n' +
						'请求：' + url +
						'\r\n' +
						'参数：' + JSON.stringify(argu) +
						'\r\n' +
						'信息：' + result.msg;
					//alert(msg);
				}
			},
			error: function(jqXHR, textStatus) {
				var error = "";
				switch(jqXHR.status) {
					case 408:
						error = "请求超时";
						break;
					case 500:
						error = "服务器错误";
						break;
					default:
						break;
				}
				if(error != "") {
					var msg = '成功！' +
						'\r\n' +
						'请求：' + url +
						'\r\n' +
						'参数：' + JSON.stringify(argu) +
						'\r\n' +
						'信息：' + error;
					alert(msg);
					return false;
				}
			},
			complete: function(data) {

			}
		});
	},
	myBrowser: function() {
		var userAgent = navigator.userAgent; //取得浏览器的userAgent字符串
		var isOpera = userAgent.indexOf("Opera") > -1;
		if(isOpera) {
			return "Opera"
		}; //判断是否Opera浏览器
		if(userAgent.indexOf("Firefox") > -1) {
			return "FF";
		} //判断是否Firefox浏览器
		if(userAgent.indexOf("Chrome") > -1) {
			return "Chrome";
		}
		if(userAgent.indexOf("Safari") > -1) {
			return "Safari";
		};
		if("ActiveXObject" in window) {
			return "IE";
		};
		if(userAgent.indexOf("compatible") > -1 && userAgent.indexOf("MSIE") > -1 && !isOpera) {
			return "IE";
		}; //判断是否IE浏览器
	},
	simpJsonToTree: function(data, option) {
		var opt = option || {};
		var idFiled, textFiled, parentField;
		idFiled = opt.idFiled || 'id';
		textFiled = opt.textFiled || 'text';
		parentField = opt.parentField || 'pid';
		var i, l, treeData = [],
			tmpMap = [];
		for(i = 0, l = data.length; i < l; i++) {
			tmpMap[data[i][idFiled]] = data[i];
		}
		for(i = 0, l = data.length; i < l; i++) {
			if(tmpMap[data[i][parentField]] && data[i][idFiled] != data[i][parentField]) {
				if(!tmpMap[data[i][parentField]]['children'])
					tmpMap[data[i][parentField]]['children'] = [];
				data[i]['text'] = data[i][textFiled];
				data[i]['id'] = data[i][idFiled];
				/**begin attr**/
				$.each(data[i], function(key, value) {
					if(key != 'id' && key != 'text') {
						if(!tmpMap[data[i][idFiled]]['attributes'])
							tmpMap[data[i][idFiled]]['attributes'] = {};
						tmpMap[data[i][idFiled]]['attributes'][key] = value;
					}
				});
				/**end attr**/
				tmpMap[data[i][parentField]]['children'].push(data[i]);
			} else {
				data[i]['text'] = data[i][textFiled];
				data[i]['id'] = data[i][idFiled];
				treeData.push(data[i]);
			}
		}
		return treeData;
	},
	isScroll: function(el) {
		// test targets
		var elems = el ? [el] : [document.documentElement, document.body];
		var scrollX = false,
			scrollY = false;
		for(var i = 0; i < elems.length; i++) {
			var o = elems[i];
			// test horizontal
			var sl = o.scrollLeft;
			o.scrollLeft += (sl > 0) ? -1 : 1;
			o.scrollLeft !== sl && (scrollX = scrollX || true);
			o.scrollLeft = sl;
			// test vertical
			var st = o.scrollTop;
			o.scrollTop += (st > 0) ? -1 : 1;
			o.scrollTop !== st && (scrollY = scrollY || true);
			o.scrollTop = st;
		}
		// ret
		return {
			scrollX: scrollX,
			scrollY: scrollY
		};
	},
	newZIndex: function() {
		var zindex = 0;
		$('body').find('div').each(function() {
			var tmpIndex = $(this).css('z-index');

			if(tmpIndex != 'auto') {
				if(zindex <= parseInt(tmpIndex)) {
					zindex = parseInt(tmpIndex);
				}
			}
		});
		if(zindex == 0) zindex = 999;
		return zindex + 1;
	},
	stopDefault: function(e) {
		if(e && e.preventDefault)
			e.preventDefault();
		else
			window.event.returnValue = false;
		return false;

	},
	getUrlParam: function(name) {
		var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)"); // 构造一个含有目标参数的正则表达式对象
		var r = window.location.search.substr(1).match(reg); // 匹配目标参数
		if(r != null)
			return unescape(r[2]);
		return ""; // 返回参数值
	},
	equalsObject: function(o1, o2) {
		if(!($.isPlainObject(o1) && $.isPlainObject(o2))) {
			return false;
		}
		var k1k2 = [],
			k1 = [],
			k2 = [];
		$.each(o1, function(k, v) {
			k1.push(k);
		});
		$.each(o2, function(k, v) {
			k2.push(k);
		});

		if(k1.length != k2.length) {
			return false;
		}

		k1k2 = k1;
		k1k2 = k1k2.concat(k2);
		k1k2.distinct();
		if(k1.length != k1k2.length || k2.length != k1k2.length) {
			return false;
		}
		var flag = true;
		$.each(k1k2, function(i, v) {
			var v1 = o1[v];
			var v2 = o2[v];
			if(typeof v1 != typeof v2) {
				flag = false;
			} else {
				if($.isPlainObject(v1) && $.isPlainObject(v2)) { //recursion
					flag = $.equalsObject(v1, v2);
					if(!flag) {
						return false;
					}
				} else if($.isArray(v1) && $.isArray(v2)) {
					flag = $.equalsArray(v1, v2);
					if(!flag) {
						return false;
					}
				} else {
					if(v1 !== v2) {
						flag = false;
					}
				}
			}
		});
		return flag;
	},
	equalsArray: function(a1, a2) {
		if(!($.isArray(a1) && $.isArray(a2))) {
			return false;
		}
		if(a1.length != a2.length) {
			return false;
		}
		a1.sort();
		a2.sort();
		for(var i = 0; i < a1.length; i++) {
			if(typeof a1[i] != typeof a2[i]) {
				return false;
			}

			if($.isPlainObject(a1[i]) && $.isPlainObject(a2[i])) {
				var retVal = $.equalsObject(a1[i], a2[i]);
				if(!retVal) {
					return false;
				}
			} else if($.isArray(a1[i]) && $.isArray(a2[i])) { //recursion
				if(!$.equalsArray(a1, a2)) {
					return false;
				}

			} else if(a1[i] !== a2[i]) {
				return false;
			}
		}
		return true;
	}
});
//Array.select(function(el, i, res, param) {return res.length < 20;});
Array.prototype.select = function(f) {
	var fn = f;
	var res = [];
	var l = this.length;
	var p = [0, 0, res];
	for(var i = 1; i < arguments.length; i++) p.push(arguments[i]);
	for(var i = 0; i < l; i++) {
		if(typeof this[i] == "undefined") continue;
		p[0] = this[i];
		p[1] = i;
		if(!!fn.apply(this, p)) res.push(this[i]);
	}
	return res;
}
Array.prototype.distinct = function() {
	this.sort();
	for(var i = 0; i < this.length - 1; i++) {
		if($.isPlainObject(this[i]) && $.isPlainObject(this[i + 1])) {
			if($.equalsObject(this[i], this[i + 1])) {
				this.splice(i, 1);
			}
		} else if($.isArray(this[i]) && $.isArray(this[i + 1])) {
			if($.equalsArray(this[i], this[i + 1])) {
				this.splice(i, 1);
			}

		} else if(this[i] === this[i + 1]) {
			this.splice(i, 1);
		}
	}
}
Array.prototype.remove = function(val) {
	for(var i = 0; i < this.length; i++) {
		if(this[i] == val) {
			this.splice(i, 1);
			break;
		}
	}
};

String.prototype.replaceAll = function(s1, s2) {
	return this.replace(new RegExp(s1, "gm"), s2);
};
Date.prototype.Format = function(fmt) { //author: meizz 
	var o = {
		"M+": this.getMonth() + 1, //月份 
		"d+": this.getDate(), //日 
		"h+": this.getHours(), //小时 
		"m+": this.getMinutes(), //分 
		"s+": this.getSeconds(), //秒 
		"q+": Math.floor((this.getMonth() + 3) / 3), //季度 
		"S": this.getMilliseconds() //毫秒 
	};
	if(/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
	for(var k in o)
		if(new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
	return fmt;
};
$.fn.intInput = function() {
	function amount(th) {
		if(th.value.length == 1) {
			th.value = th.value.replace(/[^1-9]/g, '');
		} else {
			th.value = th.value.replace(/\D/g, '');
		}
	}

	$(this).focus(function() {
		$(this).removeClass('tr');
	});
	$(this).keyup(function() {
		amount(this);
	});
	$(this).blur(function() {
		amount(this);
		$(this).addClass('tr');
	});

};
//控制输入为数字，且不能以0开头，但是可以输入0只是在bur时会把0截取
$.fn.intInputZero = function() {
	function amount(th) {
		if(th.value.length == 1) {
			th.value = th.value.replace(/[^0-9]/g, '');
		} else {
			th.value = th.value.replace(/\D/g, '');
		}
	}

	$(this).focus(function() {
		$(this).removeClass('tr');
	});
	$(this).keyup(function() {
		amount(this);
	});
	$(this).blur(function() {
		if($(this).val().length > 1) {
			var rex = RegExp(/^[0]+[0-9]*$/gi);
			if(rex.test($(this).val())) {
				$(this).val($(this).val().slice(1));
			}
		} else {
			$(this).val($(this).val().replace(/\D/g, ''));
		}
		amount(this);
		$(this).addClass('tr');
	});

};
$.fn.amtInput = function() {
	$(this).addClass('amt');

	function amount(th) {
		var regStrs = [
			['^0(\\d+)$', '$1'], //禁止录入整数部分两位以上，但首位为0
			['[^\\d\\.]+$', ''], //禁止录入任何非数字和点
			['\\.(\\d?)\\.+', '.$1'], //禁止录入两个以上的点
			['^(\\d+\\.\\d{2}).+', '$1'] //禁止录入小数点后两位以上
		];
		for(i = 0; i < regStrs.length; i++) {
			var reg = new RegExp(regStrs[i][0]);
			th.value = th.value.replace(reg, regStrs[i][1]);
		}
	}

	function overFormat(th) {
		var v = th.value;
		if(v === '') {
			v = '0.00';
		} else if(v === '0') {
			v = '0.00';
		} else if(v === '0.') {
			v = '0.00';
		} else if(/^0+\d+\.?\d*.*$/.test(v)) {
			v = v.replace(/^0+(\d+\.?\d*).*$/, '$1');
			v = inp.getRightPriceFormat(v).val;
		} else if(/^0\.\d$/.test(v)) {
			v = v + '0';
		} else if(!/^\d+\.\d{2}$/.test(v)) {
			if(/^\d+\.\d{2}.+/.test(v)) {
				v = v.replace(/^(\d+\.\d{2}).*$/, '$1');
			} else if(/^\d+$/.test(v)) {
				v = v + '.00';
			} else if(/^\d+\.$/.test(v)) {
				v = v + '00';
			} else if(/^\d+\.\d$/.test(v)) {
				v = v + '0';
			} else if(/^[^\d]+\d+\.?\d*$/.test(v)) {
				v = v.replace(/^[^\d]+(\d+\.?\d*)$/, '$1');
			} else if(/\d+/.test(v)) {
				v = v.replace(/^[^\d]*(\d+\.?\d*).*$/, '$1');
				ty = false;
			} else if(/^0+\d+\.?\d*$/.test(v)) {
				v = v.replace(/^0+(\d+\.?\d*)$/, '$1');
				ty = false;
			} else {
				v = '0.00';
			}
		}
		th.value = v;
	}
	$(this).focus(function() {
		var val = $(this).val();
		$(this).val(val.replaceAll(',', ''));
		$(this).removeClass('tr');
	});
	$(this).keyup(function() {
		amount(this);
	});
	$(this).blur(function() {
		overFormat(this);
		var val = $(this).val();
		$(this).val($.formatMoney(val));
		$(this).addClass('tr');
	});

};

//修改bug79759--zsj--金额输入框未输入数据blur后变为空，不再为0.00
$.fn.amtInputNull = function() {
	$(this).addClass('amt');

	function amount(th) {
		var regStrs = [
			['^0(\\d+)$', '$1'], //禁止录入整数部分两位以上，但首位为0
			['[^\\d\\.]+$', ''], //禁止录入任何非数字和点
			['\\.(\\d?)\\.+', '.$1'], //禁止录入两个以上的点
			['^(\\d+\\.\\d{2}).+', '$1'] //禁止录入小数点后两位以上
		];
		for(i = 0; i < regStrs.length; i++) {
			var reg = new RegExp(regStrs[i][0]);
			th.value = th.value.replace(reg, regStrs[i][1]);
		}
	}

	function overFormat(th) {
		var v = th.value;
		if(v === '') {
			v = '';
		} else if(v === '0') {
			v = '0.00';
		} else if(v === '0.') {
			v = '0.00';
		} else if(/^0+\d+\.?\d*.*$/.test(v)) {
			v = v.replace(/^0+(\d+\.?\d*).*$/, '$1');
			v = inp.getRightPriceFormat(v).val;
		} else if(/^0\.\d$/.test(v)) {
			v = v + '0';
		} else if(!/^\d+\.\d{2}$/.test(v)) {
			if(/^\d+\.\d{2}.+/.test(v)) {
				v = v.replace(/^(\d+\.\d{2}).*$/, '$1');
			} else if(/^\d+$/.test(v)) {
				v = v + '.00';
			} else if(/^\d+\.$/.test(v)) {
				v = v + '00';
			} else if(/^\d+\.\d$/.test(v)) {
				v = v + '0';
			} else if(/^[^\d]+\d+\.?\d*$/.test(v)) {
				v = v.replace(/^[^\d]+(\d+\.?\d*)$/, '$1');
			} else if(/\d+/.test(v)) {
				v = v.replace(/^[^\d]*(\d+\.?\d*).*$/, '$1');
				ty = false;
			} else if(/^0+\d+\.?\d*$/.test(v)) {
				v = v.replace(/^0+(\d+\.?\d*)$/, '$1');
				ty = false;
			} else {
				v = '';
			}
		}
		th.value = v;
	}
	// 类名“selected”为需求#6943添加金额类操作逻辑: 右边输入框获取焦点时带入左边值
	// 修改右边输入框值后去掉该类，使得失去焦点时正常格式化金额
	$(this).focus(function() {
		if(!$(this).hasClass("selected")) {
			var val = $(this).val();
			$(this).val(val.replaceAll(',', ''));
		} else {
			if($(this).val() != '') {
				$(this).val($(this).val().split(",").join(""))
			}
		}
		$(this).removeClass('tr');
	});
	$(this).keyup(function() {
		amount(this);
		$(this).removeClass('selected');
	});
	$(this).blur(function() {
		overFormat(this);
		// if (!$(this).hasClass("selected")) {
		var val = $(this).val();
		$(this).val($.formatMoneyNull(val)); //修改bug79759--zsj--金额输入框未输入数据blur后变为空，不再为0.00
		// }
		$(this).addClass('tr');
	});
};

//修改bug7022--lyy--金额输入框支持输入负号
$.fn.amtInputMinus = function() {
	$(this).addClass('amt');

	function amount(th) {
		var regStrs = [
			['^0(\\d+)$', '$1'], //禁止录入整数部分两位以上，但首位为0
			['[^\\d\\.\\-]+$', ''], //禁止录入任何非数字和点和负号 修改bug7022--lyy--金额输入框支持输入负号
			['\\.(\\d?)\\.+', '.$1'], //禁止录入两个以上的点
			['^(\\d+\\.\\d{2}).+', '$1'] //禁止录入小数点后两位以上
		];
		for(i = 0; i < regStrs.length; i++) {
			var reg = new RegExp(regStrs[i][0]);
			th.value = th.value.replace(reg, regStrs[i][1]);
		}
	}

	function overFormat(th) {
		var v = th.value;
		if(v === '') {
			v = '';
		} else if(v === '0') {
			v = '0.00';
		} else if(v === '0.') {
			v = '0.00';
		} else if(/^0+\d+\.?\d*.*$/.test(v)) {
			v = v.replace(/^0+(\d+\.?\d*).*$/, '$1');
			v = inp.getRightPriceFormat(v).val;
		} else if(/^0\.\d$/.test(v)) {
			v = v + '0';
		} else if(!/^\d+\.\d{2}$/.test(v)) {
			if(/^\d+\.\d{2}.+/.test(v)) {
				v = v.replace(/^(\d+\.\d{2}).*$/, '$1');
			} else if(/^\d+$/.test(v)) {
				v = v + '.00';
			} else if(/^\d+\.$/.test(v)) {
				v = v + '00';
			} else if(/^\d+\.\d$/.test(v)) {
				v = v + '0';
			} else if(/^[^\d]+\d+\.?\d*$/.test(v)) {
				// v = v.replace(/^[^\d]+(\d+\.?\d*)$/, '$1'); // 修改bug7022--lyy--金额输入框支持输入负号
			} else if(/\d+/.test(v)) {
				v = v.replace(/^[^\d]*(\d+\.?\d*).*$/, '$1');
				ty = false;
			} else if(/^0+\d+\.?\d*$/.test(v)) {
				v = v.replace(/^0+(\d+\.?\d*)$/, '$1');
				ty = false;
			} else {
				v = '';
			}
		}
		th.value = v;
	}
	// 类名“selected”为需求#6943添加金额类操作逻辑: 右边输入框获取焦点时带入左边值
	// 修改右边输入框值后去掉该类，使得失去焦点时正常格式化金额
	$(this).focus(function() {
		if(!$(this).hasClass("selected")) {
			var val = $(this).val();
			$(this).val(val.replaceAll(',', ''));
		} else {
			if($(this).val() != '') {
				$(this).val($(this).val().split(",").join(""))
			}
		}
		$(this).removeClass('tr');
	});
	$(this).keyup(function() {
		amount(this);
		$(this).removeClass('selected');
	});
	$(this).blur(function() {
		overFormat(this);
		// if (!$(this).hasClass("selected")) {
		var val = $(this).val();
		$(this).val($.formatMoneyNull(val)); //修改bug79759--zsj--金额输入框未输入数据blur后变为空，不再为0.00
		// }
		$(this).addClass('tr');
	});
};

$.fn.numberInput = function() {
	var obj = $(this);
	obj.keypress(function(event) {
		var event = event || window.event;
		if(event.shiftKey) { //或者event.keyCode==16 也是可行的。
			event.cancelBubble = true;
			event.keyCode = 0;
			return false;
		}
		console.log(event.which)
		var value = obj.val();
		if(value.length == 0 && event.which == 46) {
			event.preventDefault();
			return;
		}
		if(value.indexOf('.') != -1 && event.which == 46) {
			event.preventDefault();
			return;
		}
		//修改录入数字后无法再改成负数的问题
		// if(value.length > 0 && event.which == 45) {
		// 	event.preventDefault();
		// 	return;
		// }
		if(event.which && (event.which < 48 || event.which > 57) && event.which != 8 && event.which != 46 && event.which != 45) {
			event.preventDefault();
			return;
		}
	});
	obj.keyup(function(event) {
		var value = obj.val();
		if(/[^\d.-]/.test(value)) { //替换非数字字符  
			var temp_amount = value.replace(/[^\d.-]/g, '');
			obj.val(temp_amount);
		}
	});
};

$.fn.sortTable = function(options) {
	var obj = this;
	var tbody = $(obj).find('tbody');
	var rows = tbody.children();
	var selectedRow;
	var moveBlock;
	var offsetLeft = $(this).offset().left;
	var offsetTop = $(this).offset().top;
	///////
	function showClone() {
		if($('.sort-table-clone').length > 0) {
			$('.sort-table-clone').remove();
		}
		$('body').css({
			'overflow-x': 'hidden'
		});
		var moveBlock = $('<div class="sort-table-clone" style="position: absolute;z-index:9999999999999"></div>').addClass('mouseOver').appendTo('body');
		$(selectedRow).clone().removeAttr('id').appendTo(moveBlock);
		$(moveBlock).find('td').css({
			'vertical-align': 'middle',
			'border': 'none',
			'line-height': '28px'
		});
		var cols = $(selectedRow).find('td');
		$(moveBlock).find('td').each(function(idx, col) {
			$(this).css({
				'width': $(cols[idx]).width() + 'px'
			});
		});
		moveBlock.css({
			'border': '1px red dashed',
			//'height': $(selectedRow).height() + 'px',
			'width': $(selectedRow).width() + 'px'
		});
		return moveBlock;
	}

	//压下鼠标时选取行
	rows.mousedown(function(e) {
		pointerY = e.clientY
		selectedRow = this;
		tbody.css('cursor', 'move');
		//根据需求先去除鼠标离开时的样式
		$(selectedRow).addClass('mouseOver');
		moveBlock = showClone();
		$(moveBlock).css({
			'top': e.pageY + 15 + 'px',
			'left': e.pageX + 15 + 'px'
		});
		return false; //防止拖动时选取文本内容，必须和 mousemove 一起使用
	});
	rows.mousemove(function(e) {
		e.stopPropagation();
		$(moveBlock).css({
			'top': e.pageY + 15 + 'px',
			'left': e.pageX + 15 + 'px'
		});
		if(selectedRow) {
			if(selectedRow != this) {
				if(e.clientY < pointerY) {
					$(this).addClass('moveUp').removeClass('moveDown');
					$(this).find('td').append('<div class="line"></div>');
				} else {
					$(this).addClass('moveDown').removeClass('moveUp');
					$(this).find('td').append('<div class="line"></div>');
				}
			}
			//滚动
			var timeId = setTimeout(function() {
				clearTimeout(timeId);
				var p = $(window);
				if($(p).scrollTop() > 0 && e.pageY - $(p).scrollTop() < 50) {
					$(p).scrollTop($(p).scrollTop() - 30);
				} else if($(p).height() + $(p).scrollTop() - e.pageY < 50) {
					$(p).scrollTop($(p).scrollTop() + 30);
				}
			}, 30);

		}

		return false; //防止拖动时选取文本内容，必须和 mousedown 一起使用
	});
	rows.mouseleave(function(e) {
		e.stopPropagation();
		rows.find('td .line').remove();
		rows.removeClass('moveUp').removeClass('moveDown');
		return false; //防止拖动时选取文本内容，必须和 mousedown 一起使用
	});
	//释放鼠标键时进行插入
	rows.mouseup(function(e) {
		$(moveBlock).remove();

		if(selectedRow) {

			if(selectedRow != this) {
				if(e.clientY < pointerY) {
					$(this).before($(selectedRow)).removeClass('mouseOver'); //插入
				} else {
					$(this).after($(selectedRow)).removeClass('mouseOver'); //插入
				}
			}

			//rows.unbind();
			tbody.find('.mouseOver').removeClass('mouseOver');
			tbody.css('cursor', 'default');
			selectedRow = null;
			if(options.onEndDrag) {
				options.onEndDrag(selectedRow, this);
			}
		}
		$('body').css({
			'overflow-x': 'auto'
		});
	});
	//标示当前鼠标所在位置
	rows.hover(

		function() {
			if(selectedRow && selectedRow != this) {
				$(this).addClass('mouseOver'); //区分大小写的，写成 'mouseover' 就不行
			}
		},
		function() {
			if(selectedRow && selectedRow != this) {
				$(this).removeClass('mouseOver');
			}
		}

	);

	//当用户压着鼠标键移出 tbody 时，清除 cursor 的拖动形状，以前当前选取的 selectedRow			
	tbody.mouseover(function(event) {
		event.stopPropagation(); //禁止 tbody 的事件传播到外层的 div 中
	});
	$(obj).mouseover(function(event) {
		if($(event.relatedTarget).parents(tbody)) //event.relatedTarget: 获取该事件发生前鼠标所在位置处的元素
		{
			tbody.css('cursor', 'default');
			//selectedRow = null;
		}
	});
}
//内容在外面初始化
//options.element
$.fn.slidedown = function(options) {
	if(typeof options == 'string') {
		if(options == 'close') {
			var _sd = $.data($('body')[0], 'slidedown');
			_sd.remove();
		}
		return false;
	}

	options.position = options.position || 'right';
	var _sd = $.data($('body')[0], 'slidedown');
	if(!_sd) {
		_sd = $('<div/>').css({
			'display': 'inline-block',
			'background-color': '#fff',
			'position': 'absolute',
			'z-index': 2000,
			'border': '1px #ccc solid',
			'min-width': '320px',
			'height': '300px',
			'padding': '10px',
			'overflow-y': 'auto'
		}).hide().appendTo('body');

		if(options.element && !$.data(_sd[0], 'child')) {
			$.data(_sd[0], 'child', options.element);
			$(options.element).appendTo(_sd).show();
		}
	}
	$.data(_sd[0], 'canclose', 'false');
	var top = $(this).offset().top + $(this).outerHeight(true);
	var sc = $(window).scrollTop();
	if(top + _sd.outerHeight(true) > sc + $(window).height() - 20) {
		top = sc + $(window).height() - _sd.outerHeight(true) - 20;
	}
	var left = options.position == 'right' ? $(this).offset().left - _sd.outerWidth(true) : $(this).offset().left;
	_sd.css({
		'top': top + 'px',
		'left': left + 'px'
	}).slideDown();
	$.data($('body')[0], 'slidedown', _sd);
	$(window).on('scroll DOMMouseScroll', function(e) {
		_sd.slideUp();
		$.data(_sd[0], 'canclose', 'false');
	});
	$(document).on('mouseover', function(e) {
		var _sd = $.data($('body')[0], 'slidedown');
		if(!_sd) {
			return false;
		}
		if(!$(e.target).is(_sd) && $.data(_sd[0], 'canclose') == 'true') {
			var timeId = setTimeout(function() {
				if($.data(_sd[0], 'canclose') == 'true') {
					_sd.slideUp();
					$.data(_sd[0], 'canclose', 'false');
				}
				clearTimeout(timeId);
			}, 600);
		}
	});
	$(_sd).off().on('mouseover', function(e) {
		$.data(this, 'canclose', 'false');
	}).on('mouseout', function() {
		$.data(this, 'canclose', 'true');
	});
};
//使用第三方jquery.colResizable
$.fn.tblcolResizable = function(options,callback,last) {
	options = options || {};
	if(last == undefined){
		last = 0
	}
	var target = $(this);
	if(target.hasClass('JColResizer')) {
		target.colResizable({
			disable: true
		});
	};
	var opts = {
		last:last,
		liveDrag: true,
		draggingClass: "dragging",
		postbackSafe:true, //记忆拖动列宽 guohx
		resizeMode:'overflow',  //允许通过父容器的溢出来调整列的大小
		onDrag: function(e) {},
		onResize: function(e) {
			if(callback==undefined || callback == ''){
				var isshows = true
				if($(".headFixedDiv").hasClass('hidden')) {
					isshows = false
				}
				if($(".headFixedDiv").length > 0) {
					$(".headFixedInnerDiv").html("");
					var t = target
					var textAlign = t.find("thead").find("th").eq(1).css("text-align")
					var cloneTable = t.clone();
					cloneTable.appendTo($(".headFixedInnerDiv"))
					$(".headFixedInnerDiv").find("table").addClass("fixedTable")
					var id = $(".headFixedInnerDiv").find("table").attr("id");
					$(".headFixedInnerDiv").find("table").attr("id", id + "fixed")
					// $(".fixedTable").append($(cloneTable).html())
					$(".fixedTable").find("tbody").css("visibility", "hidden")
					$(".headFixedInnerDiv").find("th").find("input[type=checkbox]").closest("label").addClass("hidden")
					$(".headFixedDiv th").css("text-align", textAlign)
					console.log(target.attr('id'))
					// $('#'+target.attr('id')+'_wrapper').ufScrollBar('uploadw');
					// $(document).trigger('scroll')
					// $(".headFixedDiv").remove()
					// target.fixedTableHead()
					// $(".headFixedInnerDiv").css("marginLeft", -scrollDistance);
					// if (isshows) {
					// 	$(".headFixedDiv").removeClass('hidden')
					// }
				}
			}else{
				callback()
			}
		}
	};
	if(options.hasOwnProperty('bindTable')) {
		var $dragTable = $(this);
		opts.onDrag = function(e) {
			var $bindTable = $(options.bindTable);
			var $bindTr;
			var tds = $dragTable.find('tr:eq(0) td,tr:eq(0) th');
			$bindTable.find('tr').each(function(idx, tr) {
				$bindTr = $(this);
				if($bindTr.find('td,th').length == tds.length) {
					return false;
				}
			});

			for(var idx = 0; idx < tds.length; idx++) {
				var tdWidth = $(tds[idx]).outerWidth();
				var $bindTd = $bindTr.find('td:eq(' + idx + '),th:eq(' + idx + ')');
				var def_w = $bindTd.outerWidth(true) - $bindTd.width();
				$bindTd.css({
					'width': tdWidth - def_w + 'px'
				});
			};
		}
	}
	target.colResizable(opts);
	opts.onDrag();
};
(function($, window, document, undefined) {
	//定义的构造函数
	var Drag = function(ele, opt) {
		this.$ele = ele,
			this.x = 0,
			this.y = 0,
			this.defaults = {
				parent: 'parent',
				randomPosition: true,
				direction: 'all',
				handler: false,
				dragStart: function(x, y) {},
				dragEnd: function(x, y) {},
				dragMove: function(x, y) {}
			},
			this.options = $.extend({}, this.defaults, opt)
	}
	//定义方法
	Drag.prototype = {
		run: function() {
			var $this = this;
			var element = this.$ele;
			var randomPosition = this.options.randomPosition; //位置
			var direction = this.options.direction; //方向
			var handler = this.options.handler;
			var parent = this.options.parent;
			var isDown = false; //记录鼠标是否按下
			var fun = this.options; //使用外部函数
			var X = 0,
				Y = 0,
				moveX,
				moveY;
			// 阻止冒泡
			/*			element.find('*').not('img').mousedown(function(e) {
							e.stopPropagation();
						});*/
			//初始化判断
			if(parent == 'parent') {
				parent = element.parent();
			} else {
				parent = element.parents(parent);
			}
			if(!handler) {
				handler = element;
			} else {
				handler = element.find(handler);
			}
			//初始化
			parent.css({
				position: 'relative'
			});
			element.css({
				position: 'absolute'
			});
			var boxWidth = 0,
				boxHeight = 0,
				sonWidth = 0,
				sonHeight = 0;
			//盒子 和 元素大小初始化
			initSize();
			if(randomPosition) {
				randomPlace();
			}
			$(window).resize(function() {
				initSize();
				if(randomPosition) {
					randomPlace();
				}
			});
			//盒子 和 元素大小初始化函数
			function initSize() {
				boxWidth = parent.outerWidth();
				boxHeight = parent.outerHeight();
				sonWidth = element.outerWidth();
				sonHeight = element.outerHeight();
			}
			//位置随机函数
			function randomPlace() {
				if(randomPosition) {
					var randX = parseInt(Math.random() * (boxWidth - sonWidth));
					var randY = parseInt(Math.random() * (boxHeight - sonHeight));
					if(direction.toLowerCase() == 'x') {
						element.css({
							left: randX
						});
					} else if(direction.toLowerCase() == 'y') {
						element.css({
							top: randY
						});
					} else {
						element.css({
							left: randX,
							top: randY
						});
					}
				}
			}
			handler.css({
				cursor: 'move'
			}).mousedown(function(e) {
				isDown = true;
				X = e.pageX;
				Y = e.pageY;
				$this.x = element.position().left;
				$this.y = element.position().top;
				element.addClass('on');
				fun.dragStart(parseInt(element.css('left')), parseInt(element.css('top')));
				window.mosedownhandlerclick = true
				$('.ufma-combox-input,.uf-combox-input').trigger('blur');
				window.mosedownhandlerclick = false
				return false;
			});
			handler.mouseup(function(e) {
				fun.dragEnd(parseInt(element.css('left')), parseInt(element.css('top')));
				element.removeClass('on');
				isDown = false;
			});
			handler.mousemove(function(e) {
				if(e.buttons == 0) {
					isDown = false;
				}
				if(!isDown) return false;
				moveX = $this.x + e.pageX - X;
				moveY = $this.y + e.pageY - Y;

				function thisXMove() { //x轴移动
					if(isDown == true) {
						element.css({
							left: moveX
						});
					} else {
						return;
					}
					if(moveX < 0) {
						element.css({
							left: 0
						});
					}
					/*					if(moveX > (boxWidth - sonWidth)) {
											element.css({
												left: boxWidth - sonWidth
											});
										}*/
					return moveX;
				}

				function thisYMove() { //y轴移动
					if(isDown == true) {
						element.css({
							top: moveY
						});
					} else {
						return;
					}
					if(moveY < 0) {
						element.css({
							top: 0
						});
					}
					/*					if(moveY > (boxHeight - sonHeight)) {
											element.css({
												top: boxHeight - sonHeight
											});
										}*/
					return moveY;
				}

				function thisAllMove() { //全部移动
					if(isDown == true) {
						element.css({
							left: moveX,
							top: moveY
						});
					} else {
						return;
					}
					if(moveX < 0) {
						element.css({
							left: 0
						});
					}
					if(moveX > (boxWidth - sonWidth)) {
						element.css({
							left: boxWidth - sonWidth
						});
					}
					if(moveY < 0) {
						element.css({
							top: 0
						});
					}
					/*					if(moveY > (boxHeight - sonHeight)) {
											element.css({
												top: boxHeight - sonHeight
											});
										}*/
				}
				if(isDown) {
					fun.dragMove(parseInt(element.css('left')), parseInt(element.css('top')));
				} else {
					return false;
				}
				if(direction.toLowerCase() == "x") {
					thisXMove();
				} else if(direction.toLowerCase() == "y") {
					thisYMove();
				} else {
					thisAllMove();
				}
			});
		}
	}

	//插件
	$.fn.ufDrag = function(options) {
		//创建实体
		var drag = new Drag(this, options);
		//调用方法
		drag.run();
		return this;
	}
})(jQuery, window, document);
(function($) {

	function ufButtonedit(element, options) {
		this.bearer = element;
		if(this.bearer.find('.uf-buttonedit-border').length == 0) {
			this.options = options;
		} else {
			var opRem = $.data(this.bearer[0], 'options');
			this.options = $.extend({}, opRem, options);
			this.bearer.find('.uf-buttonedit-border').remove();
		}
		this.options['autocomplete'] = 'off'; //this.options['autocomplete'] || this.bearer.attr('autocomplete');
		this.options['placeholder'] = this.options['placeholder'] || this.bearer.attr('placeholder') || '';
		this.options['disabled'] = this.options['disabled'] || this.bearer.attr('disabled');
		this.options['name'] = this.options['name'] || this.bearer.attr('name');
		if(this.options['readonly'] === 'false' || this.options['readonly'] == false || !this.options['readonly']) {
			this.options['readOnly'] = '';
		} else {
			this.options['readOnly'] = 'readonly';
		}
		this.sender = {};
		$.data(this.bearer[0], 'options', this.options);
	}

	ufButtonedit.prototype = {
		constructor: ufButtonedit,
		setContent: function() {
			this.buttonedit = $('<div class="uf-buttonedit-border"><input type="text" name="' + this.options.name + '" class="uf-buttonedit-input inputedit" ' + this.options.readOnly + ' autocomplete="off" placeholder="' + this.options.placeholder + '" ><span title="" name="trigger" class="uf-buttonedit-button"><span class="uf-buttonedit-icon ">...</span></span></div>').appendTo(this.bearer).trigger('create');
			this.btn = this.buttonedit.find(".uf-buttonedit-button");
			if(this.options.disabled || this.options.disabled == 'true') {
				this.bearer.addClass('uf-buttonedit-disabled');
			}
		},

		setEvents: function() {
			var btnedit = this;
			this.btn.click(function(e) {
				e.preventDefault();
				btnedit.onBtnClick();
				e.stopPropagation();
			});
		},
		setDom: function() {
			var btnedit = this.buttonedit;
			this.sender = {
				setValue: function(val) {
					btnedit.find('.uf-buttonedit-input').val(val);
				},
				getValue: function() {
					return btnedit.find('.uf-buttonedit-input').val();
				}
			};
		},
		activate: function() {
			this.setContent();
			this.setDom();
			this.setEvents();
		},
		onBtnClick: function() {
			if(this.bearer.hasClass('uf-buttonedit-disabled')) {
				return false;
			}
			this.options.onBtnClick(this.bearer, this.sender);
		}
	}

	$.fn.ufButtonedit = function(options) {

		this.each(function() {
			var setting = $.extend({}, $.fn.ufButtonedit.defaults, options);
			var buttonedit = new ufButtonedit($(this), setting);
			buttonedit.activate();
		});

	}
	$.fn.ufButtonedit.defaults = {
		autocomplete: 'off',
		placeholder: '',
		name: '',
		disabled: false,
		readonly: false,
		onBtnClick: function() {

		},
		onChange: function() {}
	};
	$.fn.ufButtonedit.Constructor = ufButtonedit;
})(jQuery);
(function($) {
	function ufTextarea(element, options) {
		this.bearer = element;
		if(this.bearer.find('.uf-textarea-border').length == 0) {
			this.options = options;
		} else {
			var opRem = $.data(this.bearer[0], 'options');
			this.options = $.extend({}, opRem, options);
			this.bearer.find('.uf-textarea-border').remove();
		}
		this.options['autocomplete'] = 'off'; //this.options['autocomplete'] || this.bearer.attr('autocomplete');
		this.options['placeholder'] = this.options['placeholder'] || this.bearer.attr('placeholder') || '';
		this.options['disabled'] = this.options['disabled'] || this.bearer.attr('disabled');
		this.options['name'] = this.options['name'] || this.bearer.attr('name');
		if(this.options['readonly'] === 'false' || this.options['readonly'] == false || !this.options['readonly']) {
			this.options['readOnly'] = '';
		} else {
			this.options['readOnly'] = 'readonly';
		}
		this.sender = {};
		$.data(this.bearer[0], 'options', this.options);
	}

	ufTextarea.prototype = {
		constructor: ufTextarea,
		setContent: function() {
			this.textarea = $('<div class="uf-textarea-border"><textarea name="' + this.options.name + '" class="uf-textarea-input inputedit" ' + this.options.readOnly + ' autocomplete="off" placeholder="' + this.options.placeholder + '" ></textarea><span title="" name="trigger" class="uf-textarea-button"><span class="uf-textarea-icon ">...</span></span></div>').appendTo(this.bearer).trigger('create');
			this.btn = this.textarea.find(".uf-textarea-button");
			if(this.options.disabled || this.options.disabled == 'true') {
				this.bearer.addClass('uf-textarea-disabled');
			}
		},

		setEvents: function() {
			var btnedit = this;
			this.btn.click(function(e) {
				e.preventDefault();
				btnedit.onBtnClick();
				e.stopPropagation();
			});
		},
		setDom: function() {
			var btnedit = this.textarea;
			this.sender = {
				setValue: function(val) {
					btnedit.find('.uf-textarea-input').val(val);
				},
				getValue: function() {
					return btnedit.find('.uf-textarea-input').val();
				}
			};
		},
		activate: function() {
			this.setContent();
			this.setDom();
			this.setEvents();
		},
		onBtnClick: function() {
			if(this.bearer.hasClass('uf-textarea-disabled')) {
				return false;
			}
			this.options.onBtnClick(this.bearer, this.sender);
		}
	}

	$.fn.ufTextarea = function(options) {

		this.each(function() {
			var setting = $.extend({}, $.fn.ufTextarea.defaults, options);
			var textarea = new ufTextarea($(this), setting);
			textarea.activate();
		});

	}
	$.fn.ufTextarea.defaults = {
		autocomplete: 'off',
		placeholder: '',
		name: '',
		disabled: false,
		readonly: false,
		onBtnClick: function() {

		},
		onChange: function() {}
	};
	$.fn.ufTextarea.Constructor = ufTextarea;
})(jQuery);
(function($) {
	"use strict";

	function ufCombox(element, options) {
		this.bearer = element;
		var id = this.bearer.attr('id');
		if(id == '' || id == undefined) {
			for(var i = 1; i < 10000; i++) {
				id = 'ufCombox' + i;
				if($('#' + id).length == 0) break;
			}
			this.bearer.attr('id', id);
		}
		if(this.bearer.find('.uf-combox-border').length == 0) {
			this.options = options;
		} else {
			var opRem = $.readCache(id).options;
			this.options = $.extend({}, opRem, options);
			this.bearer.off('click keydown keyup mouseenter mouseout');
			this.bearer.find('.uf-combox-border').remove();
		}

		this.options['id'] = id;
		this.options['url'] = this.options['url'] || this.bearer.attr('url');

		this.options['autocomplete'] = this.options['autocomplete'] || this.bearer.attr('autocomplete') || 'off';

		this.options['placeholder'] = this.options['placeholder'] || this.bearer.attr('placeholder') || '';

		this.options['disabled'] = this.options['disabled'] || this.bearer.attr('disabled');

		this.options['name'] = this.options['name'] || this.bearer.attr('name');
		this.options['idField'] = this.options['idField'] || this.bearer.attr('idField') || 'id';
		this.options['textField'] = this.options['textField'] || this.bearer.attr('textField') || 'name';
		this.options['onChange'] = this.options['onChange'] || this.bearer.attr('onChange');
		this.options['beforeExpand'] = this.options['beforeExpand'] || this.bearer.attr('beforeExpand');

		this.options['onComplete'] = this.options['onComplete'] || this.bearer.attr('onComplete');

		if(this.options['readonly'] == 'false' || !this.options['readonly']) {
			this.options['readOnly'] = '';
		} else {
			this.options['readOnly'] = 'readonly';
		}
		this.bearer.removeAttr('url');
		this.bearer.removeAttr('autocomplete');
		this.bearer.removeAttr('placeholder');
		this.bearer.removeAttr('disabled');
		this.bearer.removeAttr('readonly');
		this.options.data = this.options.data || [];
		this.options.onChange = this.options.onChange || function() {};
		this.options.beforeExpand = this.options.beforeExpand || function() {};
		var items = {
			'options': this.options
		};
		items.This = this;
		$.writeCache(this.options.id, items);
	}

	ufCombox.prototype = {
		constructor: ufCombox,
		setContent: function() {
			var This = this;
			if(this.options.theme != '' && this.options.theme != undefined) {
				this.bearer.addClass('uf-combox-' + this.options.theme);
			}
			var cbHtml = '<div class="uf-combox-border">';

			if(this.options.icon != '' && this.options.icon != undefined) {
				cbHtml += '<span class="icon-border"><span class="icon ' + this.options.icon + '" ></span></span>';
			}
			cbHtml += '<span class="uf-combox-inputLi"><input id="' + this.options.id + '_input" class="uf-combox-input inputedit" ' + this.options.readOnly + ' type="text" placeholder="' + this.options.placeholder + '" autocomplete="off" value=" "></span>';
			cbHtml += '<span class="uf-combox-clear icon-close"></span>';
			cbHtml += '<span id="' + this.options.id + '_btn" class="uf-combox-btn"><b></b></span>';
			cbHtml += '<input type="text" value="" id="' + this.options.id + '_value" class="uf-combox-value inputedit inputValue none" name="' + this.options.name + '">';
			cbHtml += '<input type="text" value="" id="' + this.options.id + '_text" class="uf-combox-text inputText none">';
			//cbHtml += '<div id="'+this.options.id+'_popup" class="uf-combox-popup"><ul class="uf-combox-list" id="'+this.options.id+'_list"></ul></div>';
			cbHtml += '</div>';
			this.combox = $(cbHtml).appendTo(this.bearer).trigger('create');
			//this.popup = this.combox.find('.uf-combox-popup');
			this.popup = $('#' + this.options.id + '_popup');
			if(this.popup.length > 0) {
				this.popup.remove();
			}
			$('<div id="' + this.options.id + '_popup" class="uf-combox-popup"><ul class="uf-combox-list" id="' + this.options.id + '_list"></ul></div>').appendTo('body');
			this.popup = $('#' + this.options.id + '_popup');
			if(this.options.theme != '' && this.options.theme != undefined) {
				this.popup.addClass('uf-combox-' + this.options.theme + '-popup');
			}
			this.list = this.popup.find('.uf-combox-list');
			this.inputLi = this.combox.find('.uf-combox-inputLi');
			this.input = this.combox.find('.uf-combox-input');
			this.inputVal = this.combox.find('.uf-combox-value');
			this.inputText = this.combox.find('.uf-combox-text');
			this.btn = this.combox.find('.uf-combox-btn');
			this.options.panelWidth = this.options.panelWidth || this.bearer.width();
			this.options.panelHeight = this.options.panelHeight || 160;
		},
		setPopupWidth: function() {
			var popupWidth = this.options.panelWidth || this.bearer.outerWidth(true);
			var posX = this.bearer.offset().left;
			var posY = this.bearer.offset().top + this.bearer.outerHeight(true);
			if(this.bearer.closest('.uf-datagrid').length > 0) {
				posX = posX - 1;
				posY = posY;
			}
			if(posX + popupWidth > $(window).outerWidth(true) - 16) {
				posX = posX - (popupWidth - this.bearer.outerWidth(true) + 2);
			}
			if(posY + this.popup.outerHeight(true) > $(window).height() - 50) {
				posY = this.bearer.offset().top - this.popup.height();
			}
			//guohx 修改当上下都不够弹出时，修改弹窗高度 20200621 银行对账单导入设置方案
			if (posY < 0) {
				this.popup.css({
					'min-width': popupWidth - 2 + 'px',
					'height': this.options.panelHeight + posY + 'px',
					'left': posX,
					'top': 0
				});
			} else {
				this.popup.css({
					'min-width': popupWidth - 2 + 'px',
					'height': this.options.panelHeight + 'px',
					'left': posX,
					'top': posY
				});
			}
			if(this.combox.width() > this.popup.width()) { //不知为什么有时差2
				this.popup.css('min-width', popupWidth + 'px');
			}
			/*			if(this.options.icon != '' && this.options.icon != undefined) {
							this.input.width(this.inputLi.width() - this.input.outerWidth(true) + this.input.width() - 20);
						}*/
		},
		setPopupItem: function(This) {
			This.clear();
			var $list = This.list;
			$list.html('');
			var listHtml = '';
			var items = $.readCache(This.options.id);
			for(var i = 0; i < This.options.data.length; i++) {
				var item = This.options.data[i];
				items[item[This.options.idField]] = item;
				listHtml += '<li class="uf-combox-list-item" option-value="' + item[This.options.idField] + '" option-text="' + item[This.options.textField] + '">' + item[This.options.textField] + (item.enabled == 0 ? '<span>(已停用)</span>' : '') + '</li>';
			}
			$.writeCache(This.options.id, items);
			$(listHtml).appendTo($list);
			This.onComplete(This.bearer, This.options.data);
		},
		clear: function() {
			this.input.val('');
			this.inputVal.val('');
			this.inputText.val('');
			this.input.removeAttr('title');
			var sltItem = this.popup.find('.uf-combox-list-item.selected');
			if(sltItem) {
				sltItem.removeClass('selected');
			}
		},
		showPopup: function() {
			var This = this;
			this.setPopupWidth();
			var $popup = this.popup;

			if($popup.attr('popup-lock') != 'true') {
				this.beforeExpand();
				this.bearer.addClass('uf-combox-show-popup');
				$popup.attr('popup-lock', 'true');
				var val = this.inputVal.val();
				$popup.find('.uf-combox-list-item.selected').removeClass('selected');
				$popup.find('.uf-combox-list-item[option-value="' + val + '"]').addClass('selected');
				this.btn.addClass('open');
				$popup.slideDown(200);

			}
		},
		hidePopup: function() {
			var $popup = this.popup;
			if($popup.attr('popup-lock') != 'true') {
				return false;
			}
			this.afterSelect();
			var This = this;
			$popup.attr('popup-lock', 'false');
			$popup.slideUp(200, function() {
				This.bearer.removeClass('uf-combox-show-popup');
			});
			this.btn.removeClass('open');
		},
		afterSelect: function() {
			var $popup = this.popup;
			if($popup.attr('popup-lock') != 'true') {
				return false;
			}

			var item = $popup.find('.uf-combox-list-item.selected');
			if(item.length > 0) {
				var items = $.readCache(this.options.id);
				var itemData = items[item.attr('option-value')];
				if(itemData[this.options.idField] == this.inputVal.val()) {
					return false;
				}
				this.inputVal.val(itemData[this.options.idField]);

				//this.input.val(itemData[this.options.textField]);
				if(itemData.enabled == '0') {
					this.input.val(itemData[this.options.textField] + '(已停用)');
				} else {
					this.input.removeClass('uf-red').val(itemData[this.options.textField]);
				}
				this.inputText.val(itemData[this.options.textField]);
				this.input.attr('title', itemData[this.options.textField]);
				this.onChange(itemData);
			} else {
				this.clear();
			}
			//this.hidePopup();
		},
		keyboardSelect: function(key) {
			var $popup = this.popup;
			var combox = this;
			var setting = this.options;

			function selectItem(item) {
				if(item.length > 0 && item.hasClass('uf-combox-list-item')) {
					$popup.find('.uf-combox-list-item.selected').removeClass('selected');
					item.addClass('selected');
				} else {
					return false;
				}
			}
			var item = $popup.find('.uf-combox-list-item.selected');

			if(item.length == 0 && (key == 40 || key == 38)) {
				item = $popup.find('.uf-combox-list-item:first-child');
				if(item.length > 0) {
					item.addClass('selected');
				}
				selectItem(item);
				return false;
			}

			function doSearch(bNext) {
				var $input = combox.input;
				var inputValue = $input.val();
				if(inputValue != '') {
					$input.attr('temValue', inputValue);
					var cacheId = setting.id + 'SearchIdx';
					var iSearch = uf.getCache(cacheId) || 0;
					if(bNext) {
						iSearch = parseInt(iSearch) + 1;
					}

					var items = $('#' + setting.id + '_popup').find('.uf-combox-list-item[option-value*="' + inputValue + '"],.uf-combox-list-item[option-text*="' + inputValue + '"]');
					if(items.length > 0) {
						if(iSearch >= items.length) iSearch = 0;
						uf.setCache(cacheId, iSearch);
						$('#' + setting.id + '_popup').find('.uf-combox-list-item.selected').removeClass('selected');
						$(items[iSearch]).addClass('selected');
					} else {
						uf.setCache(cacheId, 0);
						$('#' + setting.id + '_popup').find('.uf-combox-list-item.selected').removeClass('selected');
					}
					//$input.focus();
				}
			}

			switch(key) {
				case 40:
					item = item.next();
					selectItem(item);
					break;
				case 38:
					item = item.prev();
					selectItem(item);
					break;
				case 13:
					if(item.length > 0) {
						//combox.afterSelect();
						combox.hidePopup();
					}
					break;
				case 114:
					doSearch(true);
					break;
				default:
					var timeId = setTimeout(function() {
						doSearch(false);
						clearTimeout(timeId);
					}, 30);
					break;
			}
		},
		setEvents: function() {
			var setting = this.options;
			var This = this;
			$('#' + setting.id).on('click', function(e) {
				e.preventDefault();
				if(This.bearer.hasClass('uf-combox-disabled')) return false;
				if($(e.target).is('.uf-combox-clear')) {
					localStorage.removeItem("colSetVal");
					localStorage.removeItem("colSetHtml");
					This.clear();
					//修改点击下拉框“×”时，将相关联的下拉框内容一起清空
					//This.onChange();
					e.stopPropagation();
					return false;
				}
				var $input = This.input;
				//$input.focus();
				This.showPopup();
				//This.keyboardSelect();
				e.stopPropagation();
			});
			This.popup.off('click').on('click', '.uf-combox-list-item', function(e) {
				e.preventDefault();
				This.popup.find('.uf-combox-list-item.selected').removeClass('selected');
				$(this).addClass('selected');
				This.hidePopup();
				e.stopPropagation();
			});
			$('#' + setting.id ).on('click', ' .uf-combox-btn', function(e) {
				e.stopPropagation();
				if($(this).hasClass('open')){
					This.hidePopup();
				}else{
					This.showPopup();
				}
			})
			window.mosedownhandlerclick = false
			$('#' + setting.id + '_input').on('blur', function(e) {
				if(window.mosedownhandlerclick) {
					This.hidePopup();
				}
			});
			
			$('#' + setting.id + '_input').on('keydown', function(e) {
				//e.preventDefault();
				if(e.keyCode == 8) {
					var timeId = setTimeout(function() {
						if(This.input.val() == '') {
							This.clear();
							return false;
						}
					}, 300);

				}
			});
			$('#' + setting.id + '_input').on('keydown', function(e) {
				//e.preventDefault();
				if(This.bearer.hasClass('uf-combox-disabled')) return false;
				if(This.popup.attr('popup-lock') != 'true') {
					This.showPopup();
				} else {
					var key = e.keyCode;
					if(key == 114) {
						$.stopDefault(e);
					}
					This.keyboardSelect(key);
				}
			});
			this.bearer.on('mouseenter', function(e) {
				e.stopPropagation();
				$(this).addClass('hover');
			});
			this.bearer.on('mouseout', function(e) {
				e.stopPropagation();
				$(this).removeClass('hover');
			});

			$(document).on('mousedown mousewheel DOMMouseScroll', function(e) {
				var e = e || window.event;
				if($(e.target).closest('#' + This.options['id']).length === 0 && $(e.target).closest(This.popup).length === 0) {
					This.hidePopup();
				}
			});
		},
		activate: function() {
			var This = this;
			this.setContent();
			this.setPopupWidth();
			if(!$.isNull(This.options.url)) {
				$.ufajax(This.options.url, 'get', This.options.data, function(result) {
					if(!$.isNull(result.data)) {
						This.options.data = result.data;
						This.setPopupItem(This);
					} else {
						alert('错误的数据格式!');
					}
				});
			} else {
				This.setPopupItem(This);
			}
			this.setEvents();
		},
		onChange: function(itemData) {
			if(this.bearer.hasClass('uf-combox-disabled')) {
				return false;
			}
			this.options.onChange(this.bearer, itemData);
		},
		onComplete: function(sender) {
			var This = this;
			if(!$.isNull(this.options.onComplete)) {
				$.timeOutRun(null, null, function() {
					This.options.onComplete(This.bearer, This.options.data);
				}, 300);

			}
		},
		beforeExpand: function() { //不要有异步请求
			this.options.beforeExpand(this.bearer, this.options.data);
		}
	}

	$.fn.ufCombox = function(options) {

		this.each(function() {
			var setting = $.extend({}, $.fn.ufCombox.defaults, options);
			var combox = new ufCombox($(this), setting);
			combox.activate();
		});

	}
	$.fn.ufCombox.defaults = {
		autocomplete: 'off',
		//placeholder :'',
		//name        :'',
		//disabled    :false,
		//readonly: true,
		//idField     :'id',
		//textField   :'text',
		//onChange: function(itemData) {}
	};
	$.fn.ufCombox.Constructor = ufCombox;
})(jQuery);
(function($) {

	function ufTreecombox(element, options) {
		this.bearer = element;
		var id = this.bearer.attr('id');
		if(id == '' || id == undefined) {
			for(var i = 1; i < 10000; i++) {
				id = 'ufTreecombox' + i;
				if($('#' + id).length == 0) break;
			}
			this.bearer.attr('id', id);
		}

		if(this.bearer.find('.uf-combox-border').length == 0) {
			this.options = options;
		} else {
			var opRem = $.readCache(id).options;
			this.options = $.extend({}, opRem, options);
			this.bearer.off('click keydown keyup mouseenter mouseout');
			this.bearer.find('.uf-combox-border').remove();
		}

		this.options['id'] = id;
		this.options['url'] = this.options['url'] || this.bearer.attr('url');
		//guohx  20181012  修改权限问题 加URL后面的menuId和roleId
		var menuid = $.getUrlParam('menuid');
		if(!$.isNull(menuid) && (!$.isNull(this.options['url']))) {
			if(this.options['url'].indexOf('?') == -1) {
				this.options['url'] = this.options['url'] + '?menuId=' + menuid;
			} else {
				this.options['url'] = this.options['url'] + '&menuId=' + menuid;
			}
			var roleId = $.getUrlParam('roleId')
			if($.isNull(roleId)) {
				roleId = ufma.getCommonData().svRoleId
			}
			this.options['url'] = this.options['url'] + '&roleId=' + roleId;
		}
		//guohx  20181012  加tokenid
		var tokenid = ufma.getCommonData().token;
		if(tokenid == undefined) {
			tokenid = "";
		}
		//加入tokenid（判断url里有没有？）
		if(!$.isNull(this.options['url'])) {
			if(this.options['url'].indexOf("?") != -1) {
				this.options['url'] = this.options['url'] + "&ajax=1";
			} else {
				this.options['url'] = this.options['url'] + "?ajax=1";
			}
		}

		this.options['autocomplete'] = 'off';

		this.options['placeholder'] = this.options['placeholder'] || this.bearer.attr('placeholder') || '';
		this.options['disabled'] = this.options['disabled'] || this.bearer.attr('disabled');
		this.options['readonly'] = this.options['readonly'] || this.bearer.attr('readonly');
		this.options['name'] = this.options['name'] || this.bearer.attr('name');

		this.options['idField'] = this.options['idField'] || this.bearer.attr('idField') || 'id';
		this.options['pIdField'] = this.options['pIdField'] || this.bearer.attr('pIdField') || 'pId';
		this.options['textField'] = this.options['textField'] || this.bearer.attr('textField') || 'name';
		this.options['icon'] = this.options['icon'] || this.bearer.attr('icon');
		this.options['theme'] = this.options['theme'] || this.bearer.attr('theme') || 'combox';
		this.options['onChange'] = this.options['onChange'] || this.bearer.attr('onChange');
		this.options['beforeExpand'] = this.options['beforeExpand'] || this.bearer.attr('beforeExpand');
		this.options['leafRequire'] = this.options['leafRequire'] || this.bearer.attr('leafRequire');
		this.options['onComplete'] = this.options['onComplete'] || this.bearer.attr('onComplete');
		if(this.options['readonly'] === 'false' || this.options['readonly'] == false || !this.options['readonly']) {
			this.options['readOnly'] = '';
		} else {
			this.options['readOnly'] = 'readonly';
		}
		this.bearer.removeAttr('url');
		this.bearer.removeAttr('autocomplete');
		this.bearer.removeAttr('placeholder');
		this.bearer.removeAttr('disabled');
		this.bearer.removeAttr('readonly');
		this.options.data = this.options.data || [];
		this.options.onChange = this.options.onChange || function() {};
		this.options.beforeExpand = this.options.beforeExpand || function() {};
		var items = {
			'options': this.options
		};
		items.This = this;
		$.writeCache(this.options.id, items);
		$.data($(this.bearer)[0], 'options', items);
	}

	ufTreecombox.prototype = {
		constructor: ufTreecombox,
		setContent: function() {
			this.bearer.addClass('uf-combox');
			//this.bearer.addClass('uf-treecombox');
			if(this.options.theme != '' && this.options.theme != undefined) {
				this.bearer.addClass('uf-combox-' + this.options.theme);
			}
			var cbHtml = '<div class="uf-combox-border">';
			var leftMargin = '0';
			if(this.options.icon != '' && this.options.icon != undefined) {
				cbHtml += '<span class="icon-border"><span class="icon ' + this.options.icon + '"></span></span>';
				leftMargin = '18px';
			}
			cbHtml += '<span class="uf-combox-inputLi"><input id="' + this.options.id + '_input" class="uf-combox-input inputedit" ' + this.options.readOnly + ' type="text" placeholder="' + this.options.placeholder + '" autocomplete="off"></span>';
			cbHtml += '<span class="uf-combox-clear icon-close"></span>';
			cbHtml += '<span id="' + this.options.id + '_btn" class="uf-combox-btn"><b></b></span>';
			cbHtml += '<input type="hidden" value="" id="' + this.options.id + '_value" class="uf-combox-value inputedit inputValue" name="' + this.options.name + '">';
			cbHtml += '<input type="hidden" value="" id="' + this.options.id + '_text" class="uf-combox-text inputText">';
			//cbHtml += '<div id="'+this.options.id+'_popup" class="uf-combox-popup"><ul class="uf-treecombox-tree ztree ufmaTree" id="'+this.options.id+'_tree"></ul></div>';
			cbHtml += '</div>';
			this.combox = $(cbHtml).appendTo(this.bearer).trigger('create');
			//this.popup = this.combox.find('.uf-combox-popup');
			$('<div id="' + this.options.id + '_popup" class="uf-combox-popup"><ul class="uf-treecombox-tree ztree ufmaTree" id="' + this.options.id + '_tree"></ul></div>').appendTo('body');
			this.popup = $('#' + this.options.id + '_popup');
			if(this.popup.length > 0) {
				this.popup.remove();
			}
			$('<div id="' + this.options.id + '_popup" class="uf-combox-popup"><ul class="uf-treecombox-tree ztree ufmaTree" id="' + this.options.id + '_tree"></ul></div>').appendTo('body');
			this.popup = $('#' + this.options.id + '_popup');

			if(this.options.theme != '' && this.options.theme != undefined) {
				this.popup.addClass('uf-combox-' + this.options.theme + '-popup');
			}
			this.tree = this.popup.find('.uf-treecombox-tree');
			this.inputLi = this.combox.find('.uf-combox-inputLi');
			this.input = this.combox.find('.uf-combox-input');
			this.inputVal = this.combox.find('.uf-combox-value');
			this.inputText = this.combox.find('.uf-combox-text');
			this.btn = this.combox.find('.uf-combox-btn');
		},
		setPopupWidth: function() {
			//var popupWidth = this.bearer.width();
			var popupWidth = this.popup.width() < this.bearer.width() ? this.bearer.width() : this.popup.width();
			var posX = this.bearer.offset().left;
			var posY = this.bearer.offset().top + this.bearer.outerHeight(true);
			if(this.bearer.closest('.uf-datagrid').length > 0) {
				posX = posX - 1;
				posY = posY;
			}
			if(posX + popupWidth > $(window).outerWidth(true) - 16) {
				posX = posX - (popupWidth - this.bearer.outerWidth(true) + 2);
			}
			if(posY + this.popup.outerHeight(true) > $(window).height() - 50) {
				posY = this.bearer.offset().top - this.popup.height();
			}
			var maxWidth = $(window).width() - posX - 20;
			this.popup.css({
				'min-width': popupWidth + 'px',
				'max-width': maxWidth + 'px',
				'left': posX,
				'top': posY
			});
			if(this.combox.width() > this.popup.width()) { //不知为什么有时差2
				this.popup.css('min-width', popupWidth + 'px');
			}
			if(this.options.icon != '' && this.options.icon != undefined) {
				this.input.width(this.inputLi.width() - this.input.outerWidth(true) + this.input.width() - 20);
			}
		},
		setPopupItem: function(This) {

			This.clear();
			//var combox = this;

			var treeSetting = {
				async: {
					enable: This.options.async,
					type: 'get',
					dataType: 'json', //返回的数据格式：json/xml/html/script/jsonp/text
					contentType: 'application/json; charset=utf-8',
					//url:this.options.url||null
				},
				view: {
					showLine: false,
					showIcon: false,
					addDiyDom: addDiyDom
				},
				check: {
					enable: false
				},

				data: {
					simpleData: {
						enable: true,
						idKey: This.options.idField,
						pIdKey: This.options.pIdField,
						rootPId: 0
					},

					key: {
						name: This.options.textField,
					},

					keep: {
						leaf: true
					}
				},
				callback: {

					/*onAsyncError: function(event, treeId, treeNode, XMLHttpRequest, textStatus, errorThrown) {
						alert(XMLHttpRequest);
					},*/
					beforeClick: function(treeId, treeNode, clickFlag) {
						if(This.options.beforeSelect) {
							return This.options.beforeSelect(treeNode);
						}
						return true;
					},
					onClick: function(event, treeId, treeNode) {
						event.stopPropagation();
						if(This.options.leafRequire && treeNode.isParent) {
							var oneTree = $.fn.zTree.getZTreeObj(treeId);
							oneTree.cancelSelectedNode(treeNode);
							return false;
						}
						This.keyboardSelect(13);
					},
					onAsyncSuccess: function() {
						This.onComplete(This.bearer);
					}
				}
			};
			//guohx 20200207 增加已停用标识
			function addDiyDom(treeId, treeNode) {
				var spaceWidth = 5;
				var switchObj = $("#" + treeNode.tId + "_span"),
					icoObj = $("#" + treeNode.tId + "_ico");
				switchObj.remove();
				icoObj.after(switchObj);
				if(treeNode.enabled == '0') {
					var spaceStr = '<span class="uf-red">(已停用)</span>';
					switchObj.after(spaceStr);
				}
			}
			This.treeObj = $.fn.zTree.init(This.tree, treeSetting, This.options.data);
			if(!This.options.async) {
				This.onComplete(This.bearer);
			}
			This.treeObj.expandAll(true);
		},
		clear: function() {
			this.input.val('');
			this.inputVal.val('');
			this.inputText.val('');
			this.input.removeAttr('title');
			if(this.treeObj) {
				this.treeObj.checkAllNodes(false);
				this.treeObj.cancelSelectedNode(false);
			}
		},
		showPopup: function() {
			this.setPopupWidth();
			var $popup = this.popup;
			if($popup.attr('popup-lock') != 'true') {
				this.beforeExpand();
				this.bearer.addClass('uf-combox-show-popup');
				$popup.attr('popup-lock', 'true');
				var val = this.inputVal.val();

				var node = this.treeObj.getNodeByParam(this.options.idField, val, null);
				if(!$.isNull(node)) {
					this.treeObj.selectNode(node);
				} else {
					this.keyboardSelect();
				}
				this.btn.addClass('open');
				$popup.slideDown(200, function() {

				});
			}
		},
		hidePopup: function() {

			var $popup = this.popup;
			if($popup.attr('popup-lock') != 'true') {
				return false;
			}
			this.afterSelect();
			var This = this;
			$popup.attr('popup-lock', 'false');
			$popup.slideUp(200, function() {

				This.hidePopup();
				This.bearer.removeClass('uf-combox-show-popup');
			});
			this.btn.removeClass('open');
		},
		afterSelect: function() {
			$popup = this.popup;
			if($popup.attr('popup-lock') != 'true') {
				return false;
			}

			var nodes = this.treeObj.getSelectedNodes();
			if(nodes.length > 0) {
				var node = nodes[0];
				if(node[this.options.idField] == this.inputVal.val()) {
					return false;
				}
				this.treeObj.selectNode(node);
				this.inputVal.val(node[this.options.idField]);
				// guohx 20200207 修改已停用数据选中后效果变红
				if(node.enabled == '0') {
					this.input.addClass('uf-red').val(node[this.options.textField] + '(已停用)');
				} else {
					this.input.removeClass('uf-red').val(node[this.options.textField]);
				}
				this.inputText.val(node[this.options.textField]);
				this.input.attr('title', node[this.options.textField]);
				this.onChange(node);
			} else {
				this.clear();
			}
			//this.hidePopup();
		},
		keyboardSelect: function(key) {
			var $popup = this.popup;
			var combox = this;
			var setting = this.options;

			function selectNode(node) {
				if(!$.isNull(node)) {
					node = combox.treeObj.selectNode(node);
				}
				combox.input.focus();
				return node;
			}
			var nodes = combox.treeObj.getSelectedNodes(),
				node;
			if(nodes.length == 0 && (key == 40 || key == 37 || key == 38 || key == 39)) {
				var nodes = combox.treeObj.getNodes();
				if(nodes.length > 0) {
					node = combox.treeObj.selectNode(nodes[0]);
					combox.input.focus();
				}
				node = selectNode(node);
				return false;
			} else {
				node = nodes[0];
			}

			function doSearch(bNext) {
				if($(this).hasClass('uf-combox-disabled')) return false;

				var $input = combox.input;
				var inputValue = $input.val();
				if(inputValue != '') {
					$(this).attr('temValue', inputValue);
					var cacheId = setting.id + 'SearchIdx';
					var iSearch = uf.getCache(cacheId) || 0;
					if(bNext) {
						iSearch = parseInt(iSearch) + 1;
					}
					//检索树
					function filter(node) {
						return(node[setting.idField].indexOf(inputValue) > -1 || node[setting.textField].indexOf(inputValue) > -1);
					}
					var nodes = combox.treeObj.getNodesByFilter(filter, false);

					if(nodes.length > 0) {
						if(iSearch >= nodes.length) iSearch = 0;
						uf.setCache(cacheId, iSearch);
						combox.treeObj.selectNode(nodes[iSearch]);
					} else {
						uf.setCache(cacheId, 0);
						var nodes = combox.treeObj.getSelectedNodes();
						if(nodes.length > 0) {
							combox.treeObj.cancelSelectedNode(nodes[0]);
						}
					}
					$input.focus();
				}
			}

			switch(key) {
				case 40:
					node = node.getNextNode();
					node = selectNode(node);

					break;
				case 37:

					var tmpNode = node.getParentNode();
					node = selectNode(tmpNode);
					break;
				case 38:
					var tmpNode = node.getPreNode();
					node = selectNode(tmpNode);
					break;
				case 39:
					if(node.children != null && node.children != undefined) {
						node = node.children[0];
						node = selectNode(node);
					}
					break;
				case 13:
					if(!$.isNull(node)) {
						if(setting.beforeSelect) {
							if(!setting.beforeSelect(node)) {
								return false;
							};
						}
						if(setting.leafRequire && node.isParent) return false;
						//combox.treeObj.checkNode(node,!node.checked,true);
						//combox.afterSelect();
						combox.hidePopup();
					}
					break;
				case 114:
					doSearch(true);
					break;
				default:
					var timeId = setTimeout(function() {
						doSearch(false);
						clearTimeout(timeId);
					}, 30);
					break;
			}
		},
		setEvents: function() {
			var setting = this.options;
			var combox = this;
			var keyhide = true
			$('#' + setting.id).on('click', function(e) {
				e.preventDefault();
				if($(this).hasClass('uf-combox-disabled')) return false;
				if($(e.target).is('.uf-combox-clear')) {
					combox.clear();
					//修改点击下拉框“×”时，将相关联的下拉框内容一起清空
					//combox.onChange();
					e.stopPropagation();
					return false;
				}
				var $input = combox.input;
				if($input.attr('readonly')) {
					// $input.blur()
				} else {
					$input.focus().select();
				}

				combox.showPopup();
				// combox.keyboardSelect();
				e.stopPropagation();
			});
			$('#' + setting.id + '_input').on('keydown', function(e) {
				if(e.keyCode == 8) {
					var timeId = setTimeout(function() {
						if(combox.input.val() == '') {
							combox.clear();
							return false;
						}
					}, 300);

				}
			});
			//增加下拉树鼠标事件,获取鼠标位置不在下拉树上时自动收起 guohx 20190905
			window.treecomboxBlur = true;
			window.mosedownhandlerclick = false
			
			$('#' + setting.id ).on('click', ' .uf-combox-btn', function(e) {
				e.stopPropagation();
				if($(this).hasClass('open')){
					combox.hidePopup();
				}else{
					combox.showPopup();
				}
			})
			// $('#' + setting.id + '_tree').on('mouseover', function (e) {
			// 	window.treecomboxBlur = false;
			// });
			// $('#' + setting.id + '_tree').on('mouseout', function (e) {
			// 	window.treecomboxBlur = true;
			// });
			$('#' + setting.id + '_input').on('blur', function(e) {
				//e.preventDefault();
				// if (window.treecomboxBlur) {
				// 	setTimeout(function () {
				// 		combox.hidePopup();
				// 	}, 200)
				// }
				if(window.mosedownhandlerclick) {
					combox.hidePopup();
				}
			});
			$('#' + setting.id + '_input').on('keydown', function(e) {
				if(combox.bearer.hasClass('uf-combox-disabled')) return false;
				if(combox.popup.attr('popup-lock') != 'true') {
					combox.showPopup();
				} else {
					var key = e.keyCode;
					if(key == 114) {
						$.stopDefault(e);
					}
					combox.keyboardSelect(key);
				}
			});

			this.bearer.on('mouseenter', function(e) {
				e.stopPropagation();
				$(this).addClass('hover');
			});
			this.bearer.on('mouseout', function(e) {
				e.stopPropagation();
				$(this).removeClass('hover');
			});
			$(document).on('mousedown mousewheel DOMMouseScroll', function(e) {
				var e = e || window.event;
				if($(e.target).closest('#' + combox.options['id']).length == 0 && $(e.target).closest('#' + combox.options['id'] + '_popup').length == 0) {
					combox.hidePopup();
				}
			});
		},
		activate: function() {
			var This = this;
			this.setContent();
			this.setPopupWidth();
			if(!$.isNull(This.options.url)) {
				$.ufajax(This.options.url, 'get', This.options.data, function(result) {
					if(!$.isNull(result.data)) {
						This.options.data = result.data;
						This.setPopupItem(This);
					} else {
						alert('错误的数据格式!');
					}
				});
			} else {
				This.setPopupItem(This);
			}
			this.setEvents();
		},
		onChange: function(treeNode) {
			this.options.onChange(this.bearer, treeNode);
		},
		onComplete: function(sender) {
			var This = this;
			if(!$.isNull(this.options.onComplete)) {
				$.timeOutRun(null, null, function() {
					This.options.onComplete(This.bearer);
				}, 300);

			}
		},
		beforeExpand: function() {
			this.options.beforeExpand(this.bearer, this.options.data);
		}
	}

	$.fn.ufTreecombox = function(options) {

		this.each(function() {
			var setting = $.extend({}, $.fn.ufTreecombox.defaults, options);
			var combox = new ufTreecombox($(this), setting);
			combox.activate();
		});

	}
	$.fn.ufTreecombox.defaults = {
		autocomplete: 'off',
		//placeholder :'',
		//name        :'',
		//disabled    :false,
		readonly: true,
		//idField     :'id',
		//textField   :'text',
		onChange: function(itemData) {}
	};
	$.fn.ufTreecombox.Constructor = ufTreecombox;
})(jQuery);
(function($) {
	function ufDatagrid(element, options) {
		this.bearer = element;
		this.options = options;
		var id = this.bearer.attr('id');
		if(id == '' || id == undefined) {
			for(var i = 1; i < 10000; i++) {
				id = 'ufDatagrid' + i;
				if($('#' + id).length == 0) break;
			}
			this.bearer.attr('id', id);
		}
		if(this.bearer.find('.uf-grid-viewport').length == 0) {
			this.options = options;
		} else {
			var opRem = $.data(this.bearer[0], 'options');
			this.options = $.extend({}, opRem, options);
			this.bearer.off('click keydown keyup mouseenter mouseout');
			this.bearer.find('.uf-grid-viewport').remove();
		}
		this.options['id'] = id;
		this.sender = {};
		this.colNames;
		this.colInfo;
		this.index = 0;
		if(this.options.disabled || this.options.disabled == true || this.options.disabled == 'true') {
			this.bearer.addClass('uf-datagrid-disabled');
		}
		if(!this.options.hasOwnProperty('lock')) {
			this.options['lock'] = {
				'class': 'bgc-gray2',
				filter: function(rowdata) {
					return false;
				}
			}
		}
		this.fixedRow = '', this.locked = this.options.frozenEndColumn != 0, this.fixedDirectory = 'left';
		if(this.options.frozenEndColumn < 0) {
			this.fixedDirectory = 'right';
		}
		this.columns = [];
		this.editColumns = [];
		this.prevRow = {};
		this.mergeTr = null;
		this.rowNum = 0;

		this.items = {};
		this.items.This = this;
		$.data(this.bearer[0], 'options', this.options);
	}

	ufDatagrid.prototype = {
		constructor: ufDatagrid,
		getNewId: function() {
			var newId = '';
			for(var i = 1; i < 10000; i++) {
				newId = this.options['id'] + '_row_' + i;
				if($('#' + newId).length == 0) break;
			}
			return newId;
		},
		scrollbarWidth: function() {
			var $inner = jQuery('<div style="width: 100%; height:200px;">test</div>'),
				$outer = jQuery('<div style="width:200px;height:150px; position: absolute; top: 0; left: 0; visibility: hidden; overflow:hidden;"></div>').append($inner),
				inner = $inner[0],
				outer = $outer[0];
			jQuery('body').append(outer);
			var width1 = inner.offsetWidth;
			$outer.css('overflow', 'scroll');
			var width2 = outer.clientWidth;
			$outer.remove();
			return width1 - width2;
		},
		setViewport: function() {

			this.viewport = $('<div class="uf-grid-viewport"></div>').appendTo(this.bearer);
			this.gridHead = $('<div id="' + this.options['id'] + 'Head" class="uf-grid-head"></div>').appendTo(this.viewport);
			if(this.options.columns.length > 1) {
				this.gridHead.addClass('uf-grid-head-mult');
			}
			this.gridHeadLock = $('<div class="uf-grid-head-lock"></div>').appendTo(this.gridHead);
			this.gridHeadView = $('<div class="uf-grid-head-view"></div>').appendTo(this.gridHead);
			this.gridBody = $('<div id="' + this.options['id'] + 'Body" class="uf-grid-body"></div>').appendTo(this.viewport);
			this.gridBodyLock = $('<div class="uf-grid-body-lock"></div>').appendTo(this.gridBody);
			this.gridBodyLockCnt = $('<div class="uf-grid-body-lock-content"></div>').appendTo(this.gridBodyLock);
			this.gridBodyView = $('<div class="uf-grid-body-view"></div>').appendTo(this.gridBody);
			var locktable = '<table class="uf-grid-table" cellspacing="0" cellpadding="0" border="0" style="width: 0px;"><tbody></tbody></table>';
			this.headTableLock = $(locktable).appendTo(this.gridHeadLock);
			this.bodyTableLock = $(locktable).appendTo(this.gridBodyLockCnt);
			this.gridFooter = $('<div id="' + this.options['id'] + 'Foot" class="uf-grid-foot"></div>').appendTo(this.viewport);
			if(!this.options.paginate && $.isNull(this.options.toolbar)) {
				this.gridFooter.css('display', 'none');
			}
			this.toolbar = $('<div class="uf-grid-tool"></div>').appendTo(this.gridFooter);
		},
		getHeadColumns: function() {
			var This = this;
			var rowCount = this.options.columns.length;
			var rows = [];
			for(var i = 0; i < rowCount; i++) {
				rows[i] = new Array();
			}

			for(var irow = 0; irow < rowCount; irow++) {
				var row = this.options.columns[irow];
				$.each(row, function(icol, col) {
					var iColspan = 1;
					if(col.hasOwnProperty('colspan')) {
						iColspan = col.colspan;
					}
					if(col['type'] == 'indexcolumn') {
						col.field = 'indexcolumn';
					}
					if(col['type'] == 'checkbox') {
						col.field = 'checkbox';
					}
					if(col.hasOwnProperty('type') && col['type'] != 'indexcolumn' && col['type'] != 'toolbar') {
						This.editColumns.push(col);
					}
					var colField = col['field'];

					//if(colField != ''){
					for(var j = irow; j < rowCount; j++) {
						if(irow == 0) {
							rows[j].push(colField);
							for(var k = 1; k < iColspan; k++) {
								rows[j].push('');
							}
						} else {
							for(var m = 0; m < rows[j].length; m++) {
								if(rows[j][m] == '') {
									rows[j][m] = colField;
									break;
								}
							}
						}
					}
					//}
				});
			}
			return rows;
		},
		setThead: function() {
	  var This = this;
	  //修改由于引用jquery版本改到高版本，表格不会自动创建tbody标签，故添加 guohx  20200722
      // var thead = '<table class="uf-grid-table" border="0" cellspacing="0" cellpadding="0" style="width: 100%;"></table>';
       //CWYXM-18308 --指标调整,新增的调整单据,再次打开横向滚动条滚动到最右侧,界面显示错乱了--zsj--20200727--由于添加了<tbody></tbody>所以tr追加时只能从第一列添加，导致多表头错乱
      var thead = '<table class="uf-grid-table" border="0" cellspacing="0" cellpadding="0" style="width: 100%;"><tbody></tbody></table>';
			this.headTableView = $(thead).appendTo(this.gridHeadView).trigger('create');
			var columns = This.getHeadColumns();
			var colInfo = [];
			for(var irow = 0; irow < this.options.columns.length; irow++) {
				var column = columns[irow];
        var row = this.options.columns[irow];
        var tr = '<tr>';
				var iCol = 0,
					idPrev = this.options.id + '$headerCell' + (irow + 1) + '$';
				$.each(row, function(icol, col) {
					iCol = iCol + 1;
					var iRowspan = 1;
					if(col.hasOwnProperty('rowspan')) {
						iRowspan = col.rowspan;
					}
					var rowspan = '';
					if(iRowspan > 1) rowspan = ' rowspan=' + iRowspan;

					var iColspan = 1;
					if(col.hasOwnProperty('colspan')) {
						iColspan = col.colspan;
					}
					var colspan = '';
					if(iColspan > 1) colspan = ' colspan=' + iColspan;

					var headalign = '';
					if(col.hasOwnProperty('headalign')) {
						headalign = 'text-align:' + col.headalign + ';';
					}
					var colType = col['type'];

					if(colType == 'indexcolumn') {
						col.field = 'indexcolumn';
					} else if(colType == 'checkbox') {
						col.field = 'checkbox';
						col.name = '<label class="mt-checkbox mt-checkbox-outline"><input type="checkbox" class="check-all" index=' + icol + ' value="1"><span></span></label>';
					}

					var width = '100px';
					if(col.hasOwnProperty('width')) {
						width = col.width + 'px;';
					} else {
						col.width = '100';
					}

					if(colType == 'checkbox' || colType == 'radio') {
						width = '48px';
						col.width = '48';
					}

					var index = column.indexOf(col.field);
					if(index > -1) {
						colInfo[index] = col;
						iCol = index + 1;
					}

					var lastCell = '';
					if(iCol >= column.length || iCol + iColspan - 1 == column.length) lastCell = 'last-cell';

					tr += '<td id="' + idPrev + iCol + '" class="uf-grid-headerCell ' + lastCell + ' ' + col.className + '" name="' + col.field + '" ' + colspan + rowspan + ' style="' + headalign + '">' + col.name + '</td>';

					if(iColspan > 1) iCol = iCol + iColspan;
				});
       			 tr += '</tr>';
				$(tr).appendTo(this.headTableView);
			};

			var fixedRow = '<tr class="fixed-row" style="height:1px;">';
			for(var i = 0; i < colInfo.length; i++) {
				var col = colInfo[i];
				var width = col['width'] || 100;
				fixedRow += '<td id=' + (i + 1) + ' style = "padding:0;border:0;margin:0;height:0px;width:' + width + 'px"></td>';
			}
			fixedRow += '</tr>';
			this.fixedRow = fixedRow;
			this.headTableView.prepend(this.fixedRow);
			this.colInfo = colInfo;
			/*if(This.locked) {
				This.lockHeadColumn();
			}*/
			//This.setLock();
		},
		setLockColumnNum: function() {
			if(this.options.frozenEndColumn < 0) {
				this.options.frozenEndColumn = this.colInfo.length + this.options.frozenEndColumn + 1;
			}
			if(this.options.frozenStartColumn < 0) {
				this.options.frozenStartColumn = this.colInfo.length + this.options.frozenStartColumn + 1;
			};

			if(this.options.frozenEndColumn < this.options.frozenStartColumn) {
				var temNum = this.options.frozenEndColumn;
				this.options.frozenEndColumn = this.options.frozenStartColumn;
				this.options.frozenStartColumn = temNum;
			}
		},
		setBodyHeight: function(This) {
			var gridBodyH = This.bodyHeight - This.gridHead.outerHeight(true);
			if(This.options.paginate || !$.isNull(This.options.toolbar)) {
				gridBodyH = gridBodyH - This.gridFooter.outerHeight(true);
			}
			if(gridBodyH > 10) {
				This.gridBody.css({
					'height': gridBodyH + 'px'
				});
			}

			This.setLock();
		},
		lockHeadColumn: function() {
			var This = this;
			var trHeight = 0;
			this.headTableView.find('tr').each(function(irow) {
				var lockedTr = $('<tr></tr>').appendTo(This.headTableLock);
				var tmpTd = $('<td style="padding:0;border:0;margin:0;height:0px;width:0px"></td>').appendTo(lockedTr);
				for(var icol = This.options.frozenStartColumn; icol <= This.options.frozenEndColumn; icol++) {
					var column = $(this).find('td[id="' + icol + '"]').appendTo(lockedTr);
					if(column.length > 0) {
						column.appendTo(lockedTr);
					}

					column = $(this).find('td[id$="headerCell' + irow + '$' + icol + '"]');
					if(column.length > 0) {
						column.appendTo(lockedTr);
						trHeight = column.height();
					}
					tmpTd.height(trHeight);
				}
			});

			var lockWidth = This.headTableLock.width();
			var viewWidth = This.bearer.width() - lockWidth;
			var headViewWidth = viewWidth;
			if(This.hasVScrollbar(This)) {
				headViewWidth = headViewWidth - This.scw;
			}
			This.gridHeadView.css({
				'margin-left': lockWidth + 'px',
				'width': headViewWidth + 'px'
			});
			This.gridHeadLock.css({
				'left': '0px',
				'width': lockWidth + 'px'
			});
			This.gridBodyView.css({
				'margin-left': lockWidth + 'px',
				'width': viewWidth + 'px'
			});
			This.gridBodyLock.css({
				'left': '0px',
				'width': lockWidth + 'px',
				'height': '100%'
			});
		},
		lockBodyColumn: function(This, tr) {
			var lockedTr = $('<tr id="' + $(tr).attr('id') + '"></tr>').appendTo(This.bodyTableLock);
			lockedTr.addClass($(tr).attr('class'));
			lockedTr.attr('style', $(tr).attr('style'));
			var tmpTd = $('<td class="uf-grid-cell" style="padding:0;border:0;margin:0;height:0px;width:0px"></td>').appendTo(lockedTr);
			for(var icol = This.options.frozenStartColumn; icol <= This.options.frozenEndColumn; icol++) {
				var column = $(tr).find('td[id="' + icol + '"]');
				if(column.length > 0) {
					column.appendTo(lockedTr);
				} else {
					column = $(tr).find('td[id$="cell$' + icol + '"]');
					if(column.length > 0) {
						column.appendTo(lockedTr);
						trHeight = column.height();
					}
					tmpTd.height(30);
				}
			}
		},
		lockBodyColumns: function(This) {
			var trHeight = 0;
			This.bodyTableLock.html('');
			This.bodyTableView.find('tr').each(function(irow) {
				This.lockBodyColumn(This, $(this));
			});
			This.setLock();
		},
		setLock: function(This) { //如果设置高度，容器应该设置为display:hidden,如body
			This = This || this;
			if(This.locked) {
				var lockWidth = This.bodyTableLock.width();
				var viewWidth = This.bearer.width() - lockWidth;
				var headViewWidth = viewWidth;
				if(This.hasVScrollbar(This)) {
					headViewWidth = headViewWidth - This.scw;
				}
				This.gridBodyView.css({
					'margin-left': lockWidth + 'px',
					'width': viewWidth + 'px'
				});
				This.gridBodyLock.css({
					'left': '0px',
					'width': lockWidth + 'px',
					'height': '100%'
				});
				This.gridHeadView.css({
					'margin-left': lockWidth + 'px',
					'width': headViewWidth + 'px'
				});
				This.gridHeadLock.css({
					'left': '0px',
					'width': lockWidth + 'px'
				});
			} else {
				This.gridBodyLock.css({
					'left': '-10px',
					'width': '0px'
				});
				This.gridHeadLock.css({
					'left': '-10px',
					'width': '0px'
				});
				This.gridHeadView.css({
					'margin-left': '0px',
					'width': 'auto'
				});
			}
			if(This.gridBodyView.find('tr[id^=' + This.options['id'] + '_row]').length == 0) {
				This.viewport.find('input.check-all').prop('checked', false);
			}
		},
		hasVScrollbar: function(This) {
			var obj = This.gridBodyView[0];
			if(obj.scrollHeight > obj.clientHeight) {
				return true;
			} else {
				return false;
			};
		},
		showRowById: function(This, tr) {
			var posTop = 0;
			var posIndex = $(tr).index();
			This.bodyTableView.find('tr').each(function(idx, row) {
				if(idx >= posIndex) {
					return false;
				}
				posTop = posTop + $(this).outerHeight(true);
			});
			var sc = This.gridBodyView.scrollTop();
			if(sc + This.gridBodyView.height() < posTop + $(tr).outerHeight(true)) {
				This.gridBodyView.scrollTop(posTop - This.gridBodyView.height() + This.gridBodyView.height() / 2);
			} else if(sc > posTop) {
				This.gridBodyView.scrollTop(posTop);
			}
		},
		addRow: function(This, row) {
			$('tr[id=' + This.options['id'] + '_row_nodatarow' + ']').remove();
			This.rowNum = This.rowNum + 1;
			This.index = This.index + 1;
			var rowid = This.getNewId();
			var idField = This.options['idField'];
			if(idField != undefined && idField != 'undefined' && row != null && row != undefined) {
				if(!$.isNull(row[idField])) {
					rowid = This.options['id'] + '_row_' + row[idField];
				}
			};
			var mergeColumns = This.options['mergeColumns'] || function(rowid, rowdata) {
				return []
			};
			var merges = mergeColumns(rowid, row);
			var mergeRows = This.options['mergeRows'] || function(prevRow, rowdata) {
				return []
			};

			var mrows = mergeRows(This.prevRow, row);
			//row = row || {};
			This.items[rowid] = row;
			var pid = row[This.options['pId']];
			if($.isNull(pid)) pid = rowid;
			var tr = '<tr id="' + rowid + '" pid="' + pid + '">';

			for(var icol = 0; icol < This.colInfo.length; icol++) {
				var col = This.colInfo[icol];

				var colText = '';
				var colField = col['field'];
				var colType = col['type'];
				if(colField == 'indexcolumn') {
					colText = This.index;
				} else if(colField == 'checkbox') {
					colText = '<label class="mt-checkbox mt-checkbox-outline"><input data-id="' + row[idField] + '" rowid="' + rowid + '" pid="' + pid + '" class="check-item" index=' + icol + ' type="checkbox" value="1"><span></span></label>';
				} else if(colType == 'radio') {
					colText = '<label class="mt-radio mt-checkbox-outline"><input name="' + This.options.id + '_radio" data-id="' + row[idField] + '" rowid="' + rowid + '" pid="' + pid + '" class="check-item" index=' + icol + ' type="radio" value="1"><span></span></label>';
				} else if(col['type'] == 'switch') {
					var checked = '';
					if(row[colField] == '1') {
						checked = ' checked';
					}
					colText = '<label class="mt-checkbox mt-checkbox-outline"><input type="checkbox" ' + checked + '><span></span></label>';
				} else if(colType == 'textarea') {
					colText = row[colField];
				} else {
					colText = row[colField];
				}

				var align = '';
				if(col.hasOwnProperty('align')) {
					align = 'text-align:' + col.align + ';';
				}
				var sclass = col['className'] || '';

				var render = col['render'] || function(rowid, rowdata, text,colField) { // 优化可编辑表格，传给主界面当前下拉框的code，避免循环处理数据--zsj--2020-08-10 14:37
					return text;
				}
				colText = render(rowid, row, colText,colField);// 优化可编辑表格，传给主界面当前下拉框的code，避免循环处理数据--zsj--2020-08-10 14:37
				if(colText == undefined || colText == 'undefined') colText = '';

				var tdid = This.rowNum + '$cell$' + (icol + 1);
				var colspan = '';
				var mergeTdClass = '';
				for(var iMerge = 0; iMerge < merges.length; iMerge++) {
					var merge = merges[iMerge];

					if(merge['columnIndex'] == icol) {
						var iColSpan = merge['colSpan'];
						if(icol + iColSpan > This.colInfo.length) iColSpan = This.colInfo.length - icol;
						colspan = ' colspan=' + iColSpan;
						mergeTdClass = merge['className'] || '';
						if(!$.isNull(merge['text'])) {
							colText = merge['text'];
						}
						icol = icol + iColSpan - 1;
						break;
					}
				}

				var tdtypeClass = col['type'] || '';
				var lastCell = '';
				if(icol == This.colInfo.length - 1) {
					lastCell = 'last-cell';
				};

				tr += '<td id="' + tdid + '" class="uf-grid-cell ' + sclass + ' ' + tdtypeClass + ' ' + mergeTdClass + lastCell + '" name="' + col.field + '"' + colspan + ' style="' + align + '" >' + colText + '</td>';

			}
			var $tr = $(tr).appendTo(This.bodyTableView);
			This.setRowLock(This, $tr, mrows, row);

			$.data($(This.bearer)[0], 'data', This.items);
			return rowid;
		},
		setRowLock: function(This, $tr, mrows, row) {
			var lockFn = This.options.lock;
			if(lockFn.filter(row)) {
				$tr.addClass('locked ' + lockFn['class']);
			}
			if(mrows.length == 0) {
				This.mergeTr = $tr;
			}

			for(var i = 0; i < mrows.length; i++) {
				$tr.find('td:eq(' + mrows[i] + ')').remove();
				var column = This.mergeTr.find('td:eq(' + mrows[i] + ')');
				var rowspan = column.attr('rowspan') || 1;
				column.attr('rowspan', parseInt(rowspan) + 1);
			}

			This.prevRow = row;

			if(This.hasVScrollbar(This)) {
				This.gridHeadView.css({
					'margin-right': This.scw + 'px'
				});
			} else {
				This.gridHeadView.css({
					'margin-right': '0px'
				});
			}
		},
		setTbody: function(This) {
			This.index = 0;
			This.gridBodyView.find('.uf-grid-table').remove();
			This.gridBodyLock.find('.uf-grid-table').html('');
			var tbody = '<table class="uf-grid-table" border="0" cellspacing="0" cellpadding="0" style="width: 100%;"></table>';
			This.bodyTableView = $(tbody).prependTo(This.gridBodyView).trigger('create');
			This.bodyTableView.append(This.fixedRow);
			This.options.data = $.extend(true, [], This.options.data);
			var dataLen = This.options.data.length;
			var firstLen = 0;
			if(dataLen > 0) {
				function chunk(array, process, cbfun) {
					var i = 0,
						len = array.length;
					setTimeout(function() {
						process(array[i]);
						i++;
						if(i < len) {
							setTimeout(arguments.callee, 0);
							window.globalConfig = { //guohx  添加标识,标志表格数据全部渲染完毕,才允许点击新增
								loadCompleted: false
							}
						} else {
							cbfun();
							window.globalConfig = {
								loadCompleted: true
							}
						}
					}, 0);

				}

				function process(row) {
					var newid = This.addRow(This, row);
				}
				chunk(This.options.data, process, function() {
					if(This.locked) {
						This.lockHeadColumn();
						This.lockBodyColumns(This);
					}
					//This.setLock(This);
					This.initComplete();
				});

			} else {
				var rowId = This.options['id'] + '_row_nodatarow';
				var paddingLeft = This.gridBodyView.outerWidth(true) / 2 - 60;
				$('<tr class="nulldatarow" id="' + rowId + '"><td style="padding:20px;border-bottom:0px;padding-left:' + paddingLeft + 'px;" colspan=' + This.colInfo.length + '>没有符合条件数据</td></tr>').appendTo(This.bodyTableView);
				if(This.locked) {
					This.lockHeadColumn();
					This.lockBodyColumns(This);
				}
			}

			$.data($(This.bearer)[0], 'data', This.items);
			var timeId = setTimeout(function() {
				This.setEditArear();
				clearTimeout(timeId);
			}, 800);
		},
		setEditCtrl: function() {
			var This = this;
			var formEleArray = [];
			for(var icol = 0; icol < This.editColumns.length; icol++) {
				var col = This.editColumns[icol];
				//console.log(col);
				var type = This.editColumns[icol]['type'];
				var colName = This.editColumns[icol]['field'];
				col.ctrlId = This.options['id'] + type + colName;
				if(type == 'input' || type == "money") {
					var $input = $('<input type="text" id="' + col.ctrlId + '" class="wxgridformele uf-form-control inputedit ib pa" name="' + colName + '" edittype="' + type + '" value="" />').appendTo(This.editArear);
					if(type == 'money') {
						$input.css('text-align', 'right');
					}
					col.onKeyup = col.onKeyup || function(e) {};
					col.onKeyDown = col.onKeyDown || function(e) {};
					col.onInput = col.onInput || function(e) {};
					formEleArray.push(col);
				} else if(type == 'textarea') {
					$('<div id="' + col.ctrlId + '" class="wxgridformele uf-textarea ib pa" name="' + colName + '"></div>').appendTo(This.editArear);
					col.onBtnClick = col.onBtnClick || function(e) {};
					formEleArray.push(col);
				} else if(type == 'buttonedit') {
					$('<div id="' + col.ctrlId + '" class="wxgridformele uf-buttonedit ib pa" name="' + colName + '"></div>').appendTo(This.editArear);
					col.onBtnClick = col.onBtnClick || function(e) {};
					formEleArray.push(col);
				} else if(type == 'combox') {
					$('<div id="' + col.ctrlId + '" class="wxgridformele uf-combox ib pa" style="" name="' + colName + '"></div>').appendTo(This.editArear);
					col.onChange = col.onChange || function(e) {};
					col.beforeExpand = col.beforeExpand || function(e) {};
					formEleArray.push(col);
				} else if(type == 'treecombox') {
					$('<div id="' + col.ctrlId + '" class="wxgridformele uf-treecombox ib pa" name="' + colName + '"></div>').appendTo(This.editArear);
					col.onChange = col.onChange || function(e) {};
					col.beforeExpand = col.beforeExpand || function(e) {};
					formEleArray.push(col);
				} else if(type == 'datepicker') {
					$('<div id="' + col.ctrlId + '" class="wxgridformele uf-datepicker ib pa" name="' + colName + '"></div>').appendTo(This.editArear);
					formEleArray.push(col);
				} else if(type == 'switch') {
					$('<div id="' + col.ctrlId + '" class="wxgridformele uf-form-control ib pa text-align-' + col.align + '" name="' + colName + '"><label class="mt-checkbox mt-checkbox-outline"><input type="checkbox" ><span></span></label></div>').appendTo(This.editArear);
					formEleArray.push(col);
				}
			}

			var $formeles = this.editArear.find('.wxgridformele');
			$formeles.each(function(idx) {
				var col = formEleArray[idx]; 
				//CWYXM-12733 --经赵雪蕊确认--发文文号只控制除了（）、{}、【】、[]、下划线、短横线--zsj
				var containSpecial = RegExp(/[(\ )(\.)(\~)(\!)(\@)(\#)(\＃)(\$)(\＄)(\％)(\＾)(\＆)(\＼)(\｜)(\＂)(\＂)(\＇)(\＇)(\＜)(\＞)(\＝)(\%)(\^)(\&)(\*)(\＊)(\*)(\+)(\=)(\|)(\\)(\;)(\:)(\')(\")(\/)(\<)(\>)(\?)(\、)(\，)(\,)(\?)(\？)(\")(\")(\“)(\”)(\：)(\‘)(\’)(\|)(\@))(\#)(\￥)(\%)(\……)(\&)(\*)(\-)(\——)(\=)(\+)(\；)(\。)(\·)(\~)]+/);
				switch(col.type) {
					case 'input':
						$(this).on('keyup', function(e) {
							//CWYXM-12733 --经赵雪蕊确认--发文文号只控制除了（）、{}、【】、[]、下划线、短横线--zsj
							var ifd = $(this).attr('id');
							if(ifd == 'decompose-datainputsendDocNum') {
								if(containSpecial.test($(this).val())) {
									var temp_amount = $(this).val().replaceAll(containSpecial, "");
									$(this).val(temp_amount);
								}
							}
							var sdr = {};
							sdr.event = e;
							sdr.sender = $(this);
							sdr.rowId = $(this).closest('.uf-grid-table-edit').attr('rowid');
							sdr.data = $(this).val();
							This.bodyTableView.find('tr[id="' + sdr.rowId + '"] td[name="' + col.field + '"]').text(sdr.data);
							sdr.rowData = This.items[sdr.rowId];
							sdr.rowData[col.field] = sdr.data;
							This.items[sdr.rowId] = sdr.rowData;
							col.onKeyup(sdr,e);
						});
						$(this).on('keydown', function(e) {
							//CWYXM-12733 --经赵雪蕊确认--发文文号只控制除了（）、{}、【】、[]、下划线、短横线--zsj
							var ifd = $(this).attr('id');
							if(ifd == 'decompose-datainputsendDocNum') {
								if(containSpecial.test($(this).val())) {
									var temp_amount = $(this).val().replaceAll(containSpecial, "");
									$(this).val(temp_amount);
								}
							}
							var sdr = {};
							sdr.event = e;
							sdr.sender = $(this);
							sdr.rowId = $(this).closest('.uf-grid-table-edit').attr('rowid');
							sdr.data = $(this).val();
							This.bodyTableView.find('tr[id="' + sdr.rowId + '"] td[name="' + col.field + '"]').text(sdr.data);
							sdr.rowData = This.items[sdr.rowId];
							sdr.rowData[col.field] = sdr.data;
							This.items[sdr.rowId] = sdr.rowData;
							col.onKeyDown(sdr,e);
						});
						$(this).on('input', function(e) {
							//CWYXM-12733 --经赵雪蕊确认--发文文号只控制除了（）、{}、【】、[]、下划线、短横线--zsj
							var ifd = $(this).attr('id');
							if(ifd == 'decompose-datainputsendDocNum') {
								if(containSpecial.test($(this).val())) {
									var temp_amount = $(this).val().replaceAll(containSpecial, "");
									$(this).val(temp_amount);
								}
							}
							var sdr = {};
							sdr.event = e;
							sdr.sender = $(this);
							sdr.rowId = $(this).closest('.uf-grid-table-edit').attr('rowid');
							sdr.data = $(this).val();
							This.bodyTableView.find('tr[id="' + sdr.rowId + '"] td[name="' + col.field + '"]').text(sdr.data);
							sdr.rowData = This.items[sdr.rowId];
							sdr.rowData[col.field] = sdr.data;
							This.items[sdr.rowId] = sdr.rowData;
							col.onInput(sdr,e);
						});
						break;
					case 'money':
						$(this).numberInput();
						$(this).on('keyup', function(e) {
							var sdr = {};
							sdr.event = e;
							sdr.sender = $(this);
							sdr.rowId = $(this).closest('.uf-grid-table-edit').attr('rowid');
							sdr.data = $(this).val();
							if(sdr.data == '') sdr.data = '0.00';
							sdr.data = $.parseFloat(sdr.data);
							This.bodyTableView.find('tr[id="' + sdr.rowId + '"] td[name="' + col.field + '"]').text($.formatMoney(sdr.data));
							sdr.rowData = This.items[sdr.rowId];
							sdr.rowData[col.field] = sdr.data;
							This.items[sdr.rowId] = sdr.rowData;
							col.onKeyup(sdr);
						});
						break;
					case 'combox':
						$(this).ufCombox({
							idField: col['idField'] || 'id',
							textField: col['textField'] || 'text',
							name: colName,
							readonly: false,
							data: col['data'], //列表数据
							onChange: function(sender, itemData) {
								var sdr = {};
								sdr.sender = sender;
								sdr.fn = $(sender).getObj();
								sdr.rowId = $(sender).closest('.uf-grid-table-edit').attr('rowid');
								if($.isNull(sdr.rowId)) return false;
								sdr.itemData = itemData;
								sdr.rowData = This.items[sdr.rowId];
								sdr.rowData[col.field] = itemData[col.idField];
								sdr.rowData[col.textField] = itemData[col.textField];
								This.items[sdr.rowId] = sdr.rowData;
								col.onChange(sdr);
							},
							beforeExpand: function(sender, data) { //
								var sdr = {};
								sdr.sender = sender;
								sdr.fn = $(sender).getObj();
								sdr.data = data; //列表数据，主要用于重新赋值
								sdr.rowId = $(sender).closest('.uf-grid-table-edit').attr('rowid');
								sdr.rowData = This.items[sdr.rowId];
								col.beforeExpand(sdr);
							},
							onComplete: function(sender) {

							}
						});
						break;
					case 'treecombox':
						$(this).ufTreecombox({
							idField: col['idField'] || 'id',
							textField: col['textField'] || 'text',
							pIdField: col['pIdField'] || 'pId',
							name: colName,
							readonly: false, //可选
							autocomplete: 'off',
							leafRequire: col['leafRequire'] || false, //可选
							async: false, //异步
							data: col['data'], //列表数据
							onChange: function(sender, itemData) {
								var sdr = {};
								sdr.sender = sender;
								sdr.fn = $(sender).getObj();
								sdr.rowId = $(sender).closest('.uf-grid-table-edit').attr('rowid');
								if($.isNull(sdr.rowId)) return false;
								sdr.itemData = itemData;
								sdr.rowData = This.items[sdr.rowId];
								sdr.rowData[col.field] = itemData[col.idField];
								sdr.rowData[col.textField] = itemData[col.textField];
								This.items[sdr.rowId] = sdr.rowData;
								col.onChange(sdr);
							},
							beforeExpand: function(sender, data) {
								var sdr = {};
								sdr.sender = sender;
								sdr.fn = $(sender).getObj();
								sdr.data = data; //列表数据，主要用于重新赋值
								sdr.rowId = $(sender).closest('.uf-grid-table-edit').attr('rowid');
								sdr.rowData = This.items[sdr.rowId];
								col.beforeExpand(sdr);
							},
							onComplete: function(sender) {

							}
						});
						break;
					case 'buttonedit':
						$(this).ufButtonedit({
							onBtnClick: function(sender, obj) {
								var sdr = {};
								sdr.sender = sender;
								sdr.fn = obj;
								sdr.data = $(sender).getObj().getValue();
								sdr.rowId = $(sender).closest('.uf-grid-table-edit').attr('rowid');
								sdr.rowData = This.items[sdr.rowId];
								col.onBtnClick(sdr);
							}
						});
						break;
					case 'textarea':
						$(this).ufTextarea({
							onBtnClick: function(sender, obj) {
								var sdr = {};
								sdr.sender = sender;
								sdr.fn = obj;
								sdr.data = $(sender).getObj().getValue();
								sdr.rowId = $(sender).closest('.uf-grid-table-edit').attr('rowid');
								sdr.rowData = This.items[sdr.rowId];
								col.onBtnClick(sdr);
							}
						});
						break;
					case 'datepicker':
						$(this).ufDatepicker({
							format: 'yyyy-mm-dd'
							/*,
														initialDate: new Date(),*/
						});
						break;
				}
			});
		},
		setEditArear: function() {
			if(this.editColumns.length == 0) return false;
			if(this.bearer.find('.uf-grid-table-edit').length > 0) return false;

			var tbody = '<div class="uf-grid-table-edit hide"></div>';
			this.editArear = $(tbody).appendTo(this.gridBodyView).trigger('create');
			this.setEditCtrl();
		},
		setToolBar: function() {
			if($.isNull(this.options.toolbar)) return false;
			var This = this;
			for(var idx = 0; idx < this.options.toolbar.length; idx++) {
				var obj = This.options.toolbar[idx];
				if(obj.type == 'checkbox') {
					$('<div class="checkbox-ctrl"><label class="mt-checkbox mt-checkbox-outline"><input type="checkbox" class="' + obj['class'] + '" value="1">' + obj.text + '<span></span></label></div>').appendTo(This.toolbar);
				} else if(obj.type == 'button') {
					var btn = $('<button class="wxbtn btn ' + obj['class'] + '">' + obj.text + '</button>').appendTo(This.toolbar);
				}
			};

			var btns = This.gridFooter.find('.wxbtn');
			var i = 0;
			$.each(this.options.toolbar, function(idx) {
				var obj = This.options.toolbar[idx];
				if(obj.type == 'button') {
					btns.eq(i++).click(function(e) {
						e.preventDefault();
						obj.action();
						btn.blur();
						e.stopPropagation();
						return false;
					});
				}
			});
		},
		showEdit: function(tr) {
			if(this.bearer.hasClass('uf-datagrid-disabled')) return false;
			if($.isNull(this.editArear)) return false;
			if(tr.closest('.uf-grid-table-edit').length > 0) return false;
			var This = this;
			This.beforeHideEdit();
			var rowId = $(tr).attr('id');

			function showValue(bWithChange) {
				for(var icol = 0; icol < This.editColumns.length; icol++) {
					var col = This.editColumns[icol];
					var colName = col['field'];
					var formTd = $(tr).find('td[name="' + colName + '"]');

					if($.isNull(formTd)) continue;
					if(bWithChange && !col.hasOwnProperty('onChange')) {
						continue;
					}

					var $ctrl = $('#' + col.ctrlId);

					var text = formTd.text();
					var type = col.type;
					if(type == 'input') {
						$ctrl.val(text == 0.00 ? '' : text);
					} else if(type == 'money') {
						var reg = new RegExp(",", "g");
						text = text.replace(reg, '');
						$ctrl.val(text == 0.00 ? '' : text);

					} else if(type == 'buttonedit' || type == 'datepicker') {
						$ctrl.getObj().setValue(text);
					} else if(type == 'textarea') {
						var txt = text.replaceAll("】", "】\n");
						$ctrl.getObj().setValue(txt);
					} else if(type == 'combox' || type == 'treecombox') {
						var rowData = This.items[rowId];
						//$ctrl.getObj().setValue(rowData[col.idField], rowData[col.textField]);
						$ctrl.getObj().val(rowData[col.field]);
					} else if(type == 'switch') {
						$ctrl.find('input').prop('checked', formTd.find('input').is(':checked'));
					}
					if(bWithChange && type != 'toolbar' && type != 'checkbox' && type != 'switch') {
						formTd.html('');
					}

				}
			}

			function showEditArear() {

				This.editArear.attr('rowId', rowId);
				var posTop = 0;
				var posIndex = $(tr).index();
				This.bodyTableView.find('tr').each(function(idx, row) {
					if(idx >= posIndex) {
						return false;
					}
					posTop = posTop + $(this).outerHeight(true);
				});

				var sc = This.gridBodyView.scrollTop();
				if(sc + This.gridBodyView.height() < posTop + 50) {
					var scTop = posTop - This.gridBodyView.height() + 50;
					scTop = scTop < 0 ? 0 : scTop;
					This.gridBodyView.scrollTop(scTop);
				} else if(sc > posTop) {
					This.gridBodyView.scrollTop(posTop);
				}
				This.editArear.css({
					'top': (posTop == 1) ? 1 : posTop + 'px',
					"height": tr.outerHeight(true) - 1 + "px"
				});

				for(var icol = 0; icol < This.editColumns.length; icol++) {
					var col = This.editColumns[icol];
					var colName = col['field'];
					var formTd = $(tr).find('td[name="' + colName + '"]');

					if($.isNull(formTd) || formTd.length == 0) continue;

					var colPosIndex = formTd.index();
					var posLeft = 0;

					$(tr).closest('.uf-grid-body-view').find('.fixed-row td').each(function(idx, td) {
						if(idx >= colPosIndex) return false;
						posLeft = posLeft + $(td).outerWidth(true);
					});
					var $ctrl = $('#' + col.ctrlId);

					if($ctrl.length > 0) {
						var ctrlWidth = formTd.outerWidth(true) - 1;

						$ctrl.css({
							"left": posLeft + 'px',
							'min-width': ctrlWidth + 'px',
							'width': ctrlWidth + 'px'
						});
					}
				}
			}

			this.editArear.addClass('hide');
			showEditArear();
			showValue(false);
			var timeId = setTimeout(function() {
				clearTimeout(timeId);
				showValue(true);
				This.editArear.removeClass('hide');
			}, 30);
		},
		beforeHideEdit: function() {
			if(this.editArear.hasClass('hide')) {
				return false;
			}
			var This = this;
			if($.isNull(this.editArear)) return false;
			var rowId = this.editArear.attr('rowId');
			if($.isNull(rowId)) return false;
			var rowData = this.items[rowId];
			if($.isNull(rowData)) return false;
			var tr = this.bodyTableView.find('tr[id="' + rowId + '"]');
			for(var icol = 0; icol < This.editColumns.length; icol++) {
				var col = This.editColumns[icol];
				var colName = col['field'];
				var formTd = $(tr).find('td[name="' + colName + '"]');

				if($.isNull(formTd)) continue;

				var $ctrl = $('#' + col.ctrlId);
				var type = col.type;
				var text = '';
				if(type == 'input') {
					text = $ctrl.val();
					rowData[col.field] = text;
					text = text == 0.00 ? '' : text;
				} else if(type == 'money') {
					var text = $ctrl.val();
					rowData[col.field] = text;
					text = $.formatMoney(text);
					text = text == 0.00 ? '' : text;
				} else if(type == 'buttonedit' || type == 'datepicker') {
					text = $ctrl.getObj().getValue();
					rowData[col.field] = text;
				} else if(type == 'textarea') {
					text = $ctrl.getObj().getValue();
					text = text.replaceAll("(\n|\r|(\r\n)|(\u0085)|(\u2028)|(\u2029))", "<br>");
					rowData[col.field] = text;
				} else if(type == 'combox' || type == 'treecombox') {
					rowData[col.idField] = $ctrl.getObj().getValue();
					rowData[col.field] = $ctrl.getObj().getValue();
					text = $ctrl.getObj().getText();
					rowData[col.textField] = text;
				} else if(type == 'switch') {
					if($ctrl.find('input').is(':checked')) {
						text = '1';
					} else {
						text = '0';
					}
					formTd.find('input').prop('checked', text == '1');
					rowData[col.field] = text;
				}
				this.items[rowId] = rowData;
				if(type != 'toolbar' && type != 'checkbox' && type != 'switch') {
					formTd.html(text);
				}
			}
		},
		hideEdit: function() {
			if($.isNull(this.editArear)) return false;

			this.beforeHideEdit();
			this.editArear.addClass('hide');
		},
		hideDetail: function(This) {
			var grid = This.bearer;
			var $detailRow = grid.find('.uf-grid-body-view tr.uf-grid-detail-row');
			if($detailRow.length > 0) {
				$detailRow.find('.uf-datagrid-detail').css('display', 'none').appendTo($('body'));
				$detailRow.remove();
			}
			var $expandRow = grid.find('.uf-grid-body-view tr.uf-grid-expand-row');
			if($expandRow.length > 0) {
				var expandRowId = $expandRow.attr('id');
				grid.find('.uf-grid-body-lock tr[id="' + expandRowId + '"] td:eq(0)').height($expandRow.outerHeight(true));
				$expandRow.removeClass('uf-grid-expand-row');
			}

			This.setLock(This);
		},
		showDetail: function(This, rowid, detailEle) {
			var grid = This.bearer;
			if($.isNull(rowid)) {
				alert('showDetail使用错误');
				return false;
			}
			This.hideDetail(This);
			var newId = rowid.replace('_row_', '_detail_');
			var $thisRow = grid.find('.uf-grid-body-view tr[id="' + rowid + '"]');
			$thisRow.addClass('uf-grid-expand-row');
			var iColCount = $thisRow.find('>td').length;
			$detailRow = $('<tr id="' + newId + '" class="uf-grid-detail-row"></tr>').insertAfter($thisRow);
			$('<td class="uf-grid-detailCell" colspan="' + iColCount + '"></td>').appendTo($detailRow);
			var $detailCell = $detailRow.find('.uf-grid-detailCell');
			$(detailEle).appendTo($detailCell);
			$(detailEle).css('display', 'block');
			var detailCellH = $detailRow.outerHeight(true) + $thisRow.outerHeight(true);
			grid.find('.uf-grid-body-lock tr[id="' + rowid + '"] td:eq(0)').height(detailCellH);
			This.setLock(This);
			return $detailCell;
		},
		mouseSelect: function(e, trid) {
			var This = this;
			var checkbox = $(e.target).closest('.mt-checkbox,.mt-radio');
			var formCell = $(e.target).closest('.form-cell');
			var toolCell = $(e.target).closest('.toolbar');
			var aLink = $(e.target).closest('a');

			if(checkbox.length == 0 && formCell.length == 0 && toolCell.length == 0 && aLink.length == 0) {
				This.gridBody.find('tr[id="' + trid + '"]').find('input.check-item[rowid=' + trid + ']').trigger('click');
			}
			if($(e.target).closest('button').length > 0) {
				$(e.target).closest('button').blur();
			}
		},
		setEvents: function() {
			var This = this;
			var bearerWidth = this.bearer.width();
			var gridBody = this.gridBody;
			this.gridBodyView.scroll(function(e) {
				e.preventDefault();
				var scrL = $(this).scrollLeft();
				This.gridHeadView.scrollLeft(scrL);
				var scrT = $(this).scrollTop();
				This.gridBodyLock.scrollTop(scrT);
				e.stopPropagation();
			});
			this.gridBodyView.on('click', 'tr:not(.nulldatarow)', function(e) {
				var rowId = $(this).attr('id');
				if($(e.target).closest('.toolbar').length == 0 && !$(this).hasClass('locked')) {
					e.stopPropagation();
					if(This.editColumns.length > 0) {
						if($(e.target).closest('.mt-checkbox').length > 0) {
							var rowData = This.items[rowId];
							var field = $(e.target).closest('td').attr('name');
							if($(e.target).closest('input[type="checkbox"]').is(':checked')) {
								rowData[field] = '1';
							} else {
								rowData[field] = '0';
							}
						} else {
							This.showEdit($(this));
						}

					} else {

						if(!$.isNull(rowId)) {
							This.mouseSelect(e, rowId);
						}
					}
				}
				if($(this).hasClass('locked')) {
					This.hideEdit();
				}
			});
			this.gridBodyLock.on('click', 'tr', function(e) {
				var trid = $(this).attr('id');
				if($.isNull(trid)) {
					return false;
				}
				This.mouseSelect(e, trid);
			});
			this.gridBody.on('click', 'tr:not(.nulldatarow)', function(e) {
				if($.myBrowser() == 'IE') {
					function pLast(obj) {
						obj.focus();
						if(window.getSelection) { //ie11 10 9 ff safari
							var maxLen = obj.value.length;
							obj.setSelectionRange(maxLen, maxLen);
						}
					}
					if(e.target.nodeName.toLocaleLowerCase() == 'input') {
						e.preventDefault();
						pLast($(e.target)[0]);
					};
				}
			});
			this.gridHead.on('click', 'input.check-all', function(e) {
				e.stopPropagation();
				//This.viewport.find('input.check-all').closest('.mt-checkbox').removeClass('mt-checkbox-true-part');
				var index = $(this).attr('index');
				var checked = $(this)[0].checked;
				var checkboxs = This.gridBody.find('input.check-item[index=' + index + ']');
				checkboxs.prop('checked', checked);
				This.gridFooter.find('input.check-all').prop('checked', checked);
				checkboxs.each(function() {
					var rowid = $(this).attr("rowid");
					var pid = $(this).attr("data-id");
					if($(this)[0].checked) {
						This.gridBody.find('tr[id="' + rowid + '"],tr[pid="' + pid + '"]').addClass('checked');
					} else {
						This.gridBody.find('tr[id="' + rowid + '"],tr[pid="' + pid + '"]').removeClass('checked');
					}
				});

			});

			this.gridFooter.on('click', 'input.check-all', function(e) {
				e.stopPropagation();
				This.gridHead.find('input.check-all').trigger('click');
			});
			this.gridBody.on('click', 'input.check-item', function(e) {
				var rowid = $(this).attr("rowid");
				var pid = $(this).attr("data-id");
				var type = $(this).attr('type');
				if(type == 'radio') {
					This.gridBody.find('tr.checked').removeClass('checked');
				}
				if($(this)[0].checked) {
					This.gridBody.find('tr[id="' + rowid + '"],tr[pid="' + pid + '"]').addClass('checked');
				} else {
					This.gridBody.find('tr[id="' + rowid + '"],tr[pid="' + pid + '"]').removeClass('checked');
				}
				if(type == 'checkbox') {
					var rowSize = This.gridBodyView.find('tr[id^=' + This.options['id'] + '_row]').length,
						checkedSize = This.gridBodyView.find('tr[id^=' + This.options['id'] + '_row].checked').length;
					var checkAll = This.viewport.find('input.check-all');
					var checkAllbox = checkAll.closest('.mt-checkbox');
					if(rowSize == checkedSize && rowSize > 0) {
						//checkAllbox.removeClass('mt-checkbox-true-part');
						checkAll.prop('checked', true);
					} else {
						checkAll.prop('checked', false);
						/*checkAll.prop('checked', checkedSize > 0);
						if(checkedSize > 0) {
							checkAllbox.addClass('mt-checkbox-true-part');
						} else {
							checkAllbox.removeClass('mt-checkbox-true-part');
						}*/
					}
				}
				e.stopPropagation();
			});
			/*门户切换页签时改变了窗口的大小,计算时有问题*/
			/*$(window).resize(function() {
				This.setLock();
				This.bodyHeight = This.bearer.height();
				This.setBodyHeight(This);
			});*/

			$(document).on('mousedown', function(e) {
				e.stopPropagation();
				if($(e.target).closest(This.gridBodyView).length == 0 && $(e.target).closest('.uf-combox-popup').length == 0 && $(e.target).closest('.uf-datepicker-dropdown').length == 0) {
					This.hideEdit();
				}
			});
		},

		activate: function() {
			this.scw = this.scrollbarWidth();
			this.setViewport();
			this.setThead();
			this.setLockColumnNum();
			this.setTbody(this);
			this.bodyHeight = this.bearer.height();
			this.setBodyHeight(this);
			//this.setEditArear();
			//this.setLock();
			this.setToolBar();
			this.setEvents();
		},
		initComplete: function() {
			var This = this;

			//$.timeOutRun(null, null, function() {
			var complete = This.options.initComplete || function() {};
			complete(This.options, This.options.data);
			//This.setLock();
			//}, 300);
		}
	}

	$.fn.ufDatagrid = function(options) {

		this.each(function() {
			$(this).addClass('uf-datagrid');
			var setting = $.extend({}, $.fn.ufTreecombox.defaults, options);
			var grid = new ufDatagrid($(this), setting);
			grid.activate();
		});
	}

	$.fn.ufDatagrid.defaults = {
		frozenStartColumn: 0, //冻结开始列,1开始
		frozenEndColumn: 0, //冻结结束列
		paginate: true
	};
	$.fn.ufDatagrid.Constructor = ufDatagrid;
})(jQuery);
(function($) {

	function ufTextboxlist(element, options) {
		this.bearer = element;

		var id = this.bearer.attr('id');
		if(id == '' || id == undefined) {
			for(var i = 1; i < 10000; i++) {
				id = 'ufTextboxlist' + i;
				if($('#' + id).length == 0) break;
			}
			this.bearer.attr('id', id);
		}
		if(this.bearer.find('.uf-textboxlist-border').length == 0) {
			this.options = options;
		} else {
			var opRem = $.data(this.bearer[0], 'options');
			this.options = $.extend({}, opRem, options);
			this.bearer.off('click keydown keyup mouseenter mouseout');
			this.bearer.find('.uf-combox-border').remove();
		}

		this.options['id'] = id;
		this.options['autocomplete'] = this.options['autocomplete'] || this.bearer.attr('autocomplete') || 'off';
		this.options['placeholder'] = this.options['placeholder'] || this.bearer.attr('placeholder') || '';
		this.options['disabled'] = this.options['disabled'] || this.bearer.attr('disabled');
		this.options['readonly'] = this.options['readonly'] || this.bearer.attr('readonly');
		this.options['name'] = this.options['name'] || this.bearer.attr('name');

		this.options['idField'] = this.options['idField'] || this.bearer.attr('idField') || 'id';
		this.options['pIdField'] = this.options['pIdField'] || this.bearer.attr('pIdField') || 'pId';
		this.options['textField'] = this.options['textField'] || this.bearer.attr('textField') || 'name';
		this.bearer.removeAttr('url');
		this.bearer.removeAttr('autocomplete');
		this.bearer.removeAttr('placeholder');
		this.bearer.removeAttr('disabled');
		this.bearer.removeAttr('readonly');
		this.options.data = this.options.data || [];
		this.options.onChange = this.options.onChange || function() {};
		this.options.onFocus = this.options.onFocus || function() {};
		this.options['onComplete'] = this.options['onComplete'] || this.bearer.attr('onComplete');
		this.items = {
			'options': this.options
		};
		this.items.This = this;
		this.bearer.data('items', this.items);
		$.data(this.bearer[0], 'options', this.options);
	}

	ufTextboxlist.prototype = {
		constructor: ufTextboxlist,
		setContent: function() {
			this.bearer.addClass('uf-textboxlist uf-combox2');
			var cbHtml = '<div class="uf-textboxlist-border uf-combox-border" style="' + (this.options.icon ? 'border:0' : '') + '">';
			if(this.options.icon != '' && this.options.icon != undefined) {
				cbHtml += '<span class="icon-border" style="left:-15px"><span class="icon ' + this.options.icon + '" style="margin:3px 0 0 3px "></span></span>';
			}
			cbHtml += '<ul class="uf-textboxlist-inner">';
			cbHtml += '</ul>';
			cbHtml += '<span class="uf-textboxlist-item-more hide">...</span>'
			cbHtml += '<span class="icon-angle-bottom open"><b></b></span>';
			cbHtml += '<span class="uf-textboxlist-inputLi"><input name="' + this.options.textField + '" id="' + this.options.id + '_input" class="uf-textboxlist-input inputedit" type="text" autocomplete="off"></span>';
			cbHtml += '<span id="' + this.options.id + '_num" class="uf-textboxlist-numLi"></span>';
			cbHtml += '<input type="hidden" value="" id="' + this.options.id + '_value" class="uf-textboxlist-value inputedit inputValue" name="' + this.options.idField + '">';
			cbHtml += '<input type="hidden" value="" id="' + this.options.id + '_text" class="uf-textboxlist-text inputText">';
			//cbHtml += '<div id="'+this.options.id+'_popup" class="uf-textboxlist-popup"><ul class="uf-treecombox-tree ztree ufmaTree" id="'+this.options.id+'_tree"></ul></div>';
			cbHtml += '</div>';

			this.combox = $(cbHtml).appendTo(this.bearer).trigger('create');
			$('<div id="' + this.options.id + '_popup" class="uf-textboxlist-popup"><ul class="uf-treecombox-tree ztree ufmaTree" id="' + this.options.id + '_tree"></ul></div>').appendTo('body');
			//this.popup = this.combox.find('.uf-textboxlist-popup');
			this.popup = $('#' + this.options.id + '_popup');
			this.list = this.combox.find('.uf-textboxlist-inner');
			this.tree = this.popup.find('.uf-treecombox-tree');
			this.inputLi = this.combox.find('.uf-textboxlist-inputLi');
			this.input = this.combox.find('.uf-textboxlist-input');
			this.inputVal = this.combox.find('.uf-textboxlist-value');
			this.inputText = this.combox.find('.uf-textboxlist-text');
			this.numLi = this.combox.find('.uf-textboxlist-numLi');
			this.more = this.combox.find('.uf-textboxlist-item-more');
			this.angle = this.combox.find('.icon-angle-bottom');
		},
		setPopupWidth: function() {
			var popupWidth = this.bearer.width();
			var posX = this.bearer.offset().left;
			var posY = this.bearer.offset().top + this.bearer.outerHeight(true);
			if(this.bearer.closest('td').length > 0) {
				posX = posX - 1;
				posY = posY + 2;
			}
			this.popup.css({
				//				'min-width': popupWidth - 2 + 'px',
				'width': '200px',
				'max-width': '300px',
				'left': posX,
				'top': posY
			});
			if(this.combox.width() > this.popup.width()) { //不知为什么有时差2
				this.popup.css('min-width', popupWidth + 'px');
			}

		},
		setPopupItem: function(This) {
			This.clear();
			//var combox = this;

			var treeSetting = {
				async: {
					enable: This.options.async,
					type: 'get',
					dataType: 'json', //返回的数据格式：json/xml/html/script/jsonp/text
					contentType: 'application/json; charset=utf-8',
					//url:this.options.url||null
				},
				view: {
					showLine: false,
					showIcon: false
				},
				check: {
					enable: true
				},

				data: {
					simpleData: {
						enable: true,
						idKey: This.options.idField,
						pIdKey: This.options.pIdField,
						rootPId: 0
					},

					key: {
						name: This.options.textField,
					},

					keep: {
						leaf: true
					}
				},
				callback: {

					/*onAsyncError: function(event, treeId, treeNode, XMLHttpRequest, textStatus, errorThrown) {
						alert(XMLHttpRequest);
					},*/
					onClick: function(event, treeId, treeNode) {
						event.stopPropagation();
						This.treeObj.checkNode(treeNode, !treeNode.checked, true);
						This.onCheckClick(event, treeId, treeNode);
					},
					onCheck: function(event, treeId, treeNode) {
						This.onCheckClick(event, treeId, treeNode);
					},
					onAsyncSuccess: function() {
						This.onComplete(This.bearer);
					}
				}
			};

			This.treeObj = $.fn.zTree.init(This.tree, treeSetting, This.options.data);
			if(!This.options.async) {
				This.onComplete(This.bearer);
			}
		},
		onCheckClick: function(event, treeId, treeNode) {
			event.stopPropagation();
			this.keyboardSelect();
			this.afterSelect();
		},
		clear: function() {
			this.input.val('');
			this.inputVal.val('');
			this.inputText.val('');
			this.list.html('');
			this.more.addClass('hide');
			this.angle.removeClass('hide')
			this.numLi.html('');
			
		},
		showPopup: function() {
			this.setPopupWidth();
			var $popup = this.popup;

			if($popup.attr('popup-lock') != 'true') {
				this.bearer.addClass('uf-combox-show-popup');
				$popup.attr('popup-lock', 'true');
				this.onFocus();
				var val = this.inputVal.val();
				var valArray = val.split(',');
				for(var i = 0; i < valArray.length; i++) {
					var node = this.treeObj.getNodeByParam(this.options.idField, valArray[i], null);
					if(!$.isNull(node)) {
						this.treeObj.checkNode(node, true, true);
					}
				}

				$popup.slideDown(200, function() {

				});
			}
		},
		hidePopup: function() {
			var $popup = this.popup;
			var This = this;
			$popup.attr('popup-lock', 'true');
			$popup.slideUp(200, function() {
				$(this).attr('popup-lock', 'false');
				This.afterSelect();
				This.bearer.removeClass('uf-combox-show-popup');
			});
		},
		afterSelect: function(blur) {
			if(this.popup.attr('popup-lock') != 'true') {
				return false;
			}
			this.clear();
			this.popup.find('.uf-textboxlist-item').remove();

			var nodes = this.treeObj.getCheckedNodes(true);
			this.adjInput(this);
			this.inputVal.val('');
			for(var i = 0; i < nodes.length; i++) {
				var node = nodes[i];
				if(this.options.leafRequire || this.options.leafRequire == true || this.options.leafRequire == 'true') {
					if(!node.isParent) {
						this.addItem(this, node[this.options.idField], node[this.options.textField]);
					}
				} else {
					if(!node.getCheckStatus().half) {
						this.addItem(this, node[this.options.idField], node[this.options.textField]);
					}
				}
			}
			this.onChange();
			if(!blur) {
				this.input.val('').focus();
			}
		},
		addItem: function(self, value, text) {
			if(self.list.find('.uf-textboxlist-item[value="' + value + '"]').length == 0) {
				var $item = $('<li class="uf-textboxlist-item" title="' + text + '" value="' + value + '"></li>').appendTo(self.list);
				var $txt = $('<span class="uf-textboxlist-item-text">' + text + '</span>').appendTo($item);
				var $btnClose = $('<span class="uf-textboxlist-close glyphicon icon-close"></span>').appendTo($item);
				var itemWidth = 90;
				$item.width(itemWidth);

				self.addValue(self.inputVal, value);
				self.addValue(self.inputText, text);
				self.adjInput(self);

			}
		},
		addValue: function($input, v) {
			var textVal = $input.val();
			if(textVal == '') textVal = v;
			else {
				var valArray = textVal.split(',');
				valArray.push(v);
				textVal = valArray.join(',');
			}
			$input.val(textVal);
		},
		delLabelItem: function(v) {
			var $valueInput = this.inputVal;
			var $textInput = this.inputText;
			var textVal = $textInput.val();
			var val = $valueInput.val();
			var valArray = val.split(',');
			var textArray = textVal.split(',');
			if(textVal == '') return false;
			else {
				var idx = valArray.indexOf(v);
				if(idx == -1) return false;
				valArray.splice(idx, 1);
				textArray.splice(idx, 1);
				$valueInput.val(valArray.join(','));
				$textInput.val(textArray.join(','));
				this.list.find('.uf-textboxlist-item[value="' + v + '"]').remove();
			}
		},
		delValue: function(v) {
			var combox = this;
			this.delLabelItem(v);
			var nodes = this.treeObj.getNodesByParam('pId', v, null);
			for(var i = 0; i < nodes.length; i++) {
				var node = nodes[i];
				this.treeObj.checkNode(node, false, false);
				var newVal = node[this.options.idField];
				combox.delValue(newVal);
			}
			var nodes = this.treeObj.getNodesByParam(this.options.idField, v, null);
			if(nodes.length > 0) {
				this.treeObj.checkNode(nodes[0], false, false);
			}
			//
			nodes = this.treeObj.getCheckedNodes(true);
			for(var i = 0; i < nodes.length; i++) {
				var node = nodes[i];
				if(!$.isNull(node)) {
					if(node.getCheckStatus().half) {
						combox.delLabelItem(node[this.options.idField]);
					}
				}
			}
			this.adjInput(this);
		},
		adjInput: function(self) {

			var $list = self.list;
			var $moreitem = self.more;
			//var boxWidth = self.combox.width();
			var boxWidth = self.combox.actual('width');
			var $inputLi = self.inputLi;
			var defWidth = 2;

			var numWidth = 4;
			var moreBtnWidth = 14;

			var listWidth = 0;
			var $liObjs = $list.find('.uf-textboxlist-item');
			$moreitem.addClass('hide');
			if($liObjs.length > 0) {
				self.numLi.html('(' + $liObjs.length + ')').show();
				self.angle.addClass('hide')
				//numWidth = numWidth + self.numLi.outerWidth(true);
				numWidth = numWidth + self.numLi.actual('outerWidth');
				listWidth = boxWidth - numWidth - moreBtnWidth - 40;
				var itemLen = 0;

				$liObjs.each(function(idx) {
					var tmpItemWidth = $(this).actual('outerWidth');
					if(itemLen + tmpItemWidth < listWidth) {
						itemLen = itemLen + tmpItemWidth;
						$(this).addClass('showlabel');
					} else {
						$(this).removeClass('showlabel');
						$moreitem.removeClass('hide');
					}

				});
				listWidth = itemLen;
			} else {
				self.numLi.hide();
				self.angle.removeClass('hide')
			}
			$list.css('width', listWidth + 'px');
			if($moreitem.hasClass('hide')) {
				moreBtnWidth = 0;
			}
			inputWidth = boxWidth - defWidth - numWidth - listWidth - moreBtnWidth;
			this.input.css({
				width: inputWidth - 16 + 'px'
			});
			this.inputLi.css({
				width: inputWidth + 'px',
				right: numWidth - 10 + 'px'
			});

		},
		keyboardSelect: function(key) {
			var $popup = this.popup;
			var This = this;
			var setting = this.options;
			if(key != 8) {
				this.showPopup();
				if($('#' + setting.id + '_popup').attr('popup-lock') != 'true') {
					return false;
				}
			}

			function selectNode(node) {
				if(!$.isNull(node)) {
					node = This.treeObj.selectNode(node);
				}
				This.input.focus();
				return node;
			}
			var nodes = this.treeObj.getSelectedNodes(),
				node;
			if(nodes.length == 0) {
				var nodes = this.treeObj.getNodes();
				if(nodes.length > 0) {
					node = this.treeObj.selectNode(nodes[0]);
					This.input.focus();
				}
			} else {
				node = nodes[0];
			}

			switch(key) {
				case 40:
					node = node.getNextNode();
					node = selectNode(node);
					break;
				case 38:
					node = node.getPreNode();
					node = selectNode(node);

					break;
				case 37:
					node = node.getParentNode();
					node = selectNode(node);

					break;
				case 39:
					if(!$.isNull(node.children)) {
						node = node.children[0];
						node = selectNode(node);
					}
					break;
				case 13:
					if(!$.isNull(node)) {
						//this.treeObj.checkNode(node,!node.checked,true);
						this.afterSelect();
						This.hidePopup();
					}
					break;
				case 27:
					if(!$.isNull(node)) {
						this.treeObj.checkNode(node, !node.checked, true);
					}
					break;
				case 8:
					var textValue = this.input.val();
					if(textValue == '') {
						var showLabels = This.list.find('.showlabel');
						if(showLabels.length > 0) {
							var lastLabel = showLabels[showLabels.length - 1];
							if(!$.isNull(lastLabel)) {
								var val = $(lastLabel).attr('value');
								This.delValue(val);
							}
						}
						return false;
					}
					break;
				default:
					break;
			}
		},
		setEvents: function() {
			var setting = this.options;
			var combox = this;
			$('#' + setting.id).on('click', '.uf-textboxlist-close', function(e) {
				e.preventDefault();
				if(combox.bearer.hasClass('uf-combox-disabled')) return false;
				var $item = $(this).closest('.uf-textboxlist-item');
				var $valueInput = combox.inputVal;
				combox.delValue($item.attr('value'));
				$item.remove();
				combox.adjInput(combox);
				e.stopPropagation();
			});

			$('#' + setting.id).on('click', ':not(.uf-textboxlist-close)', function(e) {
				e.preventDefault();
				if(combox.bearer.hasClass('uf-combox-disabled')) return false;
				var $input = combox.input;
				$input.focus();
				combox.showPopup();
				combox.keyboardSelect();
				e.stopPropagation();
			});

			$('#' + setting.id).on('keydown', function(e) {
				if(combox.bearer.hasClass('uf-combox-disabled')) return false;
				if($(this).attr('keydown') == 'true') return false;
				$(this).attr('keydown', 'true');
				combox.keyboardSelect(e.keyCode);
				e.stopPropagation();
			});
			$('#' + setting.id).on('keyup', function(e) {
				e.stopPropagation();
				if(combox.bearer.hasClass('uf-combox-disabled')) return false;
				$(this).attr('keydown', 'false');
				var $input = combox.input;
				var inputValue = $input.val();
				if($(this).attr('temValue') != inputValue && inputValue != '') {
					$(this).attr('temValue', inputValue);
					//检索树
					function filter(node) {
						return(node[setting.idField].indexOf(inputValue) > -1 || node[setting.textField].indexOf(inputValue) > -1);
					}
					var node = combox.treeObj.getNodesByFilter(filter, true);
					if(!$.isNull(node)) {
						combox.treeObj.selectNode(node);
					}
					$input.focus();
				}
			});

			$(document).on('mousedown mousewheel DOMMouseScroll', function(e) {
				var e = e || window.event;
				if($(e.target).closest('#' + combox.options['id']).length === 0 && $(e.target).closest(combox.popup).length === 0) {
					combox.afterSelect();
					combox.hidePopup();
				}
			});
		},
		activate: function() {
			var This = this;
			this.setContent();
			this.setPopupWidth();
			if(!$.isNull(This.options.url)) {
				$.ufajax(This.options.url, 'get', This.options.data, function(result) {
					if(!$.isNull(result.data)) {
						This.options.data = result.data;
						This.setPopupItem(This);
					} else {
						alert('错误的数据格式!');
					}
				});
			} else {
				This.setPopupItem(This);
			}
			this.setEvents();
		},
		onChange: function(treeNode) {
			this.options.onChange(this.bearer, treeNode);
		},
		onComplete: function(sender) {
			var This = this;
			if(!$.isNull(this.options.onComplete)) {
				$.timeOutRun(null, null, function() {
					This.options.onComplete(This.bearer);
				}, 300);

			}
		},
		onFocus: function() {
			if(this.bearer.hasClass('uf-combox-disabled')) {
				return false;
			}
			this.options.onFocus(this);
		}
	}

	$.fn.ufTextboxlist = function(options) {

		this.each(function() {
			var setting = $.extend({}, $.fn.ufTreecombox.defaults, options);
			var combox = new ufTextboxlist($(this), setting);
			combox.activate();

		});
	}
	$.fn.ufTextboxlist.defaults = {
		//autocomplete:'off',
		//placeholder :'',
		//name        :'',
		//disabled    :false,
		//readonly    :true,
		//idField     :'id',
		//textField   :'text',
		onChange: function(itemData) {}
	};
	$.fn.ufTextboxlist.Constructor = ufTextboxlist;
	///////////////////////////////////////////////////	

})(jQuery);
(function($) {

	function ufFixedShow($el, options) {
		this.bearer = $el;
		this.clone = null;
		this.bearer.attr('aria-fixed', 'false');
		var id = this.bearer.attr('id');
		if(id == '' || id == undefined) {
			for(var i = 1; i < 10000; i++) {
				id = 'ufFixed' + i;
				if($('#' + id).length == 0) break;
			}
			this.bearer.attr('id', id);
		}
		if($(this).attr('aria-fixed') != 'true') {
			this.options = options;
		} else {
			$(this).attr('aria-fixed', false);
			//$(window).off('scroll');
			var opRem = $.data(this.bearer[0], 'options');
			this.options = $.extend({}, opRem, options);
		}

		if(this.options.position == 'top') {
			this.options.st = this.options.st || $el.offset().top;
		} else {
			this.options.st = this.options.st || $(window).height() - this.bearer.outerHeight(true);
		}
		this.options.id = id;
		$.data(this.bearer[0], 'options', this.options);
	}

	ufFixedShow.prototype = {
		constructor: ufFixedShow,
		setContent: function() {
			this.fixedCntId = this.options.id + '-fixed-box';
			this.fixedCnt = $('#' + this.fixedCntId);
			if(this.fixedCnt.length > 0) {
				this.fixedCnt.empty();
			} else {
				this.fixedCnt = $('<div id="' + this.fixedCntId + '" class="uf-fix uf-fix-' + this.options.position + '" scroll="' + this.options.st + '"></div>').appendTo('body').trigger('create');
			}
			this.fixedCnt = $('<div id="' + this.fixedCntId + '" class="uf-fix uf-fix-' + this.options.position + '" scroll="' + this.options.st + '"></div>').appendTo('body').trigger('create');
			this.clone = this.getClone();
			this.clone = this.clone.appendTo(this.fixedCnt).trigger('create');
			this.bearer.attr('aria-fixed', 'true');
		},
		getClone: function() {
			this.tagName = this.bearer[0].tagName.toLowerCase();
			var clone = this.bearer.clone(true);
			if(this.tagName == 'thead') {
				clone = this.bearer.parent().clone(true).removeAttr('id');
				clone.find('tbody').remove();
				clone.removeAttr('width');
				clone.removeAttr('height');
				clone.css({
					'width': '100%',
					'margin': '0'
				});
			}
			return clone;
		},
		redraw: function() {
			This = this;
			$.timeOutRun(null, "", function() {
				var clone = This.getClone();
				This.clone.replaceWith(clone);
				This.setTableColWidth();
			}, 50);
		},
		setTableColWidth: function() {
			this.fixedCnt.css({
				'width': this.bearer.width() + 1 + 'px'
			});
			if(this.tagName == 'thead') {
				var fixedTrs = this.clone.find('tr');
				var bearerTrs = this.bearer.find('tr');
				for(var i = 0; i < fixedTrs.length; i++) {
					var fixedTr = fixedTrs[i];
					var bearerTr = bearerTrs[i];
					var fixedTds = $(fixedTr).children();
					var bearerTds = $(bearerTr).children();
					for(var j = 0; j < bearerTds.length; j++) {
						fixedTds.eq(j).width(bearerTds.eq(j).width());
					};
				}
			}
		},
		setFixedPos: function() {
			var fixedCntH = this.bearer.outerHeight(true);
			var fixedCntW = this.bearer.outerWidth(true);
			var fixedL = this.bearer.offset().left;
			if(this.tagName == 'thead') {
				var fixedCntW = this.bearer.parent().outerWidth(true);
				var fixedL = this.bearer.parent().offset().left;
			}
			this.fixedCnt.css({
				'height': fixedCntH + 'px',
				'width': fixedCntW + 'px',
				'left': fixedL + 'px'
			});
		},

		showOrHide: function(This) {
			var isOpen = false,
				fixTopH = This.bearer.outerHeight(true);
			var scrollTop = parseInt(This.fixedCnt.attr('scroll'));
			var st = $(window).scrollTop();
			if(This.options.position == 'top') {
				if(st > scrollTop) {
					!isOpen && This.fixedCnt.animate({
						"top": This.options.offset
					}, 1, function() {
						isOpen = true;
					});
				} else {
					This.fixedCnt.animate({
						"top": -fixTopH - 10
					}, 1, function() {
						isOpen = false;
					});
				}
			} else {
				if(st < $(document).height() - $(window).height() - 10) {
					!isOpen && This.fixedCnt.animate({
						"bottom": This.options.offset
					}, 3, function() {
						isOpen = true;
					});
				} else {
					This.fixedCnt.animate({
						"bottom": -fixTopH
					}, 3, function() {
						isOpen = false;
					});
				}
			}
		},
		setEvents: function() {
			var isOpen = false,
				This = this;
			var pos = this.options.position;
			this.fixedCnt.css({
				"z-index": this.options.zIndex
			});
			$.timeOutRun($(window), "scroll load", function() {
				This.showOrHide(This);
			}, 30);
			$.timeOutRun($(window), "resize", function() {
				This.showOrHide(This);

				This.setTableColWidth();
				This.setFixedPos();

			}, 30);
		},
		activate: function() {
			this.setContent();
			this.setTableColWidth();
			this.setFixedPos();
			this.setEvents();
			this.redraw();
		}
	}

	$.fn.ufFixedShow = function(options) {
		this.each(function() {
			var setting = $.extend({}, $.fn.ufTreecombox.defaults, options);
			var fixedCnt = new ufFixedShow($(this), setting);
			fixedCnt.activate();
		});
	}
	$.fn.ufFixedShow.defaults = {
		position: 'top', //位置top||bottom
		zIndex: 1000, //Z轴 
		offset: 0 //偏移
	};
	$.fn.ufFixedShow.Constructor = ufFixedShow;
})(jQuery);
(function($) {

	function ufTimeline(element, options) {
		this.bearer = element;
		this.options = options;
		this.sender = {};
	}

	ufTimeline.prototype = {
		constructor: ufTimeline,
		setContent: function() {
			var stepLen = this.options.steps.length || 1;
			var width = this.bearer.width();
			var liWidth = Math.floor(width / stepLen);
			var html = '<ul class="uf-timeline">';
			for(var i = 0; i < stepLen; i++) {
				var step = this.options.steps[i].step;
				var iStep = i + 1;
				html = html + '<li class="" style="width:' + liWidth + 'px;" step=' + iStep + ' target="' + this.options.steps[i].target + '">';
				html = html + '<div class="uf-timeline-map"><div class="uf-timeline-line"></div><div class="uf-timeline-icon"><span>' + iStep + '</span></div></div>';
				if(!$.isNull(step)) {
					html = html + '<div class="uf-timeline-content">' + step + '</div>';
				}
				html = html + '</li>'
			}
			html = html + '</ul>';
			this.timeline = $(html).appendTo(this.bearer).trigger('create');
		},

		setEvents: function() {
			var This = this;
		},

		activate: function() {
			this.setContent();
			this.setEvents();
		}
	}

	$.fn.ufTimeline = function(options) {

		this.each(function() {
			var setting = $.extend({}, $.fn.ufTimeline.defaults, options);
			var timeline = new ufTimeline($(this), setting);
			timeline.activate();
		});

	}
	$.fn.ufTimeline.defaults = {

	};
	$.fn.ufTimeline.Constructor = ufTimeline;

})(jQuery);
/* =========================================================
 * foundation-datepicker.js
 * Copyright 2015 Peter Beno, najlepsiwebdesigner@gmail.com, @benopeter
 * project website http://foundation-datepicker.peterbeno.com
 * ========================================================= */
! function($) {

	function UTCDate() {
		return new Date(Date.UTC.apply(Date, arguments));
	}

	function UTCToday() {
		var today = new Date();
		return UTCDate(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate());
	}

	var Datepicker = function(element, options) {
		var that = this;
		// if(options.startDate==undefined){
		// 	options.startDate = new Date(new Date(ufma.getCommonData().svTransDate).getFullYear()+ '-01-01 00:00:00');
		// }
		// if(options.endDate==undefined){
		// 	options.endDate = new Date(new Date(ufma.getCommonData().svTransDate).getFullYear()+ '-12-31');
		// }
		this.options = options;
		this.options.name = this.options.name || $(element).attr('name');
		this.element = $(element);
		if(this.element.hasClass('uf-datepicker')) this.element.addClass('uf-datepicker');
		if(this.element.find('input').length == 0) {
			$('<input type="text" class="prefix" placeholder="格式:2018-09-06" />').appendTo(this.element);
			this.inputVal = $('<input name="' + this.options.name + '" type="hidden" />').appendTo(this.element);
		}
		if(this.element.find('.icon-calendar').length == 0) {
			$('<span class="icon icon-calendar"></span>').appendTo(this.element);
		}
		this.element.css('width', this.element.width() - this.element.outer().width + 'px');
		this.input =
			this.autoShow = options.autoShow || true;
		this.appendTo = options.appendTo || 'body';
		this.closeButton = options.closeButton;
		this.language = options.language || this.element.data('date-language') || "en";
		this.language = this.language in dates ? this.language : this.language.split('-')[0]; //Check if "de-DE" style date is available, if not language should fallback to 2 letter code eg "de"
		this.language = this.language in dates ? this.language : "en";
		this.isRTL = dates[this.language].rtl || false;
		this.format = DPGlobal.parseFormat(options.format || this.element.data('date-format') || dates[this.language].format || 'mm/dd/yyyy');
		this.isInline = false;
		this.isInput = this.element.is('input');
		this.component = this.element.is('.uf-datepicker') ? this.element.find('.prefix, .postfix') : false;
		this.hasInput = this.component && this.element.find('input').length;
		this.disableDblClickSelection = options.disableDblClickSelection;
		this.onRender = options.onRender || function() {};
		if(this.component && this.component.length === 0) {
			this.component = false;
		}

		this.linkField = options.linkField || this.element.data('link-field') || false;
		this.linkFormat = DPGlobal.parseFormat(options.linkFormat || this.element.data('link-format') || 'yyyy-mm-dd hh:ii:ss');
		this.minuteStep = options.minuteStep || this.element.data('minute-step') || 5;
		this.pickerPosition = options.pickerPosition || this.element.data('picker-position') || 'bottom-right';
		this.initialDate = options.initialDate || null;

		this._attachEvents();

		this.minView = 0;
		if('minView' in options) {
			this.minView = options.minView;
		} else if('minView' in this.element.data()) {
			this.minView = this.element.data('min-view');
		}
		this.minView = DPGlobal.convertViewMode(this.minView);

		this.maxView = DPGlobal.modes.length - 1;
		if('maxView' in options) {
			this.maxView = options.maxView;
		} else if('maxView' in this.element.data()) {
			this.maxView = this.element.data('max-view');
		}
		this.maxView = DPGlobal.convertViewMode(this.maxView);

		this.startViewMode = 'month';
		if('startView' in options) {
			this.startViewMode = options.startView;
		} else if('startView' in this.element.data()) {
			this.startViewMode = this.element.data('start-view');
		}
		this.startViewMode = DPGlobal.convertViewMode(this.startViewMode);
		this.viewMode = this.startViewMode;

		if(!('minView' in options) && !('maxView' in options) && !(this.element.data('min-view') && !(this.element.data('max-view')))) {
			this.pickTime = false;
			if('pickTime' in options) {
				this.pickTime = options.pickTime;
			}
			if(this.pickTime == true) {
				this.minView = 0;
				this.maxView = 4;
			} else {
				this.minView = 2;
				this.maxView = 4;
			}
		}

		this.forceParse = true;
		if('forceParse' in options) {
			this.forceParse = options.forceParse;
		} else if('dateForceParse' in this.element.data()) {
			this.forceParse = this.element.data('date-force-parse');
		}

		this.picker = $(DPGlobal.template)
			.appendTo(this.isInline ? this.element : this.appendTo)
			.on({
				click: $.proxy(this.click, this),
				mousedown: $.proxy(this.mousedown, this)
			});
		if(this.closeButton) {
			this.picker.find('a.uf-datepicker-close').show();
		} else {
			this.picker.find('a.uf-datepicker-close').hide();
		}

		if(this.isInline) {
			this.picker.addClass('uf-datepicker-inline');
		} else {
			this.picker.addClass('uf-datepicker-dropdown dropdown-menu');
		}
		if(this.isRTL) {
			this.picker.addClass('uf-datepicker-rtl');
			this.picker.find('.prev i, .next i')
				.toggleClass('fa-chevron-left fa-chevron-right');
		}
		$(document).on('mousedown mousewheel', function(e) {
			// Clicked outside the datepicker, hide it
			if($(e.target).closest('.uf-datepicker-dropdown.uf-datepicker-inline, .uf-datepicker-dropdown').length === 0) {
				that.hide();
			}
		});
		if(this.component) {
			this.element.find('.icon-calendar').on('click', function() {
				if(that.element.find('input').attr("disabled") != "disabled" && that.element.find('input').attr("disabled") != "true"){ //
					that.element.find('input').trigger('click');
				}
				//that.showMode();
			});
		}
		this.autoclose = true;
		if('autoclose' in options) {
			this.autoclose = options.autoclose;
		} else if('dateAutoclose' in this.element.data()) {
			this.autoclose = this.element.data('date-autoclose');
		}

		this.keyboardNavigation = true;
		if('keyboardNavigation' in options) {
			this.keyboardNavigation = options.keyboardNavigation;
		} else if('dateKeyboardNavigation' in this.element.data()) {
			this.keyboardNavigation = this.element.data('date-keyboard-navigation');
		}

		this.todayBtn = (options.todayBtn || this.element.data('date-today-btn') || false);
		this.todayHighlight = (options.todayHighlight || this.element.data('date-today-highlight') || false);

		this.calendarWeeks = false;
		if('calendarWeeks' in options) {
			this.calendarWeeks = options.calendarWeeks;
		} else if('dateCalendarWeeks' in this.element.data()) {
			this.calendarWeeks = this.element.data('date-calendar-weeks');
		}
		if(this.calendarWeeks)
			this.picker.find('tfoot th.today')
			.attr('colspan', function(i, val) {
				return parseInt(val) + 1;
			});

		this.weekStart = ((options.weekStart || this.element.data('date-weekstart') || dates[this.language].weekStart || 0) % 7);
		this.weekEnd = ((this.weekStart + 6) % 7);
		this.startDate = -Infinity;
		this.endDate = Infinity;
		this.daysOfWeekDisabled = [];
		this.setStartDate(options.startDate || this.element.data('date-startdate'));
		this.setEndDate(options.endDate || this.element.data('date-enddate'));
		this.setDaysOfWeekDisabled(options.daysOfWeekDisabled || this.element.data('date-days-of-week-disabled'));

		this.fillDow();
		this.fillMonths();
		this.update();
		this.showMode(options.viewMode == 'month' ? 1 : 0);

		if(this.isInline) {
			this.show();
		}
	};

	Datepicker.prototype = {
		constructor: Datepicker,
		_events: [],
		_attachEvents: function() {
			this._detachEvents();
			if(this.isInput) { // single input
				this._events = [
					[this.element, {
						focus: (this.autoShow) ? $.proxy(this.show, this) : function() {},
						keyup: $.proxy(this.options.viewMode == 'month' ? this.update : this.keyup, this),
						keydown: $.proxy(this.keydown, this)
					}]
				];
			} else if(this.component && this.hasInput) { // component: input + button
				this._events = [
					// For components that are not readonly, allow keyboard nav
					[this.element.find('input'), {
						focus: (this.autoShow) ? $.proxy(this.show, this) : function() {},
						keyup: $.proxy(this.options.viewMode == 'month' ? this.update : this.keyup, this),
						keydown: $.proxy(this.keydown, this)
					}],
					[this.component, {
						click: $.proxy(this.show, this)
					}]
				];
			} else if(this.element.is('div')) { // inline datepicker
				this.isInline = true;
			} else {
				this._events = [
					[this.element, {
						click: $.proxy(this.show, this)
					}]
				];
			}

			if(this.disableDblClickSelection) {
				this._events[this._events.length] = [
					this.element, {
						dblclick: function(e) {
							e.preventDefault();
							e.stopPropagation();
							$(this).blur()
						}
					}
				];
			}

			for(var i = 0, el, ev; i < this._events.length; i++) {
				el = this._events[i][0];
				ev = this._events[i][1];
				el.on(ev);
			}
		},
		_detachEvents: function() {
			for(var i = 0, el, ev; i < this._events.length; i++) {
				el = this._events[i][0];
				ev = this._events[i][1];
				el.off(ev);
			}
			this._events = [];
		},

		show: function(e) {
			this.picker.show();
			this.height = this.component ? this.component.outerHeight() : this.element.outerHeight();
			this.update();
			this.place();
			$(window).on('resize', $.proxy(this.place, this));
			if(e) {
				e.stopPropagation();
				e.preventDefault();
			}
			this.element.trigger({
				type: 'show',
				date: this.date
			});
		},

		hide: function(e) {
			if(this.isInline) return;
			if(!this.picker.is(':visible')) return;
			this.picker.hide();
			$(window).off('resize', this.place);
			this.viewMode = this.startViewMode;
			//this.showMode();
			if(!this.isInput) {
				$(document).off('mousedown', this.hide);
			}

			if(
				this.forceParse &&
				(
					this.isInput && this.element.val() ||
					this.hasInput && this.element.find('input').val()
				)
			)
				this.setValue();
			this.element.trigger({
				type: 'hide',
				date: this.date
			});
			var formatted = this.getFormattedDate();
			if(this.inputVal) {
				this.inputVal.val(formatted);
			}
		},

		remove: function() {
			this._detachEvents();
			this.picker.remove();
			delete this.element.data().datepicker;
		},

		getDate: function() {
			var d = this.getUTCDate();
			return new Date(d.getTime() + (d.getTimezoneOffset() * 60000));
		},

		getUTCDate: function() {
			return this.date;
		},

		setDate: function(d) {
			this.setUTCDate(new Date(d.getTime() - (d.getTimezoneOffset() * 60000)));
		},

		setUTCDate: function(d) {
			this.date = d;
			this.setValue();
		},

		setValue: function() {
			var formatted = this.getFormattedDate();
			if(!this.isInput) {
				if(this.component) {
					this.element.find('input').val(formatted);
				}
				this.element.data('date', formatted);
			} else {
				this.element.val(formatted);
			}
		},

		getFormattedDate: function(format) {
			if(format === undefined)
				format = this.format;
			return DPGlobal.formatDate(this.date, format, this.language);
		},

		setStartDate: function(startDate) {
			this.startDate = startDate || -Infinity;
			if(this.startDate !== -Infinity) {
				this.startDate = DPGlobal.parseDate(this.startDate, this.format, this.language);
			}
			this.update();
			this.updateNavArrows();
		},

		setEndDate: function(endDate) {
			this.endDate = endDate || Infinity;
			if(this.endDate !== Infinity) {
				this.endDate = DPGlobal.parseDate(this.endDate, this.format, this.language);
			}
			this.update();
			this.updateNavArrows();
		},

		setDaysOfWeekDisabled: function(daysOfWeekDisabled) {
			this.daysOfWeekDisabled = daysOfWeekDisabled || [];
			if(!$.isArray(this.daysOfWeekDisabled)) {
				this.daysOfWeekDisabled = this.daysOfWeekDisabled.split(/,\s*/);
			}
			this.daysOfWeekDisabled = $.map(this.daysOfWeekDisabled, function(d) {
				return parseInt(d, 10);
			});
			this.update();
			this.updateNavArrows();
		},

		place: function() {
			if(this.isInline) return;
			var zIndex = parseInt(this.element.parents().filter(function() {
				return $(this).css('z-index') != 'auto';
			}).first().css('z-index')) + 10;
			var textbox = this.component ? this.component : this.element;
			var offset = textbox.offset();
			var height = textbox.outerHeight() + parseInt(textbox.css('margin-top'));
			var width = textbox.outerWidth() + parseInt(textbox.css('margin-left'));
			var fullOffsetTop = offset.top + height;
			var offsetLeft = offset.left;
			// if the datepicker is going to be below the window, show it on top of the input
			if((fullOffsetTop + this.picker.outerHeight()) >= $(window).scrollTop() + $(window).height()) {
				fullOffsetTop = offset.top - this.picker.outerHeight();
			}

			// if the datepicker is going to go past the right side of the window, we want
			// to set the right position so the datepicker lines up with the textbox
			if(offset.left + this.picker.width() >= $(window).width()) {
				offsetLeft = (offset.left + width) - this.picker.width();
			}
			this.picker.css({
				top: fullOffsetTop,
				left: offsetLeft,
				zIndex: zIndex
			});
		},

		update: function() {
			var date, fromArgs = false;
			var currentVal = this.isInput ? this.element.val() : this.element.data('date') || this.element.find('input').val();
			if(arguments && arguments.length && (typeof arguments[0] === 'string' || arguments[0] instanceof Date)) {
				date = arguments[0];
				fromArgs = true;
			} else if(!currentVal && this.initialDate != null) { // If value is not set, set it to the initialDate 
				date = this.initialDate
			} else {
				date = this.isInput ? this.element.val() : this.element.data('date') || this.element.find('input').val();
			}

			this.date = DPGlobal.parseDate(date, this.format, this.language);

			if(fromArgs || this.initialDate != null) this.setValue();

			if(this.date < this.startDate) {
				this.viewDate = new Date(this.startDate.valueOf());
			} else if(this.date > this.endDate) {
				this.viewDate = new Date(this.endDate.valueOf());
			} else {
				this.viewDate = new Date(this.date.valueOf());
			}
			this.fill();
		},

		fillDow: function() {
			var dowCnt = this.weekStart,
				html = '<tr>';
			if(this.calendarWeeks) {
				var cell = '<th class="cw">&nbsp;</th>';
				html += cell;
				this.picker.find('.uf-datepicker-days thead tr:first-child').prepend(cell);
			}
			while(dowCnt < this.weekStart + 7) {
				html += '<th class="dow">' + dates[this.language].daysMin[(dowCnt++) % 7] + '</th>';
			}
			html += '</tr>';
			this.picker.find('.uf-datepicker-days thead').append(html);
		},

		fillMonths: function() {
			var html = '',
				i = 0;
			while(i < 12) {
				html += '<span class="month">' + dates[this.language].monthsShort[i++] + '</span>';
			}
			this.picker.find('.uf-datepicker-months td').html(html);
		},

		fill: function() {
			if(this.date == null || this.viewDate == null) {
				return;
			}

			var d = new Date(this.viewDate.valueOf()),
				year = d.getUTCFullYear(),
				month = d.getUTCMonth(),
				dayMonth = d.getUTCDate(),
				hours = d.getUTCHours(),
				minutes = d.getUTCMinutes(),
				startYear = this.startDate !== -Infinity ? this.startDate.getUTCFullYear() : -Infinity,
				startMonth = this.startDate !== -Infinity ? this.startDate.getUTCMonth() : -Infinity,
				endYear = this.endDate !== Infinity ? this.endDate.getUTCFullYear() : Infinity,
				endMonth = this.endDate !== Infinity ? this.endDate.getUTCMonth() : Infinity,
				currentDate = this.date && this.date.valueOf(),
				today = new Date(),
				titleFormat = dates[this.language].titleFormat || dates['en'].titleFormat;
			// this.picker.find('.datepicker-days thead th.date-switch')
			// 			.text(DPGlobal.formatDate(new UTCDate(year, month), titleFormat, this.language));

			this.picker.find('.uf-datepicker-days thead th:eq(1)')
				.text(year + ' 年 ' + dates[this.language].months[month]);
			this.picker.find('.uf-datepicker-hours thead th:eq(1)')
				.text(year + ' 年 ' + dayMonth + ' ' + dates[this.language].months[month]);
			this.picker.find('.uf-datepicker-minutes thead th:eq(1)')
				.text(year + ' 年 ' + dates[this.language].months[month] + dayMonth + ' 日');

			this.picker.find('tfoot th.today')
				.text(dates[this.language].today)
				.toggle(this.todayBtn !== false);
			this.updateNavArrows();
			this.fillMonths();
			var prevMonth = UTCDate(year, month - 1, 28, 0, 0, 0, 0),
				day = DPGlobal.getDaysInMonth(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth());
			prevMonth.setUTCDate(day);
			prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.weekStart + 7) % 7);
			var nextMonth = new Date(prevMonth.valueOf());
			nextMonth.setUTCDate(nextMonth.getUTCDate() + 42);
			nextMonth = nextMonth.valueOf();
			var html = [];
			var clsName;
			while(prevMonth.valueOf() < nextMonth) {
				if(prevMonth.getUTCDay() == this.weekStart) {
					html.push('<tr>');
					if(this.calendarWeeks) {
						// adapted from https://github.com/timrwood/moment/blob/master/moment.js#L128
						var a = new Date(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth(), prevMonth.getUTCDate() - prevMonth.getDay() + 10 - (this.weekStart && this.weekStart % 7 < 5 && 7)),
							b = new Date(a.getFullYear(), 0, 4),
							calWeek = ~~((a - b) / 864e5 / 7 + 1.5);
						html.push('<td class="cw">' + calWeek + '</td>');
					}
				}
				clsName = ' ' + this.onRender(prevMonth) + ' ';
				if(prevMonth.getUTCFullYear() < year || (prevMonth.getUTCFullYear() == year && prevMonth.getUTCMonth() < month)) {
					clsName += ' old';
				} else if(prevMonth.getUTCFullYear() > year || (prevMonth.getUTCFullYear() == year && prevMonth.getUTCMonth() > month)) {
					clsName += ' new';
				}
				// Compare internal UTC date with local today, not UTC today
				if(this.todayHighlight &&
					prevMonth.getUTCFullYear() == today.getFullYear() &&
					prevMonth.getUTCMonth() == today.getMonth() &&
					prevMonth.getUTCDate() == today.getDate()) {
					clsName += ' today';
				}
				if(currentDate && prevMonth.valueOf() == currentDate) {
					clsName += ' active';
				}
				if(prevMonth.valueOf() < this.startDate || prevMonth.valueOf() > this.endDate ||
					$.inArray(prevMonth.getUTCDay(), this.daysOfWeekDisabled) !== -1) {
					clsName += ' disabled';
				}
				html.push('<td class="day' + clsName + '"><span>' + prevMonth.getUTCDate() + '</span></td>');
				if(prevMonth.getUTCDay() == this.weekEnd) {
					html.push('</tr>');
				}
				prevMonth.setUTCDate(prevMonth.getUTCDate() + 1);
			}
			this.picker.find('.uf-datepicker-days tbody').empty().append(html.join(''));

			html = [];
			for(var i = 0; i < 24; i++) {
				var actual = UTCDate(year, month, dayMonth, i);
				clsName = '';
				// We want the previous hour for the startDate
				if((actual.valueOf() + 3600000) < this.startDate || actual.valueOf() > this.endDate) {
					clsName += ' disabled';
				} else if(hours == i) {
					clsName += ' active';
				}
				html.push('<span class="hour' + clsName + '">' + i + ':00</span>');
			}
			this.picker.find('.uf-datepicker-hours td').html(html.join(''));

			html = [];
			for(var i = 0; i < 60; i += this.minuteStep) {
				var actual = UTCDate(year, month, dayMonth, hours, i);
				clsName = '';
				if(actual.valueOf() < this.startDate || actual.valueOf() > this.endDate) {
					clsName += ' disabled';
				} else if(Math.floor(minutes / this.minuteStep) == Math.floor(i / this.minuteStep)) {
					clsName += ' active';
				}
				html.push('<span class="minute' + clsName + '">' + hours + ':' + (i < 10 ? '0' + i : i) + '</span>');
			}
			this.picker.find('.uf-datepicker-minutes td').html(html.join(''));

			var currentYear = this.date && this.date.getUTCFullYear();
			var months = this.picker.find('.uf-datepicker-months')
				.find('th:eq(1)')
				.text(year)
				.end()
				.find('span').removeClass('active');
			if(currentYear && currentYear == year) {
				months.eq(this.date.getUTCMonth()).addClass('active');
			}
			if(year < startYear || year > endYear) {
				months.addClass('disabled');
			}
			if(year == startYear) {
				months.slice(0, startMonth).addClass('disabled');
			}
			if(year == endYear) {
				months.slice(endMonth + 1).addClass('disabled');
			}

			html = '';
			year = parseInt(year / 10, 10) * 10;
			var yearCont = this.picker.find('.uf-datepicker-years')
				.find('th:eq(1)')
				.text(year + '-' + (year + 9))
				.end()
				.find('td');
			year -= 1;
			for(var i = -1; i < 11; i++) {
				html += '<span class="year' + (i == -1 || i == 10 ? ' old' : '') + (currentYear == year ? ' active' : '') + (year < startYear || year > endYear ? ' disabled' : '') + '">' + year + '</span>';
				year += 1;
			}
			yearCont.html(html);
		},

		updateNavArrows: function() {
			var d = new Date(this.viewDate),
				year = d.getUTCFullYear(),
				month = d.getUTCMonth(),
				day = d.getUTCDate(),
				hour = d.getUTCHours();
			switch(this.viewMode) {
				case 0:
					if(this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear() && month <= this.startDate.getUTCMonth() && day <= this.startDate.getUTCDate() && hour <= this.startDate.getUTCHours()) {
						this.picker.find('.prev').css({
							visibility: 'hidden'
						});
					} else {
						this.picker.find('.prev').css({
							visibility: 'visible'
						});
					}
					if(this.endDate !== Infinity && year >= this.endDate.getUTCFullYear() && month >= this.endDate.getUTCMonth() && day >= this.endDate.getUTCDate() && hour >= this.endDate.getUTCHours()) {
						this.picker.find('.next').css({
							visibility: 'hidden'
						});
					} else {
						this.picker.find('.next').css({
							visibility: 'visible'
						});
					}
					break;
				case 1:
					if(this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear() && month <= this.startDate.getUTCMonth() && day <= this.startDate.getUTCDate()) {
						this.picker.find('.prev').css({
							visibility: 'hidden'
						});
					} else {
						this.picker.find('.prev').css({
							visibility: 'visible'
						});
					}
					if(this.endDate !== Infinity && year >= this.endDate.getUTCFullYear() && month >= this.endDate.getUTCMonth() && day >= this.endDate.getUTCDate()) {
						this.picker.find('.next').css({
							visibility: 'hidden'
						});
					} else {
						this.picker.find('.next').css({
							visibility: 'visible'
						});
					}
					break;
				case 2:
					if(this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear() && month <= this.startDate.getUTCMonth()) {
						this.picker.find('.prev').css({
							visibility: 'hidden'
						});
					} else {
						this.picker.find('.prev').css({
							visibility: 'visible'
						});
					}
					if(this.endDate !== Infinity && year >= this.endDate.getUTCFullYear() && month >= this.endDate.getUTCMonth()) {
						this.picker.find('.next').css({
							visibility: 'hidden'
						});
					} else {
						this.picker.find('.next').css({
							visibility: 'visible'
						});
					}
					break;
				case 3:
				case 4:
					if(this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear()) {
						this.picker.find('.prev').css({
							visibility: 'hidden'
						});
					} else {
						this.picker.find('.prev').css({
							visibility: 'visible'
						});
					}
					if(this.endDate !== Infinity && year >= this.endDate.getUTCFullYear()) {
						this.picker.find('.next').css({
							visibility: 'hidden'
						});
					} else {
						this.picker.find('.next').css({
							visibility: 'visible'
						});
					}
					break;
			}
		},

		click: function(e) {
			e.stopPropagation();
			e.preventDefault();

			if($(e.target).hasClass('uf-datepicker-close') || $(e.target).parent().hasClass('uf-datepicker-close')) {
				this.hide();
			}

			var target = $(e.target).closest('span, td, th');
			if(target.length == 1) {
				if(target.is('.disabled')) {
					this.element.trigger({
						type: 'outOfRange',
						date: this.viewDate,
						startDate: this.startDate,
						endDate: this.endDate
					});
					return;
				}
				var tagName = target[0].nodeName.toLowerCase();

				if(tagName == 'th') {
					if(this.options.viewMode == 'month') {
						this.minView = 3;
						this.viewMode = 3;
					}
					switch(target[0].className) {
						case 'date-switch':
							this.showMode(1);
							break;
						case 'prev':
						case 'next':
							var dir = DPGlobal.modes[this.viewMode].navStep * (target[0].className == 'prev' ? -1 : 1);
							switch(this.viewMode) {
								case 0:
									this.viewDate = this.moveHour(this.viewDate, dir);
									break;
								case 1:
									this.viewDate = this.moveDate(this.viewDate, dir);
									break;
								case 2:
									this.viewDate = this.moveMonth(this.viewDate, dir);
									break;
								case 3:
								case 4:
									this.viewDate = this.moveYear(this.viewDate, dir);
									break;
							}
							this.fill();
							break;
						case 'today':
							var date = new Date();
							date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds());

							this.viewMode = this.startViewMode;
							this.showMode(0);
							this._setDate(date);
							break;
					}

				} else if(tagName == 'span' && $(e.target).closest('.day').length == 0) {
					if(!target.is('.disabled')) {
						if(target.is('.month')) {
							if(this.options.viewMode == 'month') {
								this.minView = 3;
								this.viewMode = 3;
							}
							if(this.minView === 3) {
								var month = target.parent().find('span').index(target) || 0;
								var year = this.viewDate.getUTCFullYear(),
									day = 1,
									hours = this.viewDate.getUTCHours(),
									minutes = this.viewDate.getUTCMinutes(),
									seconds = this.viewDate.getUTCSeconds();
								this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
							} else {
								this.viewDate.setUTCDate(1);
								var month = target.parent().find('span').index(target);
								this.viewDate.setUTCMonth(month);
								this.element.trigger({
									type: 'changeMonth',
									date: this.viewDate
								});
							}
						} else if(target.is('.year')) {
							if(this.minView === 4) {
								var year = parseInt(target.text(), 10) || 0;
								var month = 0,
									day = 1,
									hours = this.viewDate.getUTCHours(),
									minutes = this.viewDate.getUTCMinutes(),
									seconds = this.viewDate.getUTCSeconds();
								this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
							} else {
								this.viewDate.setUTCDate(1);
								var year = parseInt(target.text(), 10) || 0;
								this.viewDate.setUTCFullYear(year);
								this.element.trigger({
									type: 'changeYear',
									date: this.viewDate
								});
							}
						} else if(target.is('.hour')) {
							var hours = parseInt(target.text(), 10) || 0;
							var year = this.viewDate.getUTCFullYear(),
								month = this.viewDate.getUTCMonth(),
								day = this.viewDate.getUTCDate(),
								minutes = this.viewDate.getUTCMinutes(),
								seconds = this.viewDate.getUTCSeconds();
							this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
						} else if(target.is('.minute')) {
							var minutes = parseInt(target.text().substr(target.text().indexOf(':') + 1), 10) || 0;
							var year = this.viewDate.getUTCFullYear(),
								month = this.viewDate.getUTCMonth(),
								day = this.viewDate.getUTCDate(),
								hours = this.viewDate.getUTCHours(),
								seconds = this.viewDate.getUTCSeconds();
							this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
						}

						if(this.viewMode != 0) {
							// if(this.options.viewMode == 'month') {
							// 	this.viewMode = 3;
							// }
							var oldViewMode = this.viewMode;
							this.showMode(-1);
							this.fill();
							if(oldViewMode == this.viewMode && this.autoclose) {
								this.hide();
							}
						} else {
							this.fill();
							if(this.autoclose) {
								this.hide();
							}
						}
					}
				} else if(tagName == 'span' && $(e.target).closest('.day').length > 0) {
					var el = $(e.target).closest('.day');
					if(!el.hasClass('disabled')) {
						var day = parseInt(target.text(), 10) || 1;
						var year = this.viewDate.getUTCFullYear(),
							month = this.viewDate.getUTCMonth(),
							hours = this.viewDate.getUTCHours(),
							minutes = this.viewDate.getUTCMinutes(),
							seconds = this.viewDate.getUTCSeconds();
						if(el.is('.old')) {
							if(month === 0) {
								month = 11;
								year -= 1;
							} else {
								month -= 1;
							}
						} else if(el.is('.new')) {
							if(month == 11) {
								month = 0;
								year += 1;
							} else {
								month += 1;
							}
						}
						this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
					}

					var oldViewMode = this.viewMode;
					this.showMode(-1);

					this.fill();
					if(oldViewMode == this.viewMode && this.autoclose) {
						this.hide();
					}

				}
			}
		},

		_setDate: function(date, which) {

			if(!which || which == 'date')
				this.date = date;
			if(!which || which == 'view')
				this.viewDate = date;
			this.fill();
			this.setValue();
			this.element.trigger({
				type: 'changeDate',
				date: this.date
			});
			var element;
			if(this.isInput) {
				element = this.element;
			} else if(this.component) {
				element = this.element.find('input');
			}
			if(element) {
				if(this.options.onChange) {
					this.options.onChange(element.val());
				} else {
					element.change();
				}
				if(this.autoclose && (!which || which == 'date')) {
					// this.hide();
				}
				if($('body .error-date').length > 0) {
					$('body .error-date').remove();
				}
			}
		},
		check: function(date) {
			var result = date.match(/((^((1[8-9]\d{2})|([2-9]\d{3}))(-)(10|12|0?[13578])(-)(3[01]|[12][0-9]|0?[1-9])$)|(^((1[8-9]\d{2})|([2-9]\d{3}))(-)(11|0?[469])(-)(30|[12][0-9]|0?[1-9])$)|(^((1[8-9]\d{2})|([2-9]\d{3}))(-)(0?2)(-)(2[0-8]|1[0-9]|0?[1-9])$)|(^([2468][048]00)(-)(0?2)(-)(29)$)|(^([3579][26]00)(-)(0?2)(-)(29)$)|(^([1][89][0][48])(-)(0?2)(-)(29)$)|(^([2-9][0-9][0][48])(-)(0?2)(-)(29)$)|(^([1][89][2468][048])(-)(0?2)(-)(29)$)|(^([2-9][0-9][2468][048])(-)(0?2)(-)(29)$)|(^([1][89][13579][26])(-)(0?2)(-)(29)$)|(^([2-9][0-9][13579][26])(-)(0?2)(-)(29)$))/);
			if(result == null) {
				/*if($('body .error-date').length == 0) {
					$('<span>').addClass('error-date').css({
						'position': 'absolute',
						'font-size': '12px',
						'color': 'red',
						'background': '#fff'
					}).html('日期格式:2018-09-06').appendTo('body');
				}
				$('body .error-date').css({
					'left': this.element.offset().left + this.element.outerWidth(true) + 5 + 'px',
					'top': this.element.offset().top + 8 + 'px'
				});*/
				return false;
			} else {
				if($('body .error-date').length > 0) {
					$('body .error-date').remove();
				}
				this.inputVal.val(date);
				this.element.data('date', date);
				this.date = DPGlobal.parseDate(date, this.format, this.language);

				if(this.date < this.startDate) {
					this.viewDate = new Date(this.startDate.valueOf());
				} else if(this.date > this.endDate) {
					this.viewDate = new Date(this.endDate.valueOf());
				} else {
					this.viewDate = new Date(this.date.valueOf());
				}
				this.fill();
			}
		},
		moveHour: function(date, dir) {
			if(!dir) return date;
			var new_date = new Date(date.valueOf());
			dir = dir > 0 ? 1 : -1;
			new_date.setUTCHours(new_date.getUTCHours() + dir);
			return new_date;
		},

		moveDate: function(date, dir) {
			if(!dir) return date;
			var new_date = new Date(date.valueOf());
			dir = dir > 0 ? 1 : -1;
			new_date.setUTCDate(new_date.getUTCDate() + dir);
			return new_date;
		},

		moveMonth: function(date, dir) {
			if(!dir) return date;
			var new_date = new Date(date.valueOf()),
				day = new_date.getUTCDate(),
				month = new_date.getUTCMonth(),
				mag = Math.abs(dir),
				new_month, test;
			dir = dir > 0 ? 1 : -1;
			if(mag == 1) {
				test = dir == -1
					// If going back one month, make sure month is not current month
					// (eg, Mar 31 -> Feb 31 == Feb 28, not Mar 02)
					?
					function() {
						return new_date.getUTCMonth() == month;
					}
					// If going forward one month, make sure month is as expected
					// (eg, Jan 31 -> Feb 31 == Feb 28, not Mar 02)
					:
					function() {
						return new_date.getUTCMonth() != new_month;
					};
				new_month = month + dir;
				new_date.setUTCMonth(new_month);
				// Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11
				if(new_month < 0 || new_month > 11)
					new_month = (new_month + 12) % 12;
			} else {
				// For magnitudes >1, move one month at a time...
				for(var i = 0; i < mag; i++)
					// ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...
					new_date = this.moveMonth(new_date, dir);
				// ...then reset the day, keeping it in the new month
				new_month = new_date.getUTCMonth();
				new_date.setUTCDate(day);
				test = function() {
					return new_month != new_date.getUTCMonth();
				};
			}
			// Common date-resetting loop -- if date is beyond end of month, make it
			// end of month
			while(test()) {
				new_date.setUTCDate(--day);
				new_date.setUTCMonth(new_month);
			}
			return new_date;
		},

		moveYear: function(date, dir) {
			return this.moveMonth(date, dir * 12);
		},

		dateWithinRange: function(date) {
			return date >= this.startDate && date <= this.endDate;
		},
		keyup: function(e) {
			var newDate = this.component.val();
			this.check(newDate);
		},
		keydown: function(e) {
			if(this.picker.is(':not(:visible)')) {
				if(e.keyCode == 27) // allow escape to hide and re-show picker
					this.show();
				return;
			}
			var dateChanged = false,
				dir, day, month,
				newDate, newViewDate;
			switch(e.keyCode) {
				case 27: // escape
					this.hide();
					e.preventDefault();
					break;
				case 37: // left
				case 39: // right
					if(!this.keyboardNavigation) break;
					dir = e.keyCode == 37 ? -1 : 1;
					if(e.ctrlKey) {
						newDate = this.moveYear(this.date, dir);
						newViewDate = this.moveYear(this.viewDate, dir);
					} else if(e.shiftKey) {
						newDate = this.moveMonth(this.date, dir);
						newViewDate = this.moveMonth(this.viewDate, dir);
					} else {
						newDate = new Date(this.date.valueOf());
						newDate.setUTCDate(this.date.getUTCDate() + dir);
						newViewDate = new Date(this.viewDate.valueOf());
						newViewDate.setUTCDate(this.viewDate.getUTCDate() + dir);
					}
					if(this.dateWithinRange(newDate)) {
						this.date = newDate;
						this.viewDate = newViewDate;
						this.setValue();
						this.update();
						e.preventDefault();
						dateChanged = true;
					}
					break;
				case 38: // up
				case 40: // down
					if(!this.keyboardNavigation) break;
					dir = e.keyCode == 38 ? -1 : 1;
					if(e.ctrlKey) {
						newDate = this.moveYear(this.date, dir);
						newViewDate = this.moveYear(this.viewDate, dir);
					} else if(e.shiftKey) {
						newDate = this.moveMonth(this.date, dir);
						newViewDate = this.moveMonth(this.viewDate, dir);
					} else {
						newDate = new Date(this.date.valueOf());
						newDate.setUTCDate(this.date.getUTCDate() + dir * 7);
						newViewDate = new Date(this.viewDate.valueOf());
						newViewDate.setUTCDate(this.viewDate.getUTCDate() + dir * 7);
					}
					if(this.dateWithinRange(newDate)) {
						this.date = newDate;
						this.viewDate = newViewDate;
						this.setValue();
						this.update();
						e.preventDefault();
						dateChanged = true;
					}
					break;
				case 13: // enter
					this.hide();
					e.preventDefault();
					break;
				case 9: // tab
					this.hide();
					break;
			}
			if(dateChanged) {
				this.element.trigger({
					type: 'changeDate',
					date: this.date
				});
				var element;
				if(this.isInput) {
					element = this.element;
				} else if(this.component) {
					element = this.element.find('input');
				}
				if(element) {
					element.change();
				}
			}
		},

		showMode: function(dir) {
			if(dir) {
				var newViewMode = Math.max(0, Math.min(DPGlobal.modes.length - 1, this.viewMode + dir));
				if(newViewMode >= this.minView && newViewMode <= this.maxView) {
					this.viewMode = newViewMode;
				}
			}
			/*
				vitalets: fixing bug of very special conditions:
				jquery 1.7.1 + webkit + show inline datepicker in bootstrap popover.
				Method show() does not set display css correctly and datepicker is not shown.
				Changed to .css('display', 'block') solve the problem.
				See https://github.com/vitalets/x-editable/issues/37

				In jquery 1.7.2+ everything works fine.
			*/
			//this.picker.find('>div').hide().filter('.datepicker-'+DPGlobal.modes[this.viewMode].clsName).show();
			this.picker.find('>div').hide().filter('.uf-datepicker-' + DPGlobal.modes[this.viewMode].clsName).css('display', 'block');
			this.updateNavArrows();
		},
		reset: function(e) {
			this._setDate(null, 'date');
		}
	};

	$.fn.ufDatepicker = function(option) {
		var args = Array.apply(null, arguments);
		args.shift();
		return this.each(function() {
			var $this = $(this),
				data = $this.data('datepicker'),
				options = typeof option == 'object' && option;

			if(!data) {
				$this.data('datepicker', (data = new Datepicker(this, $.extend({}, $.fn.ufDatepicker.defaults, options))));
			}
			if(typeof option == 'string' && typeof data[option] == 'function') {
				data[option].apply(data, args);
			}
		});
	};

	$.fn.ufDatepicker.defaults = {
		onRender: function(date) {
			return '';
		}
	};
	$.fn.ufDatepicker.Constructor = Datepicker;
	var dates = $.fn.ufDatepicker.dates = {
		'en': {
			days: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
			daysShort: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"],
			daysMin: ["日", "一", "二", "三", "四", "五", "六"],
			months: ["01 月", "02 月", "03 月", "04 月", "05 月", "06 月", "07 月", "08 月", "09 月", "10 月", "11 月", "12 月"],
			monthsShort: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一", "十二"],
			today: '今天',
			titleFormat: "MM yyyy"
		}
	};

	var DPGlobal = {
		modes: [{
			clsName: 'minutes',
			navFnc: 'Hours',
			navStep: 1
		}, {
			clsName: 'hours',
			navFnc: 'Date',
			navStep: 1
		}, {
			clsName: 'days',
			navFnc: 'Month',
			navStep: 1
		}, {
			clsName: 'months',
			navFnc: 'FullYear',
			navStep: 1
		}, {
			clsName: 'years',
			navFnc: 'FullYear',
			navStep: 10
		}],
		isLeapYear: function(year) {
			return(((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));
		},
		getDaysInMonth: function(year, month) {
			return [31, (DPGlobal.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
		},
		validParts: /hh?|ii?|ss?|dd?|mm?|MM?|yy(?:yy)?/g,
		nonpunctuation: /[^ -\/:-@\[\u3400-\u9fff-`{-~\t\n\r]+/g,
		parseFormat: function(format) {
			// IE treats \0 as a string end in inputs (truncating the value),
			// so it's a bad format delimiter, anyway
			var separators = format.replace(this.validParts, '\0').split('\0'),
				parts = format.match(this.validParts);
			if(!separators || !separators.length || !parts || parts.length === 0) {
				throw new Error("Invalid date format.");
			}
			return {
				separators: separators,
				parts: parts
			};
		},
		parseDate: function(date, format, language) {
			if(date instanceof Date) return new Date(date.valueOf() - date.getTimezoneOffset() * 60000);
			if(/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(date)) {
				format = this.parseFormat('yyyy-mm-dd');
			}
			if(/^\d{4}\-\d{1,2}\-\d{1,2}[T ]\d{1,2}\:\d{1,2}$/.test(date)) {
				format = this.parseFormat('yyyy-mm-dd hh:ii');
			}
			if(/^\d{4}\-\d{1,2}\-\d{1,2}[T ]\d{1,2}\:\d{1,2}\:\d{1,2}[Z]{0,1}$/.test(date)) {
				format = this.parseFormat('yyyy-mm-dd hh:ii:ss');
			}
			if(/^[-+]\d+[dmwy]([\s,]+[-+]\d+[dmwy])*$/.test(date)) {
				var part_re = /([-+]\d+)([dmwy])/,
					parts = date.match(/([-+]\d+)([dmwy])/g),
					part, dir;
				date = new Date();
				for(var i = 0; i < parts.length; i++) {
					part = part_re.exec(parts[i]);
					dir = parseInt(part[1]);
					switch(part[2]) {
						case 'd':
							date.setUTCDate(date.getUTCDate() + dir);
							break;
						case 'm':
							date = Datetimepicker.prototype.moveMonth.call(Datetimepicker.prototype, date, dir);
							break;
						case 'w':
							date.setUTCDate(date.getUTCDate() + dir * 7);
							break;
						case 'y':
							date = Datetimepicker.prototype.moveYear.call(Datetimepicker.prototype, date, dir);
							break;
					}
				}
				return UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
			}
			var parts = date && date.match(this.nonpunctuation) || [],
				date = new Date(),
				parsed = {},
				setters_order = ['hh', 'h', 'ii', 'i', 'ss', 's', 'yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'd', 'dd'],
				setters_map = {
					hh: function(d, v) {
						return d.setUTCHours(v);
					},
					h: function(d, v) {
						return d.setUTCHours(v);
					},
					ii: function(d, v) {
						return d.setUTCMinutes(v);
					},
					i: function(d, v) {
						return d.setUTCMinutes(v);
					},
					ss: function(d, v) {
						return d.setUTCSeconds(v);
					},
					s: function(d, v) {
						return d.setUTCSeconds(v);
					},
					yyyy: function(d, v) {
						return d.setUTCFullYear(v);
					},
					yy: function(d, v) {
						return d.setUTCFullYear(2000 + v);
					},
					m: function(d, v) {
						v -= 1;
						while(v < 0) v += 12;
						v %= 12;
						d.setUTCMonth(v);
						while(d.getUTCMonth() != v)
							d.setUTCDate(d.getUTCDate() - 1);
						return d;
					},
					d: function(d, v) {
						return d.setUTCDate(v);
					}
				},
				val, filtered, part;
			setters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];
			setters_map['dd'] = setters_map['d'];
			date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0); //date.getHours(), date.getMinutes(), date.getSeconds());
			if(parts.length == format.parts.length) {
				for(var i = 0, cnt = format.parts.length; i < cnt; i++) {
					val = parseInt(parts[i], 10);
					part = format.parts[i];
					if(isNaN(val)) {
						switch(part) {
							case 'MM':
								filtered = $(dates[language].months).filter(function() {
									var m = this.slice(0, parts[i].length),
										p = parts[i].slice(0, m.length);
									return m == p;
								});
								val = $.inArray(filtered[0], dates[language].months) + 1;
								break;
							case 'M':
								filtered = $(dates[language].monthsShort).filter(function() {
									var m = this.slice(0, parts[i].length),
										p = parts[i].slice(0, m.length);
									return m == p;
								});
								val = $.inArray(filtered[0], dates[language].monthsShort) + 1;
								break;
						}
					}
					parsed[part] = val;
				}
				for(var i = 0, s; i < setters_order.length; i++) {
					s = setters_order[i];
					if(s in parsed && !isNaN(parsed[s]))
						setters_map[s](date, parsed[s])
				}
			}
			return date;
		},
		formatDate: function(date, format, language) {
			if(date == null) {
				return '';
			}
			var val = {
				h: date.getUTCHours(),
				i: date.getUTCMinutes(),
				s: date.getUTCSeconds(),
				d: date.getUTCDate(),
				m: date.getUTCMonth() + 1,
				M: dates[language].monthsShort[date.getUTCMonth()],
				MM: dates[language].months[date.getUTCMonth()],
				yy: date.getUTCFullYear().toString().substring(2),
				yyyy: date.getUTCFullYear()
			};
			val.hh = (val.h < 10 ? '0' : '') + val.h;
			val.ii = (val.i < 10 ? '0' : '') + val.i;
			val.ss = (val.s < 10 ? '0' : '') + val.s;
			val.dd = (val.d < 10 ? '0' : '') + val.d;
			val.mm = (val.m < 10 ? '0' : '') + val.m;
			var date = [],
				seps = $.extend([], format.separators);
			for(var i = 0, cnt = format.parts.length; i < cnt; i++) {
				if(seps.length)
					date.push(seps.shift())
				date.push(val[format.parts[i]]);
			}
			return date.join('');
		},
		convertViewMode: function(viewMode) {
			switch(viewMode) {
				case 4:
				case 'decade':
					viewMode = 4;
					break;
				case 3:
				case 'year':
					viewMode = 3;
					break;
				case 2:
				case 'month':
					viewMode = 2;
					break;
				case 1:
				case 'day':
					viewMode = 1;
					break;
				case 0:
				case 'hour':
					viewMode = 0;
					break;
			}

			return viewMode;
		},
		headTemplate: '<thead>' +
			'<tr>' +
			'<th class="prev"><i class="icon-angle-left"/></th>' +
			'<th colspan="5" class="date-switch"></th>' +
			'<th class="next"><i class="icon-angle-right"/></th>' +
			'</tr>' +
			'</thead>',
		contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>',
		footTemplate: '<tfoot><tr><th colspan="7" class="today"></th></tr></tfoot>'
	};
	DPGlobal.template = '<div class="uf-datepicker-dropdown">' +
		'<div class="uf-datepicker-minutes">' +
		'<table class=" table-condensed">' +
		DPGlobal.headTemplate +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="uf-datepicker-hours">' +
		'<table class=" table-condensed">' +
		DPGlobal.headTemplate +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="uf-datepicker-days">' +
		'<table class=" table-condensed">' +
		DPGlobal.headTemplate +
		'<tbody></tbody>' +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="uf-datepicker-months">' +
		'<table class="table-condensed">' +
		DPGlobal.headTemplate +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="uf-datepicker-years">' +
		'<table class="table-condensed">' +
		DPGlobal.headTemplate +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<a class="button uf-datepicker-close tiny alert right" style="width:auto;"><i class="fa fa-remove fa-times fi-x"></i></a>' +
		'</div>';

	$.fn.ufDatepicker.DPGlobal = DPGlobal;

}(window.jQuery);
(function($) {
	$.fn.outer = function() {
		var outerWidth = $(this).outerWidth(true) - $(this).width();
		var outerHeight = $(this).outerHeight(true) - $(this).height();
		return {
			'width': outerWidth,
			'height': outerHeight
		}
	};
	$.fn.getObj = function() {
		var obj = {};
		if($(this).hasClass('uf-buttonedit')) {
			var btnedit = $(this);
			obj.setValue = function(val) {
				btnedit.find('.uf-buttonedit-input').val(val);
			}

			obj.getValue = function() {
				return btnedit.find('.uf-buttonedit-input').val();
			}
			obj.setEnabled = function(val) {
				var timeoutid = setTimeout(function() {
					if(!val && val != "true") {
						btnedit.addClass('uf-buttonedit-disabled');
					} else {
						btnedit.removeClass('uf-buttonedit-disabled');
					}
					window.clearTimeout(timeoutid);
				}, 300);

			}
		} else if($(this).hasClass('uf-textarea')) {
			var btnedit = $(this);
			obj.setValue = function(val) {
				btnedit.find('.uf-textarea-input').val(val);
			}

			obj.getValue = function() {
				return btnedit.find('.uf-textarea-input').val();
			}
			obj.setEnabled = function(val) {
				var timeoutid = setTimeout(function() {
					if(!val && val != "true") {
						btnedit.addClass('uf-textarea-disabled');
					} else {
						btnedit.removeClass('uf-textarea-disabled');
					}
					window.clearTimeout(timeoutid);
				}, 300);

			}
		} else if($(this).hasClass('uf-treecombox')) {
			var combox = $(this);
			var id = $(this).attr('id');
			input = combox.find('.uf-combox-input');
			inputVal = combox.find('.uf-combox-value');
			inputText = combox.find('.uf-combox-text');
			obj.clear = function() {
				input.val('');
				inputVal.val('');
				inputText.val('');
				input.removeAttr('title');
			}
			obj.setValue = function(val, text) {
				if(val == inputVal.val()) {
					return false;
				}
				input.val(text);
				//guohx 修改初始化下拉为停用需要有样式
				if(text.substring(text.length - 5, text.length) == "(已停用)") {
					input.addClass('uf-red').val(text);
				}
				inputVal.val(val);
				inputText.val(text);
				input.attr('title', text);
				var options = $.readCache(id).options;
				if(options.onChange) {
					var node = obj.getItem();
					if(!$.isNull(node)) {
						options.onChange(combox, node);
					}

				}
			}
			obj.getValue = function() {
				return inputVal.val();
			}
			obj.getText = function() {
				return inputText.val();
			}
			obj.val = function(v) {

				if($.isNull(v)) {
					obj.clear();
					return inputVal.val();
				} else {
					if((v + '').trim() == '') {
						obj.clear();
						return false;
					}

					var options = $.readCache(id).options;
					var treeId = id + '_tree';
					var idField = options['idField'];
					var textField = options['textField'];
					var treeObj = $.fn.zTree.getZTreeObj(treeId);
					var node = treeObj.getNodeByParam(idField, v, null);
					//CWYXM-19498 单位级财政项目关联的项目类别编号在单位级不存在时，该财政项目修i改界面显示的项目类别默认为第一项 guohx  20200824
					// 当设置v 不在下拉列表范围内 不应赋值列表第一个 如有需要，后期请加参数区分
					if ($.isNull(node)) {
						// var nodes = treeObj.getNodes();
						// if(nodes.length > 0) {
						// 	node = nodes[0];
						// } else {
						return false;
						// }
					}
					if(node.enabled == '0') {
						var text = node[textField] + "(已停用)";
					} else {
						var text = node[textField];
					}

					v = node[idField];
					if(node.isParent && options.leafRequire) {
						function getNodeChild(nd) {
							if(!nd.children) {
								v = nd.id;
								text = nd[textField];
								return false;
							}
							getNodeChild(nd.children[0]);
						}
						getNodeChild(node);
					}
					/*					if(text.substr(0,v.length) != v){
											text = v+' '+text;
										}*/
					obj.setValue(v, text);
				}
			}
			obj.select = function(idx) {
				var options = $.readCache(id).options;
				var treeId = id + '_tree';
				var idField = options['idField'];
				var textField = options['textField'];
				var treeObj = $.fn.zTree.getZTreeObj(treeId);
				var tId = id + '_tree_' + idx;
				var node = treeObj.getNodeByTId(tId);
				if(node == null || node == undefined) {
					alert('超出范围！');
					return false;
				}
				obj.setValue(node[idField], node[textField]);
			}
			obj.getItem = function() {
				var options = $.readCache(id).options;
				var treeId = id + '_tree';
				var idField = options['idField'];
				var textField = options['textField'];
				var val = inputVal.val();
				var treeObj = $.fn.zTree.getZTreeObj(treeId);
				var node = treeObj.getNodeByParam(idField, val, null);
				return node;
			}
			obj.load = function(data) {
				var opts = $.data($('#' + id)[0], 'options');
				var This = opts.This;
				This.options.data = data;
				var setPopupItem = opts.This.setPopupItem;
				setPopupItem(This);
			}
			obj.ajax = function(url, argu) {
				argu = argu || {};
				$.ufajax(url, 'get', argu, function(result) {
					if(!$.isNull(result.data)) {
						obj.load(result.data);
					} else {
						alert('错误的数据格式！');
					}
				});
			}
			obj.setEnabled = function(ft) {
				if(ft) {
					combox.removeClass('uf-combox-disabled');
				} else {
					combox.addClass('uf-combox-disabled');
				}

			}
		} else if($(this).hasClass('uf-combox') && !$(this).hasClass('uf-treecombox')) {
			var combox = $(this);
			var id = $(this).attr('id');
			var popup = $('#' + id + '_popup');

			input = $('#' + id + '_input');
			inputVal = $('#' + id + '_value');
			inputText = $('#' + id + '_text');
			obj.clear = function() {
				input.val('');
				inputVal.val('');
				inputText.val('');
				input.removeAttr('title');
			}
			obj.setValue = function(val, text, dochange) {
				if(dochange != false) dochange = true;
				if(val == inputVal.val()) {
					return false;
				}
				input.val(text);
				inputVal.val(val);
				inputText.val(text);
				input.attr('title', text);
				var options = $.readCache(id).options;
				if(options.onChange && dochange) {
					var item = obj.getItem();
					if(!$.isNull(item)) {
						options.onChange(combox, item);
					}
				}
			}
			obj.getValue = function() {
				return inputVal.val();
			}
			obj.getText = function() {
				return inputText.val();
			}
			obj.val = function(v) {

				if($.isNull(v)) {
					obj.clear();
					return inputVal.val();
				} else {
					if((v + '').trim() == '') {
						obj.clear();
						return false;
					}
					var options = $.readCache(id).options;
					var textField = options['textField'];
					var idField = options['idField'];
					var item = $.readCache(id)[v];
					if($.isNull(item)) {
						item = options.data[0];
					}
					if(options.data.length > 0) {
						var text = item[textField];
						var v = item[idField];
						/*						if(text.substr(0,v.length) != v){
													text = v+' '+text;
												}*/
						obj.setValue(v, text);
					}
				}
			}
			obj.select = function(idx) {
				var options = $.readCache(id).options;
				var item = options.data[idx];
				obj.setValue(item[options.idField], item[options.textField]);
			}
			obj.getItem = function() {
				var val = obj.getValue();
				return $.readCache(id)[val];
			}
			obj.load = function(data) {
				for(key in $.readCache(id)) {
					if(key != 'This' && key != 'options') {
						delete $.readCache(id)[key];
					}
				};
				var This = $.readCache(id).This;
				This.options.data = data;
				var setPopupItem = This.setPopupItem;
				setPopupItem(This);
			}
			obj.ajax = function(url, argu) {
				argu = argu || {};
				$.ufajax(url, 'get', argu, function(result) {
					if(!$.isNull(result.data)) {
						obj.load(result.data);
					} else {
						alert('错误的数据格式！');
					}
				});
			}
			obj.setEnabled = function(ft) {
				if(ft) {
					combox.removeClass('uf-combox-disabled');
				} else {
					combox.addClass('uf-combox-disabled');
				}

			}
		} else if($(this).hasClass('uf-textboxlist')) {
			var combox = $(this);
			input = combox.find('.uf-textboxlist-input');
			inputVal = combox.find('.uf-textboxlist-value');
			inputText = combox.find('.uf-textboxlist-text');

			obj.setValue = function(val, text) {
				this.clear();
				var self = combox.data('items').This;
				var addItem = self.addItem;
				var valArray = val.split(',');
				var textArray = text.split(',');
				for(var i = 0; i < valArray.length; i++) {
					addItem(self, valArray[i], textArray[i]);
				}
			}
			obj.getValue = function() {
				return inputVal.val();
			}
			obj.getText = function() {
				return inputText.val();
			}
			obj.val = function(v) {
				this.clear();
				if(v == undefined) {
					return inputVal.val();
				} else {
					var options = combox.data('items').options;
					var id = options['id'];
					var treeId = id + '_tree';
					var idField = options['idField'];
					var textField = options['textField'];
					var treeObj = $.fn.zTree.getZTreeObj(treeId);
					var valArray = v.split(',');
					var self = combox.data('items').This;
					for(var i = 0; i < valArray.length; i++) {
						var node = treeObj.getNodeByParam(idField, valArray[i], null);
						self.addItem(self, node[idField], node[textField]);
					}
				}
			}
			obj.clear = function() {
				var This = combox.data('items').This;
				if(This.treeObj) {
					This.treeObj.checkAllNodes(false);
				}
				This.clear();
			}
			obj.getItem = function() {
				var options = combox.data('items').options;
				var id = options['id'];
				var treeId = id + '_tree';
				var idField = options['idField'];
				var textField = options['textField'];
				var val = inputVal.val();
				var treeObj = $.fn.zTree.getZTreeObj(treeId);
				var valArray = val.split(',');
				var nodes = [];
				for(var i = 0; i < valArray.length; i++) {
					var node = treeObj.getNodeByParam(idField, valArray[i], null);
					nodes.push(node);
				}
				return nodes;
			}
			obj.load = function(data) {
				var This = combox.data('items').This;
				This.options.data = data;
				var setPopupItem = This.setPopupItem;
				setPopupItem(This);
			}
			obj.ajax = function(url, argu) {
				argu = argu || {};
				$.ufajax(url, 'get', argu, function(result) {
					if(!$.isNull(result.data)) {
						obj.load(result.data);
					} else {
						alert('错误的数据格式！');
					}
				});
			}
			obj.setEnabled = function(ft) {
				if(ft) {
					combox.removeClass('uf-combox-disabled');
					input.removeAttribute('readonly');
				} else {
					combox.addClass('uf-combox-disabled');
					input.attr('readonly', 'readonly');
				}

			}
		} else if($(this).hasClass('uf-datagrid')) {
			var grid = $(this);
			obj.getData = function() {
				//var data = grid.data(grid.attr('id') + '_data');
				var items = $.data(grid[0], 'data');
				//var This = $.data(grid[0], 'options').This;
				var newData = [];
				var colInfo = items.This.colInfo,
					colLen = colInfo.length;
				grid.find('.uf-grid-body-view tr').each(function() {
					var rowid = $(this).attr('id');

					if(!$.isNull(rowid)) {
						var item = items[rowid];
						if(!$.isNull(item)) {
							var bFind = false;
							for(var i = 0; i < colLen; i++) {
								var field = colInfo[i].field;
								if(!$.isNull(item[field])) {
									bFind = true;
									break;
								}

							}
							if(bFind) {
								newData.push(item);
							}
						}
					}
				});

				return newData;
			}

			obj.search = function(searchText) {
				if(!$.data(grid[0], 'olddata')) {
					$.data(grid[0], 'olddata', this.getData());
				};
				var data = $.data(grid[0], 'olddata');
				if(searchText == '') {
					this.load(data);
					return false;
				}
				var newData = [];
				$.each(data, function(idx, item) {
					var bInclude = false;
					$.each(item, function(k, v) {
						if(!$.isNull(v)) {
							if((v + '').indexOf(searchText) >= 0) {
								bInclude = true;
								return false;
							}
						}
					});
					if(bInclude) {
						console.log(item);
						newData.push($.extend(true, {}, item));
					}
				});
				this.load(newData);
			}
			obj.getCheckData = function() {
				var data = $.data(grid[0], 'data');
				var checkData = [];
				grid.find('input.check-item:checked').each(function(idx) {
					var rowid = $(this).attr('rowid');
					checkData.push(obj.getRowByTId(rowid));
				});
				return checkData;
			}
			obj.getRowByTId = function(rowid) {
				var data = $.data(grid[0], 'data');

				return data[rowid];
			}
			obj.add = function(rowdata) {
				rowdata = rowdata || {};
				var cachId = grid.attr('id') + '_data';
				var This = $.data(grid[0], 'data').This;
				var addRow = This.addRow;
				var newid = addRow(This, rowdata);
				This.lockBodyColumn(This, $('tr[id="' + newid + '"]'));
				obj.showScroll();
				if(obj.editmod != 'insert') {
					This.showRowById(This, $('tr[id="' + newid + '"]'));
				}
				return newid;
			}
			obj.insert = function(trid, rowdata) {
				obj.editmod = 'insert';
				var cachId = grid.attr('id') + '_data';
				var This = $.data(grid[0], 'data').This;
				var newId = obj.add(rowdata);
				This.gridBodyView.find('#' + newId).insertAfter(This.gridBodyView.find('#' + trid));
				var newLockCol = This.gridBodyLock.find('#' + newId);
				if(newLockCol.length > 0) {
					newLockCol.insertAfter(This.gridBodyLock.find('#' + trid));
				}
				This.showRowById(This, $('tr[id="' + newId + '"]'));
				obj.editmod = '';
			}
			obj.del = function(rowid) {
				var cachId = grid.attr('id') + '_data';
				var fn = $.data(grid[0], 'data');
				var rowData = fn[rowid];
				var options = fn.This.options;
				$('tr[id=' + rowid + '],tr[pid=' + rowData[options.idField] + ']').remove();
				//fn.This.showEdit($('tr[id="' + rowid + '"]'));
				fn.This.hideEdit();
				obj.showScroll();
			}
			obj.load = function(data) {
				if($.isNull(data)) return false;
				var cachId = grid.attr('id') + '_data';
				var This = $.data(grid[0], 'data').This;
				This.options.data = data;

				This.setTbody(This);
				This.bodyHeight = This.bearer.height();
				obj.setBodyHeight(This);
			}
			obj.clear = function() {
				obj.load([]);
			}
			obj.ajax = function(url, argu) {
				argu = argu || {};
				$.ufajax(url, 'get', argu, function(result) {
					if(!$.isNull(result.data)) {
						obj.load(result.data);
					} else {
						alert('错误的数据格式！');
					}
				});
			}
			obj.showScroll = function() {
				var cachId = grid.attr('id') + '_data';
				var This = $.data(grid[0], 'data').This;
				This.setLock(This);
			}
			obj.hideDetail = function() {
				var cachId = grid.attr('id') + '_data';
				var This = $.data(grid[0], 'data').This;
				This.hideDetail(This);
			}
			obj.showDetail = function(rowid, detailEle) {
				var cachId = grid.attr('id') + '_data';
				var This = $.data(grid[0], 'data').This;
				return This.showDetail(This, rowid, detailEle);
			}
			obj.isDetailShow = function(rowid) {
				if($.isNull(rowid)) {
					alert('isDetailShow使用错误');
					return false;
				}
				var $expandRow = grid.find('.uf-grid-body-view tr[id="' + rowid + '"].uf-grid-expand-row');
				return $expandRow.length > 0;
			}
			obj.setEnabled = function(ft) {
				if(ft) {
					grid.removeClass('uf-datagrid-disabled');
				} else {
					grid.addClass('uf-datagrid-disabled');
				}

			}
			obj.setBodyHeight = function(height) {
				if(height) {
					var This = $.data(grid[0], 'data').This;
					if(This) {
						This.bodyHeight = height;
						This.setBodyHeight(This);
					}
				}
			}
			obj.edit = function(trId) {
				var This = $.data(grid[0], 'data').This;
				if(This) {
					This.showEdit($('tr[id="' + trId + '"]'));
				}
			}
			obj.endEditing = function() {
				var This = $.data(grid[0], 'data').This;
				if(This) {
					This.hideEdit();
				}
			}
		} else if($(this).attr('data-toggle') == 'fixedTop') {
			var fixedTop = $('#' + $(this).attr('id') + '-fixed-box');
			obj.scroll = function(st) {
				fixedTop.attr('scroll', st);
			}
		} else if($(this).hasClass('uf-timeline')) {
			var timeline = $(this);
			obj.stepIndex = function() {
				var $activedSteps = timeline.find('.uf-timeline li.actived');
				var curStep = $activedSteps.length;
				return curStep;
			};
			obj.step = function(newStep) {
				newStep = newStep || 1;
				newStep = newStep == 0 ? 1 : newStep;
				timeline.find('.uf-timeline li[step=' + newStep + ']').addClass('actived');
				var target = timeline.find('.uf-timeline li[step=' + newStep + ']').attr('target');
				if(!$.isNull(obj.curTarget)) {
					$('#' + obj.curTarget).hide();
				}
				var steps = timeline.find('.uf-timeline li');
				for(var i = 0; i < steps.length; i++) {
					iStep = i + 1;
					var $step = timeline.find('.uf-timeline li[step=' + iStep + ']');
					if(iStep <= newStep) {
						$step.addClass('actived');
					} else {
						$step.removeClass('actived');
					}
				}
				if(!$.isNull(target)) {
					$('#' + target).removeClass('hide');
					$('#' + target).show();
					obj.curTarget = target;
				}
			};
			obj.next = function() {
				var curStep = obj.stepIndex();
				newStep = curStep + 1;
				obj.step(newStep);
			};
			obj.prev = function() {
				var curStep = obj.stepIndex();
				newStep = curStep - 1;
				obj.step(newStep);
			};
		} else if($(this).hasClass('uf-datepicker')) {
			var datepicker = $(this);
			obj.getValue = function() {
				return datepicker.find('input').val();
			}
			obj.setValue = function(val) {
				if($.isNull(val)) {
					datepicker.ufDatepicker('reset');
					return false;
				}
				datepicker.ufDatepicker('update', val);
			}

		}
		return obj;
	}
})(jQuery);
/**
 * jquery 表格打印插件
 *
 * 作者： wangxin
 * 日期：2018年6月24日
 * 模拟滚动条
 **/
(function($) {
	$.fn.ufScrollBar = function(options) {

		if(typeof options == 'string') {
			if(options == 'destroy') {
				if($.data($(this)[0], 'vsc')) {
					$.data($(this)[0], 'vsc').remove();
					$.data($(this)[0], '');
				};
				if($.data($(this)[0], 'hsc')) {
					$.data($(this)[0], 'hsc').remove();
					$.data($(this)[0], 'hsc', '');
				};
				var content = $(this).find('.uf-sc-content');
				if(content.length > 0) {
					content.children().appendTo(content.parent());
					content.remove();
				}

			} else if(options == 'update') {
				var content = $(this).find('.uf-sc-content');
				var scale = content.attr('scale');
				content.css("marginLeft", -scale * (content.width() - $(this).width()));
			} else if(options == 'uploadw') {
				this.each(function(index, el) {
					var me = $(this);
					var meid = $(this).attr('id')
					meid =meid.substring(0,meid.length-8)
					var toorid = $('#'+meid).attr('tool-bar')
					var content = me.children().eq(0);
					var BarWidth = me.outerWidth() / content.outerWidth() * me.outerWidth();
					var sliderBox = $(toorid).find(".slider");
					var sliderBar = sliderBox.find("span");
					if(sliderBar.length>0){
						if(me.outerWidth() < content.outerWidth()){
							sliderBox.removeClass('none')
						}else{
							sliderBox.addClass('none')
						}
						if(sliderBox.hasClass('hsc')) {
							sliderBar.css({
								width: BarWidth
							});
						} else {
							var BarHeight = me.outerHeight() / content.outerHeight() * me.outerWidth();
							me.css("paddingRight", content.css("paddingLeft"));
							sliderBar.css({
								width: obj.sliderBoxWidth
							});
						}
					
					}else{
						me.ufScrollBar({
							hScrollbar: true,
							mousewheel: false
						});
					}
				})
			} else {
				$(this).find('.slider.hsc').css('top', options);
			}

			return false;
		}
		var defaults = {
			foregroundColor: '#bbb',
			backgroundColor: '#d5d5d5',
			height: $(this).outerHeight(),
			width: $(this).outerWidth(),
			sliderBoxWidth: 8,
			mousewheel: true,
			radius: 4,
			hScrollbar: false,
			vScrollbar: false
		}

		this.each(function(index, el) {
			var me = $(this);
			var obj = $.extend(defaults, options);
			if(me.find('.uf-sc-content').length == 0) {
				$(this).css({
					'position': 'relative',
					'overflow': 'hidden'
				});

				$(this)[obj.hScrollbar ? 'addClass' : 'removeClass']('uf-sc-box');

				//var _wrap = $('<div>').addClass('uf-sc-content').css('min-width',me.outerWidth()+'px');
				var _wrap = $('<div>').addClass('uf-sc-content').css('min-width', '100%');
				me.children().wrapAll(_wrap);
			}
			var content = me.children().eq(0);
			var isMouseDown = false;
			var vh = '';
			var distance = 0,
				baroffset = 0;
			me.css({
				height: obj.height,
				position: 'relative'
			});
			if(obj.vScrollbar && me.outerHeight() < content.outerHeight()) {
				vh = 'v';
				var slider = $.data(me[0], 'vsc') || me.find('.vsc');
				if(slider.length == 0) {
					slider = $("<div class='slider vsc'><span></span></div>");
					me.append(slider);
					$.data(me[0], 'vsc', slider);  
				}
			};
			// console.log($('.uf-sc-content').outerWidth(true))
			// if (me[0].id === 'glRptChrTable_wrapper') {
			// 	setTimeout(function(){
			// 		console.log('-----------------------------')
			// 		console.log($('.uf-sc-content').outerWidth(true))
					// var width = div.style.width || div.clientWidth || div.offsetWidth || div.scrollWidth JCLRgrips
					// console.log($('.uf-sc-content').width())
					// console.log('------------------------------')
					// console.log($('.JCLRgrips').outerWidth(true))
					// console.log('------------------------------')
						// console.log(obj)
						// console.log(obj.hScrollbar)
						// console.log(me)
						// console.log(me.outerWidth())
						// console.log(content)
						// console.log(content.outerWidth())
					// if(obj.hScrollbar && me.outerWidth() < content.outerWidth()) {
					// 	vh = 'h';
					// 	var slider = $.data(me[0], 'hsc') || me.find('.hsc');
					// 	if(slider.length == 0) {
					// 		var slider = $("<div class='slider hsc'><span></span></div>");
					// 		me.append(slider);
					// 		$.data(me[0], 'hsc', slider);
					// 	}
					// };
			// 	},300)

			// }

			if(obj.hScrollbar && me.outerWidth() < content.outerWidth()) {
				vh = 'h';
				var slider = $.data(me[0], 'hsc') || me.find('.hsc');
				if(slider.length == 0) {
					var slider = $("<div class='slider hsc'><span></span></div>");
					me.append(slider);
					$.data(me[0], 'hsc', slider);
				}
			};

			if(slider) {
				$(slider).removeClass('none');
				me.find(".slider").each(function() {
					var sliderBox = $(this),
						sliderBar = sliderBox.find("span");
					if(sliderBox.hasClass('hsc')) {
						var BarWidth = me.outerWidth() / content.outerWidth() * me.outerWidth();
						me.css("paddingBottom", content.css("paddingTop"));
						var boxCSS = {
							position: 'absolute',
							zIndex: 100,
							left: 0,
							width: obj.width,
							height: obj.sliderBoxWidth,
							background: obj.backgroundColor,
							borderRadius: obj.radius,
							overflow: 'hidden'
						};

						boxCSS.top = me.outerHeight() - obj.sliderBoxWidth;

						sliderBox.css(boxCSS);
						sliderBar.css({
							position: 'absolute',
							top: 0,
							left: 0,
							height: obj.sliderBoxWidth,
							background: obj.foregroundColor,
							width: BarWidth,
							borderRadius: obj.radius
						});
					} else {
						var BarHeight = me.outerHeight() / content.outerHeight() * me.outerWidth();
						me.css("paddingRight", content.css("paddingLeft"));
						sliderBox.css({
							position: 'absolute',
							zIndex: 101,
							top: 0,
							right: 0,
							width: obj.sliderBoxWidth,
							height: obj.height,
							background: obj.backgroundColor,
							borderRadius: obj.radius,
							overflow: 'hidden'
						});
						sliderBar.css({
							position: 'absolute',
							top: 0,
							right: 0,
							width: obj.sliderBoxWidth,
							background: obj.foregroundColor,
							height: BarHeight,
						});
					}

					sliderBar.off().on("mousedown", function(event) {
						//event.preventDefault();
						isMouseDown = true;
						vh = $(this).parent('.slider').hasClass('hsc') ? 'h' : 'v';
						baroffset = vh == 'v' ? (event.pageY - sliderBar.offset().top) : (event.pageX - sliderBar.offset().left);
					});

					function doMouseMove(event) {
						/*						event.preventDefault();
												event.stopPropagation();*/
						distance = vh == 'v' ? (event.pageY - me.offset().top) : (event.pageX - me.offset().left) - baroffset;
						if(isMouseDown == true) {
							scroll(distance)
						}
					}
					me.on('mousemove', function(event) {
						doMouseMove(event);
					});
					$('body').on('mousemove', function(event) {
						doMouseMove(event);
					});
					$(slider).on('mousemove', function(event) {
						doMouseMove(event);
					});
					$(slider).on('click', function(event) {
						vh = $(this).hasClass('hsc') ? 'h' : 'v';

						distance = vh == 'v' ? (event.pageY - me.offset().top) : (event.pageX - me.offset().left) - baroffset;

						if(vh == 'h') {

							if(event.pageX > sliderBar.offset().left + sliderBar.width()) {
								distance = distance - sliderBar.width();
							}
						}

						scroll(distance)
					});

					$(window).on('mouseup', function() {
						isMouseDown = false;
						vh = '';
					});
					// 鼠标滚轮事件；
					if(obj.mousewheel) {
						me.bind("mousewheel", function(event, delta) {

							vh = sliderBox.hasClass('hsc') ? 'h' : 'v';
							if(sliderBox.hasClass('hsc')) {
								return false;
							}
							distance = sliderBar.offset().top - me.offset().top;
							delta > 0 ? distance -= 10 : distance += 10;
							scroll(distance);
						})
					}

					$(window).on('resize', function() {
						me.ufScrollBar('update');
					});

					function scroll(distance) {
						if(vh == '') {
							return false;
						}
						var api = vh == 'v' ? 'outerHeight' : 'outerWidth';

						if(distance < 0) {
							distance = 0
						} else if(distance > sliderBox[api]() - sliderBar[api]()) {
							distance = sliderBox[api]() - sliderBar[api]();
						}
						var scale = distance / (sliderBox[api]() - sliderBar[api]());
						var scrollDistance = parseInt(scale * (content[api]() - me[api]()));
						content.attr({
							'scale': scale,
							'scrollDistance': scrollDistance
						});
						if(vh == 'v') {
							sliderBar.css("top", distance);
							content.css("marginTop", -scrollDistance);
						} else {
							sliderBar.css("left", distance);
							content.css("marginLeft", -scrollDistance);
							$(".headFixedInnerDiv").css("marginLeft", -scrollDistance);
						}
					}
				});
			} else {
				var slider = $.data(me[0], vh == 'v' ? 'vsc' : 'hsc');
				if(slider) {
					$(slider).addClass('none');
				}
			}
		});
	}
})(jQuery);
/**
 * jquery datatables固定表头
 * 
 * 作者： zhaoxjb
 * 日期：2019年5月9日
 * 固定表头
 * 修改 guohx  20200629 增加参数e
 * 参数 e 代表表格内部滚动条的div的id
 */
(function($) {
	$.fn.fixedTableHead = function(e) {
		//如果有传参，就是表格纵向滚动条固定表头 guohx 20200629
		if(e){
			if(!$.isNull($(this).find("thead").offset())) {
				var t = $(this);
				//获取表头距离文档顶端的高度
				var headTop = $(this).find("thead").offset().top;
				var headLeft = $(this).find("thead").offset().left;
				var h = t.find("thead").height();
				var renderFixedHead = function() {
					//固定表头
					var w = t.find("thead").width();
					var wrapperW = $(".dataTables_wrapper").width();
					$(".headFixedDiv").remove();
					//外层div
					var $headFixedDiv = '<div class="headFixedDiv hidden" style="position:fixed;top:' + headTop + 'px;left:31px;width:100%;overflow:hidden;"></div>';
					$("body").append($headFixedDiv);
					$(".headFixedDiv").css("left", headLeft - 1 + "px")
					if(wrapperW == null || wrapperW == undefined) {
						wrapperW = t.parent().width();
					}
					$(".headFixedDiv").width(wrapperW - 2);
					$(".headFixedDiv").height(h + 1);
					//内层div
					var $headFixedInnerDiv = '<div class="headFixedInnerDiv"></div>';
					$(".headFixedDiv").append($headFixedInnerDiv);
					$(".headFixedInnerDiv").width(w);
					//复制表头到内层div
					$(".headFixedInnerDiv").html("");
					var cloneTable = t.clone();
					cloneTable.appendTo($(".headFixedInnerDiv"))
					$(".headFixedInnerDiv").find("table").addClass("fixedTable")	
					var id = $(".headFixedInnerDiv").find("table").attr("id");
					$(".headFixedInnerDiv").find("table").attr("id", id + "fixed")
					// $(".fixedTable").append($(cloneTable).html())
					$(".fixedTable").find("tbody").css("visibility", "hidden")
					$(".headFixedInnerDiv").find("th").find("input[type=checkbox]").closest("label").addClass("hidden")
					for (var i = 0; i < t.find("thead").find("th").length; i++) {
						var textAlign = t.find("thead").find("th").eq(i).css("text-align");
						$(".headFixedDiv").find("th").eq(i).css("text-align", textAlign);
					}
				}
				renderFixedHead();
				//guohx  修改 在此处获取id 供下文滚动横向滚动条使用 20200917
				var id = $(".headFixedInnerDiv").find("table").attr("id");
				window.addEventListener('resize', renderFixedHead);
				// 简单的节流函数
				function throttle(func, wait, mustRun) {
					var timeout,
						startTime = new Date();
					return function () {
						var context = this,
							args = arguments,
							curTime = new Date();
						clearTimeout(timeout);
						// 如果达到了规定的触发时间间隔，触发 handler
						if (curTime - startTime >= mustRun) {
							func.apply(context, args);
							startTime = curTime;
							// 没达到触发间隔，重新设定定时器
						} else {
							timeout = setTimeout(func, wait);
						}
					};
				};
				e.scroll(function () {
					if (e.scrollTop() >= h) {
						$(".headFixedDiv").removeClass("hidden")
					} else {
						$(".headFixedDiv").addClass("hidden")
					}
					if (e.scrollLeft() >= 0) {
						//纵向滚动条下来之后滚动横向滚动条表头不动 guohx 20200819 
						// CWYXM-19121 基础资料-会计科目，纵向滚动条滚动下来 ，再滚动横向， 表头不对
						$("#"+ id ).css("margin-left", "-" + e.scrollLeft() + "px")
					} 
				})
			}
		} else {
			if(!$.isNull($(this).find("thead").offset())) {
				var t = $(this);
				//获取表头距离文档顶端的高度
				var headTop = $(this).find("thead").offset().top;
				var headLeft = $(this).find("thead").offset().left;
				var renderFixedHead = function() {
					//固定表头
					var w = t.find("thead").width();
					var h = t.find("thead").height();
					var wrapperW = $(".dataTables_wrapper").width();
					$(".headFixedDiv").remove();
					//外层div
					var $headFixedDiv = '<div class="headFixedDiv hidden" style="position:fixed;top:0px;left:31px;width:100%;overflow:hidden;"></div>';
					$("body").append($headFixedDiv);
					$(".headFixedDiv").css("left", headLeft - 1 + "px")
					if(wrapperW == null || wrapperW == undefined) {
						wrapperW = t.parent().width();
					}
					$(".headFixedDiv").width(wrapperW - 2);
					$(".headFixedDiv").height(h + 1);
					//内层div
					var $headFixedInnerDiv = '<div class="headFixedInnerDiv"></div>';
					$(".headFixedDiv").append($headFixedInnerDiv);
					$(".headFixedInnerDiv").width(w);
					//复制表头到内层div
					$(".headFixedInnerDiv").html("");
					var cloneTable = t.clone();
					cloneTable.appendTo($(".headFixedInnerDiv"))
					$(".headFixedInnerDiv").find("table").addClass("fixedTable")
					var id = $(".headFixedInnerDiv").find("table").attr("id");
					$(".headFixedInnerDiv").find("table").attr("id", id + "fixed")
					// $(".fixedTable").append($(cloneTable).html())
					$(".fixedTable").find("tbody").css("visibility", "hidden")
					$(".headFixedInnerDiv").find("th").find("input[type=checkbox]").closest("label").addClass("hidden")
					// guohx 修改每个表头的居中方式都根据原表格来变化 20200629
					for (var i = 0; i < t.find("thead").find("th").length; i++) {
						var textAlign = t.find("thead").find("th").eq(i).css("text-align");
						$(".headFixedDiv").find("th").eq(i).css("text-align", textAlign);
					}
				}
	
				renderFixedHead();
				window.addEventListener('resize', renderFixedHead);
	
				// 简单的节流函数
				function throttle(func, wait, mustRun) {
					var timeout,
						startTime = new Date();
	
					return function() {
						var context = this,
							args = arguments,
							curTime = new Date();
	
						clearTimeout(timeout);
						// 如果达到了规定的触发时间间隔，触发 handler
						if(curTime - startTime >= mustRun) {
							func.apply(context, args);
							startTime = curTime;
							// 没达到触发间隔，重新设定定时器
						} else {
							timeout = setTimeout(func, wait);
						}
					};
				};
				// 实际想绑定在 scroll 事件上的 handler
				function realFunc() {
					if($(window).scrollTop() >= headTop) {
						if($(this)[0].rpt!=undefined){
							$($(this)[0].rpt.namespace + "Table_wrapper " + $(this)[0].rpt.namespace + "Table .rpt-funnelBox").hide(); // CWYXM-13220
						}
						$(".headFixedDiv").removeClass("hidden")
					} else {
						$(".headFixedDiv").addClass("hidden")
					}
				}
				// 采用了节流函数
				window.addEventListener('scroll', throttle(realFunc, 50, 1000));
				// window.addEventListener('scroll', myEfficientFn);
			}
		}
		
	}
})(jQuery);
(function($) {
	$.fn.fixedTableHeadDraw = function() {

		var t = $(this);

		var renderFixedHead = function() {
			var w = t.find("thead").width();
			$(".headFixedInnerDiv").width(w);
			var textAlign = t.find("thead").find("th").eq(1).css("text-align")
			//复制表头到内层div
			$(".headFixedInnerDiv").html("");
			var cloneTable = t.clone();
			cloneTable.appendTo($(".headFixedInnerDiv"))
			$(".headFixedInnerDiv").find("table").addClass("fixedTable")
			var id = $(".headFixedInnerDiv").find("table").attr("id");
			$(".headFixedInnerDiv").find("table").attr("id", id + "fixed")
			// $(".fixedTable").append($(cloneTable).html())
			$(".fixedTable").find("tbody").css("visibility", "hidden")
			$(".headFixedInnerDiv").find("th").find("input[type=checkbox]").closest("label").addClass("hidden")
			$(".headFixedDiv th").css("text-align", textAlign)
			if($(".slider span").length > 0) {
				$(".slider span").css("left", "0px");
			}
			$(".headFixedInnerDiv").css("margin-left", "0px");
			if($(".uf-sc-content").length > 0) {
				$(".uf-sc-content").css("margin-left", "0px")
			}
		}
		renderFixedHead();
	}

})(jQuery);
/**
 * jquery datatables锁定列
 *
 * 作者： wangxin
 * 日期：2018年6月24日
 * 模拟滚动条
 **/
(function($) {
	$.fn.fixedColumns = function(opts) {
		var target = $(this);
		this.each(function() {
			var _wrap = $(this).parent();
			var _table = $(this);

			function addFixedTd(_tbl) {
				_tbl.find('tr').each(function(idx, _tr) {
					var tag = idx == 0 ? 'th' : 'td';
					$('<' + tag + '>').addClass('fixed-height').css({
						'width': '0px',
						'padding': '0px',
						'border': '0px'
					}).appendTo(_tr);
				});

				_tbl.find('tr').each(function(idx, _tr) {
					var trHeight = $(_table.find('tr').eq(idx)).height()
					$(_tr).find('.fixed-height').css({
						'height': trHeight + 'px'
					});
				});
			}

			function createFixed(pos, cols) {
				var _fixedWrap = _wrap.find('.wrapper-' + pos);
				if(_fixedWrap.length == 0) {
					var _fixedWrap = $('<div>').addClass('wrapper-' + pos).css({
						'position': 'absolute',
						'top': '0'
					}).appendTo(_wrap);
				}
				_fixedWrap.css({
					'height': _table.outerHeight() - 1,
					'width': 'auto',
					'z-index': 100,
					'overflow': 'hidden'
				});
				if(pos == 'right') {
					_fixedWrap.css({
						'right': '-1px'
					});
				} else {
					_fixedWrap.css({
						'left': '0'
					});
				}
				var colCount = _table.find('>tbody tr:eq(0)').find('td').length;
				var _cloneTable = _table.clone();
				addFixedTd(_cloneTable);

				_cloneTable.find('td.details').remove();
				var cloneWidth = 0;
				if(pos == 'right') {
					for(var i = colCount - 1; i >= 0; i--) {
						if(i < colCount - cols) {
							$.each(_cloneTable.find('tr'), function(idx, _tr) {
								var tag = idx == 0 ? 'th' : 'td';
								$(_tr).find(tag + ':eq(' + i + '):not(.fixed-height)').remove();
							});
						} else {
							$.each(_cloneTable.find('tr'), function(idx, _tr) {
								var tag = idx == 0 ? 'th' : 'td';
								var tdWidth = _table.find('tr').eq(idx).find(tag).eq(i).width();
								$(_tr).find(tag + ':eq(' + i + ')').css({
									'width': tdWidth + 'px'
								});
							});
						}

					}
				} else {
					for(var i = colCount - 1; i >= 0; i--) {
						if(i >= cols) {
							$.each(_cloneTable.find('tr'), function(idx, _tr) {
								var tag = idx == 0 ? 'th' : 'td';
								$(_tr).find(tag + ':eq(' + i + '):not(.fixed-height)').remove();
							});
						} else {
							$.each(_cloneTable.find('tr'), function(idx, _tr) {
								var tag = idx == 0 ? 'th' : 'td';
								var tdWidth = _table.find('tr').eq(idx).find(tag).eq(i).width();
								$(_tr).find(tag).eq(i).css({
									'width': tdWidth + 'px'
								});
							});
						}
					}
				}
				_fixedWrap.html('');
				_cloneTable.appendTo(_fixedWrap);
			}
			if(opts.rightColumns) {
				createFixed('right', opts.rightColumns);
			}
			if(opts.leftColumns) {
				createFixed('left', opts.leftColumns);
			}
		});
		$(window).on('resize', function() {
			var tmpW = $(window).width();
			var tmpH = $(window).height();
			var oldW = $(target[0], 'oldwidth') || tmpW;
			var oldH = $(target[0], 'oldHeight') || tmpH;
			if(Math.abs(tmpH - oldH) > 20 || Math.abs(tmpW - oldW) > 20) {
				target.fixedColumns(opts);
			}
		});
	};
})(jQuery);
/**
 * jquery 表格打印插件
 *
 * 作者： wangxin
 * 日期：2017年8月24日
 * 分页样式(需要自定义)：
 * @media print {
 *	.pageBreak { page-break-after:always; }
 * } 
 * 使用例子：
 *  $(function(){
 *		$("#tabContent").printTable({
 *		 mode          : "rowNumber",
 *		 header        : "#headerInfo",
 *		 footer        : "#footerInfo",
 *		 pageNumStyle  : "第#p页/共#P页",
 *		 pageNumClass  : ".pageNum",
 *		 pageSize      : 10
 *		});
 *   });
 *  注意事项：
 *      使用时注意表格中要使用 thead 和 tbody区分出标题头与表格内容，否则可能出现错误
 * 
 * 参数说明：
 *  options are passed as json (json example: { rowHeight : "rowHeight", header : ".tableHeader",})
 *
 *  {OPTIONS}        | [type]    | (default), values            | Explanation
 *  ---------------- | --------- | -----------------------------| -----------
 *  @mode            | [string]  | ("rowHeight"),rowNumber      | 分页模式，按行高分页或按行数分页
 *  @header          | [string]  | (".tableHeader")             | 页面开始处要添加的内容
 *  @footer          | [string]  | (".tableFooter")             | 页面结束要添加的内容
 *  @pageSize        | [number]  | (30)                         | 自动分页行数，按行高分页时改参数无效
 *  @breakClass      | [string]  | ("pageBreak")                | 分页插入符class,需要定义分页样式
 *  @pageNumStyle    | [string]  | "#p/#P"                      | 页码显示样式，#p当前页，#P总页数
 *  @pageNumClass    | [string]  | ".pageNumClass"              | 页码class样式，用于设值(使用text方法设置) 
 *  @startPage       | [number]  | (1)                          | 第一页起始页码
 *  @pageHeight      | [number]  | (297)                        | 页面高度,单位像素
 *  @topMargin       | [number]  | (15)                         | 上边距高度，单位像素
 *  @bottomMargin    | [number]  | (15)                         | 低边距高度，单位像素
 */
(function($) {
	function ufPrintTable(ele, options) {
		this.bearer = $(ele);
		this.tbodyTr = this.bearer.find("tbody tr");
		this.settings = options;
		this.rowCount = 0; //行总数
		this.pageCount = 0; //页总数
		this.currentPage = 0; //当前页
		this.header = null; //表格头
		this.content = null; //表格内容
		this.footer = null; //表格尾	 
		this.printArear = $('.print-arear'); //打印区域
		this.createPrintArear();
	}
	ufPrintTable.prototype = {
		constructor: ufPrintTable,
		//行高分页
		rowHeightPage: function() {
			var contentHeight = this.initHeightPage();
			this.getContentColne();
			this.beginPageByHeight(contentHeight);
			//this.hidenContent();
		},
		//初始化高度分页信息
		initHeightPage: function() {
			var contentHeight = this.initContentHeight();
			this.currentPage = 0 + this.settings.startPage;
			this.pageCount = Math.ceil(this.bearer.find("tbody").outerHeight(true) / contentHeight) + this.settings.startPage - 1; //初始化总页数
			this.rowCount = this.tbodyTr.length; //初始化总记录数
			return contentHeight;
		},
		//初始化内容高度
		initContentHeight: function() {
			var headerHeight = $(this.settings.header).outerHeight(true);
			var footerHeight = $(this.settings.footer).outerHeight(true);
			var theadHeight = this.bearer.find("thead").outerHeight(true);
			var tableHeight = this.settings.pageHeight - this.settings.topMargin - this.settings.bottomMargin;

			var tbodyHeight = tableHeight - theadHeight - headerHeight - footerHeight;
			return tbodyHeight;
		},
		//按行高分页
		beginPageByHeight: function(contentHeight) {
			var This = this;
			var totalHeight = 0;
			var startLine = 0;
			this.tbodyTr.each(function(i) {
				var cHeight = $(this).outerHeight(true);
				$(this).height(cHeight);
				if((totalHeight + cHeight) < contentHeight) {
					totalHeight += cHeight;
					if(i == This.tbodyTr.length - 1) {
						newPage(i + 1);
					}
				} else {
					newPage(i);
				}
			});

			function newPage(index) {
				This.createPage(startLine, index);
				This.currentPage = This.currentPage + 1;
				startLine = index;
				totalHeight = 0;
			}
		},
		////////////////////////////////////////////////////////
		//行数分页
		rowNumberPage: function() {
			this.initNumberPage();
			this.getContentColne();
			this.beginPageByNumber();
			//this.hidenContent();
		},
		//初始化分页基本信息
		initNumberPage: function() {
			this.rowCount = this.tbodyTr.length; //初始化总记录数
			this.pageCount = Math.ceil(this.rowCount / this.settings.pageSize) + this.settings.startPage - 1; //初始化总页数
			this.currentPage = 0 + this.settings.startPage;
		},

		//开始分页
		beginPageByNumber: function() {
			var startLine = 1; //开始行号
			var offsetLine = 0; //偏移行号
			for(var i = this.settings.startPage; i <= this.pageCount; i++) {
				this.currentPage = i;
				startLine = this.settings.pageSize * (this.currentPage - this.settings.startPage);
				offsetLine = (startLine + this.settings.pageSize) > this.rowCount ? this.rowCount : startLine + this.settings.pageSize;
				this.createPage(startLine, offsetLine);
			};
		},
		////////////////////////////////////////////////////////
		//获取内容
		getContentColne: function() {
			this.header = $(this.settings.header).clone().removeAttr("id");
			this.header.css('padding-top', this.settings.topMargin + 'px');
			this.content = this.bearer.clone().find("tbody").remove().end().removeAttr("id");
			this.footer = $(this.settings.footer).clone().removeAttr("id");
			this.footer.css('padding-bottom', this.settings.bottomMargin + 'px');
		},
		//隐藏原来的数据
		hidenContent: function() {
			$(this.settings.header).hide();
			this.bearer.hide();
			$(this.settings.footer).hide();
		},
		//创建新的一页
		createPage: function(startLine, offsetLine) {
			var This = this;
			var $pageHeader = this.header.clone();
			var $pageContent = this.content.clone().append(this.getTrRecord(startLine, offsetLine));
			var $pageFooter = this.footer.clone();
			$pageFooter.find(this.settings.pageNumClass).text(This.getPageStyle()); //页码显示格式
			if(offsetLine == this.rowCount) {
				this.printArear.append($pageHeader).append($pageContent).append($pageFooter);
			} else {
				this.printArear.append($pageHeader).append($pageContent).append($pageFooter).append(this.addPageBreak());
			}
		},
		//获取分页样式
		getPageStyle: function() {

			var numStr = this.settings.pageNumStyle;
			numStr = numStr.replace(/#p/g, this.currentPage);
			numStr = numStr.replace(/#P/g, this.pageCount);
			return numStr;
		},

		//获取记录
		getTrRecord: function(startLine, offsetLine) {
			return this.tbodyTr.clone().slice(startLine, offsetLine);
		},
		//添加分页符
		addPageBreak: function() {
			return "<div class='" + this.settings.breakClass + "'></div>";
		},
		createPrintArear: function() {
			if(this.printArear.length == 0) {
				this.printArear = $('<div class="print-arear"></div>').appendTo($('body')).trigger('create');
			}
			this.printArear.html('');
		},
		/////////////////////////////////////////////////
		print: function() {

			switch(this.settings.mode) {
				case 'rowHeight':
					this.rowHeightPage(); //行高分页
					break;
				case 'rowNumber':
					this.rowNumberPage(); //行数分页
					break;
			}
			window.print();
		}
	}

	$.fn.ufPrintTable = function(options) {

		var settings = $.extend({}, $.fn.ufPrintTable.defaults, options);
		var printTable = new ufPrintTable($(this), settings);
		printTable.print();

	};
	$.fn.ufPrintTable.defaults = {
		mode: 'rowHeight',
		header: ".tableHeader",
		footer: ".tableFooter",
		pageSize: 60,
		breakClass: "page-break",
		pageNumStyle: "第#p页/共#P页",
		pageNumClass: ".pageNumClass",
		startPage: 1,
		pageHeight: 927,
		topMargin: 45,
		bottomMargin: 45
	};
	$.fn.ufPrintTable.Constructor = ufPrintTable;
	//获取页总数
	/*
	$.fn.ufPrintTable.getStartPage = function(startPage) {
		return this.prototype.getPageStyle(startPage);
	};
	*/
})(jQuery);
var uf = {};
/***************1.*******************/
uf.setCache = function(key, value) {
	window.sessionStorage.setItem(key, value);
};
uf.getCache = function(key) {
	return window.sessionStorage.getItem(key);
};
uf.setObjectCache = function(key, value) {
	window.sessionStorage.setItem(key, JSON.stringify(value));
};
uf.getObjectCache = function(key) {
	return JSON.parse(window.sessionStorage.getItem(key));
};
uf.removeCache = function(key) {
	window.sessionStorage.removeItem(key);
};
uf.clearCache = function() {
	window.sessionStorage.clear();
};
uf.scrollbarWidth = function() {
	var $inner = jQuery('<div style="width: 100%; height:200px;">test</div>'),
		$outer = jQuery('<div style="width:200px;height:150px; position: absolute; top: 0; left: 0; visibility: hidden; overflow:hidden;"></div>').append($inner),
		inner = $inner[0],
		outer = $outer[0];
	jQuery('body').append(outer);
	var width1 = inner.offsetWidth;
	$outer.css('overflow', 'scroll');
	var width2 = outer.clientWidth;
	$outer.remove();
	return width1 - width2;
};
/***************2.*******************/
//{element,cacheId,url,param,callback}
uf.cacheDataRun = function(setting) {
	setting.callback = setting.callback || function(data) {};
	setting.cached = setting.cached || false;
	var callback = setting.callback;
	var data;
	if(setting.cached) {
		if($.isNull(setting.cacheId)) {
			callback();
			return false;
		}
		data = uf.getObjectCache(setting.cacheId);
	}
	if(!$.isNull(data)) {
		if(setting.hasOwnProperty('element')) {
			callback(setting.element, data);
		} else {
			callback(data);
		}
	} else {
		setting.param = setting.param || {};
		if($.isNull(setting.url)) return false;
		$.ufajax(setting.url, 'get', setting.param, function(result) {
			if(result.hasOwnProperty('data')) {
				uf.setObjectCache(setting.cacheId, result.data);
				if(setting.hasOwnProperty('element')) {
					callback(setting.element, result.data);
				} else {
					callback(result.data);
				}

			} else {
				alert('错误的数据格式!');
			}
		});
	}
};
/***************3.*******************/
uf.expTable = function(opts) {
	var getExplorer = function() {
		var explorer = window.navigator.userAgent;
		//ie 
		if(explorer.indexOf("MSIE") >= 0) {
			return 'ie';
		}
		//firefox 
		else if(explorer.indexOf("Firefox") >= 0) {
			return 'Firefox';
		}
		//Chrome
		else if(explorer.indexOf("Chrome") >= 0) {
			return 'Chrome';
		}
		//Opera
		else if(explorer.indexOf("Opera") >= 0) {
			return 'Opera';
		}
		//Safari
		else if(explorer.indexOf("Safari") >= 0) {
			return 'Safari';
		}

	}
	//jQuery HTML导出Excel文件(兼容IE及所有浏览器)
	var getFileName = function() {
		return opts.title;;

	}
	var HtmlExportToExcel = function(tableid) {

		if(getExplorer() == 'ie' || getExplorer() == undefined) {
			HtmlExportToExcelForIE(tableid);
		} else {
			HtmlExportToExcelForEntire(tableid)
		}
	}
	//IE浏览器导出Excel
	var HtmlExportToExcelForIE = function(tableid) {
		var filename = getFileName();
		try {
			var winname = window.open('', '_blank', 'top=10000');
			var strHTML = $(tableid).html();

			winname.document.open('application/vnd.ms-excel', 'export excel');
			winname.document.writeln(strHTML);
			winname.document.execCommand('saveas', '', filename + '.xls');
			winname.close();

		} catch(e) {
			alert(e.description);
		}
	}
	//非IE浏览器导出Excel
	var HtmlExportToExcelForEntire = (function() {

		var uri = 'data:application/vnd.ms-excel;base64,',
			//template = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv="content-type" content="application/vnd.ms-excel; charset=UTF-8"><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>{table}</table></body></html>',
			template = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--><style>td{text-align:left;}#expTableTitle{text-align:center;}.tdNum{text-align:right;}.tc{text-align:center;}.tr{text-align:right;}.tl{text-align:left;}</style></head><body><table>{table}</table></body></html>',
			base64 = function(s) {
				return window.btoa(unescape(encodeURIComponent(s)))
			},
			format = function(s, c) {
				return s.replace(/{(\w+)}/g, function(m, p) {
					return c[p];
				})
			}

		function downfile(fileName, fileContent) {
			var attachGuid = (new Date()).Format('yyyyMMddhhmmnnssS');
			var url = "/pub/file/export";

			var params = {
				'fileName': encodeURI(fileName),
				'fileContent': fileContent
			}
			ufma.post(url, params, function(rst) {
				window.location.href = "/pub/file/download?attachGuid=" + rst.data.attachGuid + '&fileName=' + decodeURI(rst.data.fileName);
			});
		}
		return function(table) {
			var filename = getFileName();
			if(!table) {
				table = $(table);
			}
			var ctx = {
				worksheet: filename || 'Worksheet',
				table: table.html()
			}

			var wkseet = format(template, ctx);

			downfile(filename + ".xls", wkseet);
		}
	})();

	var exportTable = opts.exportTable;
	//自定义
	var columns = opts.columns || [];
	var data = opts.data || [];
	if(columns.length > 0) {
		exportTable = uf.createTable(opts);
		exportTable.addClass('table-export');
	}

	var $panelExcel = $('#panelExcel');
	if($panelExcel.length == 0) {
		$panelExcel = $('<div id="panelExcel">');
	}
	$panelExcel.html('');
	/*	if($('a.explink').length == 0) {
			$('<a id="dlink" style="display: block;">下载导出文件</a>').appendTo('body');
		}*/
	//--------------------------------------------
	var colCount = 1;
	$(exportTable).find('tr').each(function() {
		var tmpCount = $(this).find('td').length;
		if(tmpCount == colCount) return true;
		colCount = tmpCount > colCount ? tmpCount : colCount;
	});
	var $gridTop = $('<table class="grid-top" cellspacing="0" cellpadding="0" align="center" border="0"></table>');
	$('<tr><td align="center" colspan="' + colCount + '" style="min-height: 40px"><h3 id="expTableTitle">' + (opts.title ? opts.title : '') + '</h3></td></tr>').appendTo($gridTop);
	if(opts.topInfo) {
		var topInfoNum = 1;
		for(var i = 0; i < opts.topInfo.length; i++) {
			topInfoNum = colspan > opts.topInfo[i].length ? topInfoNum : opts.topInfo[i].length;
		}
		var colspan = Math.ceil(colCount / topInfoNum);
		for(var i = 0; i < opts.topInfo.length; i++) {
			var row = opts.topInfo[i];
			var tr = '<tr>';
			for(var j = 0; j < row.length; j++) {
				tr += '<td colspan=' + colspan + '>' + row[j] + '</td>';
			}
			tr += '</tr>';
			$(tr).appendTo($gridTop);
		}
	}
	$gridTop.appendTo($panelExcel);
	//----------------------------------------------
	if(columns.length > 0) {
		$(exportTable).appendTo($panelExcel);
	} else {
		var cloneTable = $(exportTable).clone();
		cloneTable.appendTo($panelExcel);
		$('<table border="1" cellpadding="0" cellspacing="0" align="center" style="border-collapse: collapse; word-break: keep-all; border-color: Black;"></table>');
		$panelExcel.find('table:not(.grid-top)').attr({
			'border': '1',
			'cellpadding': '0',
			'cellspacing': '0',
			'align': 'center'
		});
		$panelExcel.find('table:not(.grid-top)').css({
			'border-collapse': 'collapse',
			'word-break': 'keep-all',
			'border-color': 'Black'
		});

	}

	//--------------------------------------------
	//增加表格底部表外项 guohx 20200630
	var $gridBottom = $('<table class="grid-bottom" cellspacing="0" cellpadding="0" align="center" border="0"></table>');
	if(opts.bottomInfo) {
		var topInfoNum = 1;
		for(var i = 0; i < opts.bottomInfo.length; i++) {
			topInfoNum = colspan > opts.bottomInfo[i].length ? topInfoNum : opts.bottomInfo[i].length;
		}
		var colspan = Math.ceil(colCount  / topInfoNum);
		var row = "";
		for(var i = 0; i < opts.bottomInfo.length; i++) {
			row += opts.bottomInfo[i] ;
		}
		var tr = '<tr><td colspan=' + colspan + '>'+ row + '</td></tr>';
		$(tr).appendTo($gridBottom);
	}
	$gridBottom.appendTo($panelExcel);
	$panelExcel.find('td,th').css({
		'height': '26px'
	});
	$panelExcel.find('td.money').addClass("tdNum")
	$panelExcel.find('td.tdNum,td.tr,td.money').css({
		'text-align': 'right'
	});
	$panelExcel.find('td.tdNum,td.money').css({
		'width': '160px'
	});
	$panelExcel.find('td.tl').css({
		'text-align': 'left'
	});
	$panelExcel.find('td.tc').css({
		'text-align': 'center'
	});
	$panelExcel.find('.no-print').remove();
	HtmlExportToExcel($panelExcel);

}
uf.createTable = function(options) {
	var columns = [];
	var colInfo = new Array();
	var colIndex = 0;
	var prevRow = null;

	var $table = $('<table border="1" cellpadding="0" cellspacing="0" align="center" style="border-collapse: collapse; word-break: keep-all; border-color: Black;"></table>');
	var $thead = $('<thead></thead>').appendTo($table);
	var $tbody = $('<tbody></tbody>').appendTo($table);
	var $mergeTr = null;

	function initTheadColumns() {
		var rowCount = options.columns.length;
		for(var i = 0; i < rowCount; i++) {
			columns[i] = new Array();
		}

		for(var irow = 0; irow < rowCount; irow++) {
			var row = options.columns[irow];
			$.each(row, function(icol, col) {
				var iColspan = 1;
				if(col.hasOwnProperty('colspan')) {
					iColspan = col.colspan;
				}
				if(col['type'] == 'indexcolumn') {
					col.field = 'indexcolumn';
				}
				if(col['type'] == 'checkbox') {
					col.field = 'checkbox';
				}
				var colField = col['field'];

				for(var j = irow; j < rowCount; j++) {
					if(irow == 0) {
						columns[j].push(colField);
						for(var k = 1; k < iColspan; k++) {
							columns[j].push('');
						}
					} else {
						for(var m = 0; m < columns[j].length; m++) {
							if(columns[j][m] == '') {
								columns[j][m] = colField;
								break;
							}
						}
					}
				}

			});
		}
	}

	function createTableHead() {
		for(var irow = 0; irow < options.columns.length; irow++) {
			var column = columns[irow];
			var row = options.columns[irow];
			var tr = '<tr>';
			var iCol = 0;
			$.each(row, function(icol, col) {
				iCol = iCol + 1;
				var iRowspan = 1;
				if(col.hasOwnProperty('rowspan')) {
					iRowspan = col.rowspan;
				}
				var rowspan = '';
				if(iRowspan > 1) rowspan = ' rowspan=' + iRowspan;

				var iColspan = 1;
				if(col.hasOwnProperty('colspan')) {
					iColspan = col.colspan;
				}
				var colspan = '';
				if(iColspan > 1) colspan = ' colspan=' + iColspan;

				var headalign = '';
				if(col.hasOwnProperty('headalign')) {
					headalign = 'text-align:' + col.headalign + ';';
				}

				if(col['type'] == 'indexcolumn') {
					col.field = 'indexcolumn';
				}
				if(col['type'] == 'checkbox') {
					col.field = 'checkbox';
					col.name = '<label class="mt-checkbox mt-checkbox-outline"><input type="checkbox" class="check-all" index=' + icol + ' value="1"><span></span></label>';
				}

				var index = column.indexOf(col.field);
				if(index > -1) {
					colInfo[index] = col;
					iCol = index + 1;
				}

				var lastCell = '';
				if(iCol == column.length) lastCell = 'last-cell';

				tr += '<th class=" ' + lastCell + '" ' + colspan + rowspan + ' ' + col.className + ' ><span style="' + headalign + '" >' + col.name + '</span></th>';

				var width = '100px';
				if(col.hasOwnProperty('width')) {
					width = col.width + 'px;';
				} else {
					col.width = '100';
				}

				if(col['type'] == 'checkbox') {
					width = '48px';
					col.width = '48';
				}

				if(iColspan > 1) iCol = iCol + iColspan;
			});
			tr += '</tr>';
			$(tr).appendTo($thead);
		};

		var fixedRow = '<tr class="no-print" style="height:0px;">';
		for(var i = 0; i < colInfo.length; i++) {
			var col = colInfo[i];
			var width = col['width'] || 100;
			fixedRow += '<td style = "padding:0;border:0;margin:0;height:0px;width:' + width + 'px"></td>';
		}
		fixedRow += '</tr>';

		$thead.prepend(fixedRow);
		/*start zxj2019-5-24余额表等账表不能打印所有数据，只能打印当前页，所以加了以下代码*/
		if(options.dt && options.type) {
			$thead.html("");
			var newdt = options.dt;
			var $newHead = $(newdt).find("thead");
			$thead.append($newHead.html());
		}
		/* end*/

	}

	function addRow(row) {
		colIndex = colIndex + 1;
		var rowid = $.getGuid();
		var idField = options['idField'];
		if(idField != undefined && idField != 'undefined' && row != null && row != undefined) {
			if(!$.isNull(row[idField])) {
				rowid = options['id'] + '_row_' + row[idField];
			}
		};

		var mergeColumns = options['mergeColumns'] || function(rowdata) {
			return []
		};
		var merges = mergeColumns(row);
		var mergeRows = options['mergeRows'] || function(prevRow, rowdata) {
			return []
		};

		var mrows = [];
		if(!$.isNull(prevRow)) {
			mrows = mergeRows(prevRow, row);
		}

		var pid = row[options['pId']];
		if($.isNull(pid)) pid = rowid;
		var tr = '<tr id="' + rowid + '" pid="' + pid + '">';
		for(var icol = 0; icol < colInfo.length; icol++) {
			var col = colInfo[icol];

			var colText = '';
			if(col['field'] == 'indexcolumn') {
				colText = colIndex;
			} else if(col['field'] == 'checkbox') {
				colText = '<label class="mt-checkbox mt-checkbox-outline"><input data-id="' + row[idField] + '" rowid="' + rowid + '" pid="' + pid + '" class="check-item" index=' + icol + ' type="checkbox" value="1"><span></span></label>';
			} else {
				colText = row[col['field']];
			}

			var align = '';
			if(col.hasOwnProperty('align')) {
				align = 'text-align:' + col.align + ';';
			}
			var sclass = col['className'] || '';

			var render = col['render'] || function(rowid, rowdata, text) {
				return text;
			}
			colText = render(rowid, row, colText);
			if(colText == undefined || colText == 'undefined') colText = '';

			var colspan = '';
			var mergeTdClass = '';
			for(var iMerge = 0; iMerge < merges.length; iMerge++) {
				var merge = merges[iMerge];

				if(merge['columnIndex'] == icol) {
					colspan = ' colspan=' + merge['colSpan'];
					mergeTdClass = merge['className'] || '';
					if(!$.isNull(merge['text'])) {
						colText = merge['text'];
					}
					icol = icol + merge['colSpan'] - 1;
					break;
				}
			}

			var tdtypeClass = col['type'] || '';
			var lastCell = '';
			if(icol == colInfo.length - 1) {
				lastCell = 'last-cell';
			};

			tr += '<td class="' + sclass + ' ' + tdtypeClass + ' ' + mergeTdClass + lastCell + ' ' + col.className + '" ' + colspan + ' style="' + align + '">' + colText + '</td>';

		}
		var $tr = $(tr).appendTo($tbody);
		if(mrows.length == 0) {
			$mergeTr = $tr;
		}
		for(var i = 0; i < mrows.length; i++) {
			$tr.find('td:eq(' + mrows[i] + ')').remove();
			var column = $mergeTr.find('td:eq(' + mrows[i] + ')');
			var rowspan = column.attr('rowspan') || 1;
			column.attr('rowspan', parseInt(rowspan) + 1);
		}

		prevRow = row;
	}

	function createTableBody() {
		colIndex = 0;
		for(var irow = 0; irow < options.data.length; irow++) {
			var row = options.data[irow];
			addRow(row);
		}
	}

	initTheadColumns();
	createTableHead();
	createTableBody();
	return $table;
};

uf.tablePrint = function(options) {
	var defaults = {
		mode: 'rowHeight',
		pageNumStyle: '第#p页/共#P页',
		startPage: 1,
		pageHeight: 924,
		topMargin: 45,
		bottomMargin: 45,
		bottomLeft: '',
		bottomCenter: '',
		bottomRight: ''
	};
	var wxprt = function print(opt) {
		return {
			settings: $.extend({}, defaults, opt),
			printArear: $('#wxPrintArear'),
			printTable: $('#wxPrintTable'),
			printTableHead: null,
			printTableBody: null,
			createPrintArear: function() {
				if(this.printArear.length == 0) {
					this.printArear = $('<div id="wxPrintArear"></div>').appendTo($('body')).trigger('create');
				}
				this.printArear.html('');
			},
			createHeaderInfo: function() {
				$('<div id="wxPrintHeaderInfo" class="print-header"><h1>' + this.settings.title + '</h1><div class="print-header-info"><span class="page-top-left">' + this.settings.topLeft + '</span><span>' + this.settings.topCenter + '</span><span class="page-top-right">' + this.settings.topRight + '</span></div></div>').appendTo(this.printArear).trigger('create');
			},
			createFooterInfo: function() {
				$('<div id="wxPrintFooterInfo" class="print-footer"><div class="print-footer-info"><span class="page-bottom-left">' + this.settings.bottomLeft + '</span><span>' + this.settings.bottomCenter + '</span><span class="page-bottom-right">' + this.settings.bottomRight + '</span></div></div>').appendTo(this.printArear).trigger('create');
			},
			createPrintTable: function() {
				this.printTable = uf.createTable({
					columns: this.settings.columns,
					data: this.settings.data,
					mergeColumns: this.settings.mergeColumns,
					mergeRows: this.settings.mergeRows
				});
				this.printTable.attr('id', 'wxPrintTable');
				this.printArear.append(this.printTable).trigger('create');
			},
			print: function() {
				this.createPrintArear();
				this.createHeaderInfo();
				this.createPrintTable();
				this.createFooterInfo();
				var This = this;

				$('#wxPrintTable').ufPrintTable({
					mode: This.settings.mode,
					header: "#wxPrintHeaderInfo",
					footer: "#wxPrintFooterInfo",
					pageNumStyle: This.settings.pageNumStyle,
					pageNumClass: ".page-num",
					pageHeight: This.settings.pageHeight,
					topMargin: 45,
					bottomMargin: 45
				});
			}
		}
	}(options);
	wxprt.print();
};
//////////////////////
$.fn.ufTableExport = function(options) {
	//项目中bootPath为根路径
	uf.open({
		url: bootPath + 'pub/tableexport/table-export.html',
		title: '数据导出',
		width: 434,
		height: 240,
		data: {
			fileName: options.fileName,
			ignoreColumn: options.ignoreColumn,
			columns: options.columns || [],
			data: options.data || [],
			exportTable: $(this)
		}
	});
}
uf.tableExport = function(options) {
	var $printArear = $('#wxPrintArear');

	if($printArear.length == 0) {
		$printArear = $('<div id="wxPrintArear"></div>').appendTo($('body')).trigger('create');
	}
	$printArear.html('');

	var $tbl = uf.createTable({
		columns: options.columns,
		data: options.data,
		mergeColumns: options.mergeColumns,
		mergeRows: options.mergeRows
	});
	$tbl.appendTo($printArear);
	$tbl.ufTableExport({
		'fileName': options.fileName,
		'ignoreColumn': options.ignoreColumn
	});
}
/////////////////////
uf.showOverlay = function() {
	var sclW = uf.scrollbarWidth();
	var isScroll = $.isScroll();

	if(isScroll.scrollY) {
		$(document.body).css({
			'overflow-y': 'hidden',
			'padding-right': sclW + 'px'
		});
	}
	if(isScroll.scrollX) {
		$(document.body).css({
			'overflow-x': 'hidden',
			'padding-bottom': sclW + 'px'
		});
	}
	var oId = $.getGuid();
	var zindex = $.newZIndex();
	$('<div id="' + oId + '" class="uf-overlay" style="z-index: ' + zindex + ';"></div>').appendTo($('body')).trigger('create');
	$.data($('#' + oId)[0], 'isScroll', isScroll);
	return oId;
};
uf.hideOverlay = function(overlayId) {
	var isScroll = $.data($('#' + overlayId)[0], 'isScroll');
	$('#' + overlayId).css('display', 'none').trigger('create');;
	$('#' + overlayId).remove();

	if(isScroll.scrollY) {
		$('body').css({
			'overflow-y': 'auto',
			'padding-right': '0'
		});
	}
	if(isScroll.scrollX) {
		$(document.body).css({
			'overflow-x': 'auto',
			'padding-bottom': '0'
		});
	}
};

uf.open = function(opt) {
	var defaults = {
		url: '',
		title: '',
		width: 1000,
		height: '',
		ondestory: function(action) {}
	}
	var options = $.extend({}, defaults, opt);
	var width = options.width;
	var height = options.height;
	var $dialog, $iframe, $title, $closeBtn;
	var id = 'dlg-' + $.getGuid();

	function setContent() {
		initSize();
		var cnt = '<div class="uf-dialog" id="' + id + '" style="margin-top:-' + height + 'px;height:' + height + 'px;width:' + width + 'px;">' +
			'<div class="uf-close"> <span aria-hidden="true">×</span></div>' +
			'<div class="uf-dialog-content">' +
			'<div class="uf-title"><h4>' + options.title + '</h4></div>' +
			'<div class="uf-content">' +
			'<iframe name="wxframe" src="' + options.url + '" style="width:100%;height:100%;border-radius:2px;" frameborder="0"></iframe>' +
			'</div>' +
			'</div>' +
			'</div>';
		$(cnt).appendTo($('body')).trigger('create');

		$dialog = $('#' + id);
		$iframe = $dialog.find('iframe');
		$title = $dialog.find('.uf-title');
		$closeBtn = $dialog.find('.uf-close');
	}

	function initSize() {

		if($.isNull(height)) {
			height = $(window).height() - 50;
		}
		if(height > $(window).height() - 50) {
			height = $(window).height() - 50;
		};
		if($.isNull(width)) {
			width = $(window).width() - 100;
		}
		if(width > $(window).width() - 100) {
			width = $(window).width() - 100;
		};

	}

	var oId = uf.showOverlay();
	setContent();
	var zindex = $.newZIndex();
	$iframe.css({
		height: height - $title.outerHeight(true) + 'px'
	});
	$dialog.animate({
		'z-index': zindex,
		'marginTop': '10px',
		'margin-top': '10px'
	}, 50, function() {

	});

	$dialog.addClass('uf-dialog-open');

	_close = function() {
		uf.hideOverlay(oId);
		$dialog.css('display', 'none');
		$dialog.remove();
	};

	var frmWin = $iframe[0].contentWindow;
	frmWin.window.ownerData = options.data;

	var destory = options.ondestory;
	if(destory == undefined) {
		destory = function() {};
	}
	$closeBtn.on('click', function(e) {
		e.stopPropagation();
		frmWin.close();
		_close();
	});
	$iframe.load(function() {
		frmWin.closeOwner = function(data) {
			destory(data);
			_close();
		}
		$iframe.contents().find("html,body").css({
			'height': '100%'
		});
	});
	return frmWin;
};
/***************4.*******************/
uf.parse = function() {
	//初始化自定义控件
	$('.uf-treecombox').ufTreecombox({});
	$('.uf-combox').ufCombox({});
	$('.uf-textboxlist').ufTextboxlist({});
	$('.uf-datepicker').ufDatepicker({
		format: 'yyyy-mm-dd',
		initialDate: new Date()
	});
	$('.uf-form-group-panel .label-more').on('click', function() {
		$(this).toggleClass('open');
		var pnl = $(this).closest('.uf-form-group-panel');
		var bOpen = $(this).hasClass('open');
		var items = pnl.find('.more-item');
		var pnlHeight = $(pnl).height();
		$(pnl).css('height', pnlHeight + 'px');
		items.removeClass('hide');
		$.each(items, function() {
			var itemHeight = $(this).outerHeight(true);
			if(bOpen) {
				pnlHeight = pnlHeight + itemHeight;
			} else {
				pnlHeight = pnlHeight - itemHeight;
			}
		});
		$(pnl).css({
			'height': pnlHeight + 'px'
		});

		if(!bOpen) {
			items.addClass('hide');
		}
	});
	//tabs切换样式
	$('.nav-tabs').on('click', 'li', function(e) {
		e.stopPropagation();
		if($(this).hasClass('active')) return false;
		$(this).closest('.nav-tabs').find('li.active').removeClass('active');
		$(this).addClass('active');
	});
	//按钮点击后去掉焦点
	$('body').on('click', 'button', function(e) {
		e.preventDefault();
		$(this).blur();
		e.stopPropagation();
	});
};
// 页面跳转方法
uf.openNewPage = function (isCrossDomain, that, actionType, baseUrl, isNew, title) {
    var isCrossDomains = false;
    try {
        var href = window.top.location.href
    } catch (e) {
        isCrossDomains = true
	}
	ufma.getFapVersion(function (res) {
		if (res.data == "1") { //85平台 并且是从页面链接跳转过来的
			var keys = baseUrl.substring(baseUrl.indexOf("?"))
			// var strmenuid = uf.getStringParam(keys,'menuid')
			var reg = new RegExp("(^|&)menuid=([^&]*)(&|$)"); // 构造一个含有目标参数的正则表达式对象
			var r = keys.substr(1).match(reg); // 匹配目标参数
			var keysss = unescape(r[2])
			var callback = function (result) {
				if(r != null){
					if(result.data!=undefined){
						baseUrl=baseUrl.replace("menuid="+keysss,"menuid="+result.data[0].id)　
					}
				}
			}
			ufma.ajaxDef("/ma/sys/common/selectMenuCodeById", 'get','', callback,'',keysss)
		}
	})
    var roleId = $.getUrlParam('roleId')
    if ($.isNull(roleId)) {
        roleId = ufma.getCommonData().svRoleId
    }
    if (isCrossDomain || isCrossDomains) {
        // 此处即为监听到跨域
        var data = {
            actionType: actionType, // closeMenu 关闭   openMenu 打开
            url: window.location.protocol + '//' + window.location.host + baseUrl + '&roleId=' + roleId,
            isNew: isNew, // isNew: false表示在iframe中打开，为true的话就是在新页面打开
            title: title // 菜单标题
        }
        if (window.parent.postMessage == undefined) {
            window.parent.parent.postMessage(data, '*')
        } else {
            window.parent.postMessage(data, '*')
        }
    } else if (window.parent.addTabToParent != undefined || window.parent.parent.addTabToParent != undefined) {
        //门户打开方式  85门户打开菜单方法
        that.attr('data-href', baseUrl + '&roleId=' + roleId);
        that.attr('data-title', title);
        if (window.parent.addTabToParent == undefined) {
            window.parent.parent.addTabToParent(title, baseUrl + '&roleId=' + roleId);
        } else {
            window.parent.addTabToParent(title, baseUrl + '&roleId=' + roleId);
        }
    } else {
        //门户打开方式 80门户打开菜单方法
        that.attr('data-href', baseUrl + '&roleId=' + roleId);
        that.attr('data-title', title);
        if (window.parent.openNewMenu == undefined) {
            window.parent.parent.openNewMenu(that);
        } else {
            window.parent.openNewMenu(that);
        }
    }
};

/**
 * jquery 后端分页
 * 
 * 作者： guohx
 * 日期：2020年4月16日
 * 参数说明：paging-带有分页信息的变量，bodyId-html页面上 body的id,serachData-页面内部的定义的初始化页码和当前页行数
 */

uf.backendPaging = function (paging,bodyId,serachData) {
	// 修改为后端分页
	$("#" + bodyId + " .ufma-table-paginate").empty();
	// 分页部分功能 -- B
	//分页  不分页需判断
	if (!$.isNull(paging)){
		if (paging.pageSize != 0) {
			//创建基本分页节点
			var $pageBase = $('<ul id="vbTable-pagination" class="pagination pagination-sm pull-left"></ul>');
			//创建上一页节点  根据当前也判断是否可以点
			var $pagePrev;
			if ((paging.pageNum - 1) == 0) {
				$pagePrev = $('<li class="vbPrevPage disabled"><span><span aria-hidden="true" class="glyphicon icon-angle-left"></span></span></li>');
			} else {
				$pagePrev = $('<li class="vbPrevPage"><a href="javascript:;" aria-label="Previous" data-prevpage=' + (paging.pageNum - 1) + '>' +
					'<span aria-hidden="true" class="glyphicon icon-angle-left"></span>' +
					'</a></li>');
			}
			$pageBase.append($pagePrev);
			//创建页数节点,根据pageSize和凭证数据总数
			//创建页数变量
			var pageAmount = paging.pages;
			var $pageItem;
			for (var k = 1; k <= pageAmount; k++) {
				//第一页和最后一页显示
				if (k == 1 || k == pageAmount) {
					//三元运算判断是否当前页
					$pageItem = (k == paging.pageNum) ? $('<li class="vbNumPage active"><span data-gopage=' + k + '>' + k + ' <span class="sr-only">(current)</span></span></li>') : $('<li class="vbNumPage"><a href="javascript:;" data-gopage=' + k + '>' + k + '</a></li>');
				} else {
					//判断分页页数除去第一页和最后一页按钮的剩下的按钮数量是否大余3
					if ((pageAmount - 2) <= 3) {
						//三元运算判断是否当前页
						$pageItem = (k == paging.pageNum) ? $('<li class="vbNumPage active"><span data-gopage=' + k + '>' + k + ' <span class="sr-only">(current)</span></span></li>') : $('<li class="vbNumPage"><a href="javascript:;" data-gopage=' + k + '>' + k + '</a></li>');
					} else if ((pageAmount - 2) > 3) {
						//判断当前页位置
						if (paging.pageNum <= 2) {
							//分页按钮加载2到4之间
							if (k >= 2 && k <= 4) {
								//三元运算判断是否当前页
								$pageItem = (k == paging.pageNum) ? $('<li class="vbNumPage active"><span data-gopage=' + k + '>' + k + ' <span class="sr-only">(current)</span></span></li>') : $('<li class="vbNumPage"><a href="javascript:;" data-gopage=' + k + '>' + k + '</a></li>');
							}
						} else if (paging.pageNum > 2 && paging.pageNum < (pageAmount - 1)) {
							//分页按钮加载pageNum-1到pageNum+1之间
							if (k >= (paging.pageNum - 1) && k <= (paging.pageNum + 1)) {
								//三元运算判断是否当前页
								$pageItem = (k == paging.pageNum) ? $('<li class="vbNumPage active"><span data-gopage=' + k + '>' + k + ' <span class="sr-only">(current)</span></span></li>') : $('<li class="vbNumPage"><a href="javascript:;" data-gopage=' + k + '>' + k + '</a></li>');
							}
						} else if (paging.pageNum >= (pageAmount - 1)) {
							//分页按钮加载pageAmount-3到pageAmount-1之间
							if (k >= (pageAmount - 3) && k <= (pageAmount - 1)) {
								//三元运算判断是否当前页
								$pageItem = (k == paging.pageNum) ? $('<li class="vbNumPage active"><span data-gopage=' + k + '>' + k + ' <span class="sr-only">(current)</span></span></li>') : $('<li class="vbNumPage"><a href="javascript:;" data-gopage=' + k + '>' + k + '</a></li>');
							}
						}
					}
				}
				$pageBase.append($pageItem);
			}
			//创建下一页节点 根据当前页判断是否可以点
			var $pageNext;
			if ((pageAmount - paging.pageNum) == 0) {
				$pageNext = $('<li class="vbNextPage disabled"><span><span aria-hidden="true" class="glyphicon icon-angle-right"></span></span></li>');
			} else {
				$pageNext = $('<li class="vbNextPage"><a href="javascript:;" aria-label="Next" data-nextpage=' + (paging.pageNum + 1) + '>' +
					'<span aria-hidden="true" class="glyphicon icon-angle-right"></span>' +
					'</a></li>');
			}
			$pageBase.append($pageNext);
			$("#" + bodyId + " .ufma-table-paginate").html($pageBase);
			// $("#newAccounts .ufma-table-paginate").html($pageBase);
		}

		//创建分页大小基本节点
		var $pageSizeBase = $('<div class="pull-left" style="margin: 0 16px;"></div>');
		var $pageSel = $('<select class="vbPageSize bordered-input"></select>');
		//根据pageSize创建下拉列表
		//分页数组
		var pageArr = [20, 50, 100, 200, "全部"];
		var $pageOp;
		//定义是否不分页变量
		var isNoPaging;
		for (var n = 0; n < pageArr.length; n++) {
			isNoPaging = (pageArr[n] == 0) ? "全部" : pageArr[n];
			if (pageArr[n] == serachData.pageSize) {
				$pageOp = $('<option value=' + pageArr[n] + ' selected>' + isNoPaging + '</option>');
			} else {
				$pageOp = $('<option value=' + pageArr[n] + '>' + isNoPaging + '</option>');
			}
			$pageSel.append($pageOp);
		}
		$pageSizeBase.append("<span>显示 </span>");
		$pageSizeBase.append($pageSel);
		$pageSizeBase.append("<span> 条</span>");
		$("#" + bodyId + " .ufma-table-paginate").prepend($pageSizeBase);

		//创建总数统计节点
		var $vouDataSum = $('<div class="pull-left">共 <span class="vbSum">' + (paging.total ? paging.total : 0) + '</span> 条</div>');
		$("#" + bodyId + " .ufma-table-paginate").prepend($vouDataSum);
	}
};
//获取配置文件application-cwy830.properties中的参数fe.style 为空走默认样式 guohx  20200617
uf.getStyle = function () {
	$.ajax({
		url: '/pub/fe/config',
		data: {},
		type: "GET",
		async: false,
		contentType: 'application/json; charset=utf-8',
		success: function (result) {
			var bootPath = __CreateJSPath("boot.js");
			bootPath = bootPath.replace('/pub/', '/');
			console.log(result)
			if (result.style == "gongan") {
				document.write('<link href="' + bootPath + 'pub/less/style-gongan.less" rel="stylesheet/less" type="text/css" />');
			} else if(result.style == "guangdong"){
				document.write('<link href="' + bootPath + 'pub/less/style-gd.less" rel="stylesheet/less" type="text/css" />');
			}else if(result.style == "yibao"){
				document.write('<link href="' + bootPath + 'pub/less/style-yibao.less" rel="stylesheet/less" type="text/css" />');
			}else {
				document.write('<link href="' + bootPath + 'pub/less/style.less" rel="stylesheet/less" type="text/css" />');
			}
			document.write('<script src="' + bootPath + 'pub/less/less.js" type="text/javascript"></sc' + 'ript>');
		}
	});

};
uf.getStyle();